/**
 * Script used for running storybook in "standalone" mode so that we can have
 * full control of how packages are passed in.
 * https://storybook.js.org/docs/configurations/standalone-options/
 *
 * It works by
 *
 * Usage:
 * Run all storybooks for a package
 * $ yarn storybook packages/design-system/button
 * $ yarn storybook editor-core
 *
 * Build static storybook files for package (TODO)
 * $ yarn storybook --write packages/design-system/button
 * $ yarn storybook --write packages/editor/core
 *
 * Use local proxy to stargate staging
 * STORYBOOK_SESSION_TOKEN=<your-session-token> yarn storybook packages/design-system/button
 *
 * To get the session token:
 * 1. Go to https://id.stg.internal.atlassian.com/
 * 2. Open the devtools, and navigate to Application -> Cookies
 * 3. Copy the cookie value for cloud.session.token.stg
 *
 */
/* eslint-disable no-console */

// TODO: It would be nice to also take in all flags that storybook accepts
// and pass those on too. ie. --configDir, --port, --outputDir, --watch

import storybook from '@storybook/react/standalone';
import fs from 'fs';
import path from 'path';
import * as bolt from 'bolt';
import globby from 'globby';
import startCase from 'lodash/startCase';
import yargs from 'yargs';

const cli = yargs
  .required(1, 'yarn storybook [path/to/package]')
  .option('examples', { type: 'array', default: ['examples/*.{jsx,tsx}'] })
  .option('stories', { type: 'array', default: ['src/**/examples.{jsx,tsx}'] })
  .option('componentLabExamples', {
    type: 'array',
    default: ['__perf__/*.{jsx,tsx}'],
  })
  .option('verbose', { type: 'count', default: 0 })
  .option('write', { type: 'boolean', default: false })
  .option('outputDir', {
    type: 'string',
    default: path.join(__dirname, 'dist'),
  })
  .option('port', {
    type: 'number',
    default: 56789,
  })
  .alias('v', 'verbose')
  .alias('w', 'write')
  .example('', 'yarn storybook editor-core')
  .example('', 'yarn storybook packages/design-system/button').argv;

type SectionName =
  | 'exampleFiles'
  | 'storybookFiles'
  | 'componentLabExampleFiles';

type PackageFiles = {
  pkgName: string;
  pkgDir: string;
  exampleFiles: Array<string>;
  storybookFiles: Array<string>;
  componentLabExampleFiles: Array<string>;
};

function getPreviewJsFileStr(allPackageFiles: Array<PackageFiles>) {
  return `  /*
  THIS FILE IS AUTOGENERATED. DO NOT CHECK IT IN TO GIT
*/
/* eslint-disable global-require */
const { configure, addDecorator } = require('@storybook/react');
const { withPerformance } = require('storybook-addon-performance');
const { withKnobs } = require('@storybook/addon-knobs');
const { withConsole } = require('@storybook/addon-console');

// Adding global performance decorator
addDecorator(withPerformance);
// Adding global knobs decorator
addDecorator(withKnobs);
// Adding global console decorator
addDecorator((storyFn, context) => withConsole()(storyFn)(context));

function loadStories() {
  const allStories = [];

  // Load example files (files from examples/ directory)
  ${allPackageFiles
    .map(pkgFiles => createExamplesLoadingStr(pkgFiles))
    .join('\n    ')}

  // Load storybook files (co-located storybook files)

  let story; // temp var for storing references to storybook files

  ${allPackageFiles
    .map(pkgFiles => createStoriesLoadingStr(pkgFiles))
    .join('\n    ')}

  ${allPackageFiles
    .map(pkgFiles => createComponentLabStoriesLoadingStr(pkgFiles))
    .join('\n    ')}

  return allStories;
}

configure(loadStories, module);`;
}

function createExamplesLoadingStr(pkgFiles: PackageFiles): string {
  return createExamplesLoadingStrFor(pkgFiles, 'exampleFiles', 'examples');
}

function createComponentLabStoriesLoadingStr(pkgFiles: PackageFiles): string {
  return createExamplesLoadingStrFor(
    pkgFiles,
    'componentLabExampleFiles',
    'ComponentLab',
  );
}

function createStoriesLoadingStr(pkgFiles: PackageFiles) {
  const { pkgName, pkgDir, storybookFiles } = pkgFiles;
  if (storybookFiles.length === 0) {
    return '// No storybook files to load';
  }
  const safePkgName = pkgName.replace('/', '·');
  const getStoryTitle = (storyFile: string) => {
    const baseName = path.basename(storyFile);
    return (
      safePkgName +
      ' ' +
      storyFile.replace(/^src\//, '').replace('/' + baseName, '')
    );
  };

  return `
    ${storybookFiles
      .map(
        storyFile => `
    story = require('${getPathFromStoryDir(pkgDir, storyFile)}');
    if (!story.default) story.default= {};
    story.default.title = '${getStoryTitle(storyFile)}';
    allStories.push(story);`,
      )
      .join('\n    ')}`;
}

const getPathFromStoryDir = (pkgDir: string, exampleFile: string) => {
  const absPath = path.resolve(pkgDir, exampleFile);
  const relPathFromStoryDir = path.relative(__dirname, absPath);
  return relPathFromStoryDir;
};

const getExampleTitle = (exampleFile: string) => {
  // get filename without path, extension or leading numbers
  const baseName = path.parse(exampleFile).name.replace(/^.+?-/, '');
  const title = startCase(baseName);
  return title;
};

function createExamplesLoadingStrFor(
  pkgFiles: PackageFiles,
  examplesSection: SectionName,
  exampleTitle: string,
): string {
  const { pkgName, pkgDir } = pkgFiles;
  const exampleFiles = pkgFiles[examplesSection];

  if (exampleFiles.length === 0) {
    return '// No examples files to load';
  }

  const rootTitle = pkgName.replace('/', '·') + ` ${exampleTitle}`;

  return `allStories.push({
    default: {
      title: '${rootTitle}'
    },
    // Examples files
    ${exampleFiles
      .map(
        example =>
          `'${getExampleTitle(example)}': require('${getPathFromStoryDir(
            pkgDir,
            example,
          )}').default,`,
      )
      .join('\n    ')}
  });
`;
}

async function main() {
  // Positional arguments exposed _ via yargs
  const { _: pkgDirs } = cli;

  const workspaces = (await bolt.getWorkspaces()).map(ws => ({
    ...ws,
    relativeDir: path.relative(process.cwd(), ws.dir),
  }));

  const allPackages: Array<PackageFiles> = [];

  pkgDirs.forEach(pkgDir => {
    // naive fuzzy match. We match the full  relative path  first so that there is always
    // a way to avoid false positives
    const pkg = workspaces.find(
      ws =>
        ws.relativeDir === pkgDir || // match full relative path
        ws.name.endsWith(pkgDir) || // or end of package name
        ws.name.endsWith(`/${pkgDir}`), // or end of relative path
    );
    if (!pkg) {
      console.error(`Unable to find a package that matches ${pkgDir}.`);
      return process.exit(1);
    }
    // For each package we match we fetch all of its example and storybook files
    const pkgFiles: PackageFiles = {
      pkgName: pkg.name,
      pkgDir: pkg.dir,
      exampleFiles: globby.sync(cli.examples, { cwd: pkg.dir }),
      storybookFiles: globby.sync(cli.stories, { cwd: pkg.dir }),
      componentLabExampleFiles: globby.sync(cli.componentLabExamples, {
        cwd: pkg.dir,
      }),
    };

    allPackages.push(pkgFiles);
  });

  if (cli.verbose > 0) {
    console.log('~~~~~~~~~~~~~~~');
    console.log(allPackages);
    console.log('~~~~~~~~~~~~~~~');
  }

  const outStr = getPreviewJsFileStr(allPackages);
  const outputFilePath = path.join(__dirname, 'preview.js');
  fs.writeFileSync(outputFilePath, outStr);
  storybook({
    mode: cli.write ? 'static' : 'dev',
    configDir: __dirname,
    outputDir: cli.outputDir,
    port: cli.port,
    staticDir: ['.storybook/public'],
  });
}

main().catch(err => {
  console.error(err);
  process.exit(1);
});
