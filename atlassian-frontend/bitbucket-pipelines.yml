##########################################################################
########################     ANCHORS    ##################################
##########################################################################

aliases:
  # Extract all the diff images and store them into a folder for download.
  - &store-snapshot-failures mkdir ./imageSnapshotFailures && find . \( -name '*-diff.png' -or -name '*-error.png' \) -not -path "./node_modules/*" -exec cp {} ./imageSnapshotFailures \;
  - &snapshot-artifact imageSnapshotFailures/**
  - &browserstack-artifact integration_tests_artifacts/**
  - &fix-jest-junit-xml (cd build/legacy/ci-scripts && bolt ts-node fix-jest-junit-xml.ts)
  # For these steps below, we need to make sure they are set at the end of the `after-script` to avoid blocking pipelines.
  - &send-build-events bolt w @atlaskit/build-reporting send-events
  - &send-step-events bolt w @atlaskit/build-reporting send-step-events
  - &landkid-setup source ./build/ci/instant-scripts/landkid-setup.sh
  - &build-setup source ./build-setup.sh
  - &bolt-install bolt install --frozen-lockfile

vr-image: &vr-image
  image:
    name: docker-proxy.services.atlassian.com/sox/atlassian/atlassian-frontend-vr:latest-v7
    username: dnovoa
    password: $PIPELINES_JWT_TOKEN

# This build allow to push the bundle size results as ratchet file to s3.
# The script `build/legacy/ci-scripts/split.pkgs.for.bundle.size.step.js` uses `BITBUCKET_PARALLEL_STEP` under the hood.
# It starts at 0 as per the BITBUCKET_PARALLEL_STEP.
pushBundleSizeToS3: &pushBundleSizeToS3
  script:
    # This lets us push to private npm registry
    - pipe: atlassian/artifactory-sidekick:v1
    - *build-setup
    - git fetch origin $BITBUCKET_BRANCH && git checkout $BITBUCKET_BRANCH && git checkout - && git merge $BITBUCKET_BRANCH --no-edit
    - *bolt-install
    - (cd build/ci/bundle-size-pipeline && yarn split-pkgs-for-bundle-size) | tee bundle-size-packages.txt
    # We grep the line including `packages/` to remove any output from ts-node.
    - export BUNDLE_SIZE_PKGS; BUNDLE_SIZE_PKGS=$(grep packages bundle-size-packages.txt)
    - echo $BUNDLE_SIZE_PKGS | xargs -n1 -P2 yarn measure --updateSnapshot --s3
    - echo $BUNDLE_SIZE_PKGS | xargs -n1 -P2 yarn measure --updateSnapshot --s3 --entryPoints
  after-script:
    - if [[ "$BITBUCKET_BRANCH" == "master" ]]; then cd build/ci/bundle-size-pipeline && yarn send:bundleSize; fi
    - *send-step-events

create-bundle-size-status: &create-bundle-size-status
    script:
      - pipe: atlassian/artifactory-sidekick:v1
      - *build-setup
      - *bolt-install
      - (cd build/legacy/ci-scripts && yarn upload-build-status --name="Bundle Size [OPT]" --description="Measure the bundle size of dependent packages" --state="INPROGRESS")
    after-script:
      # For optional build, we upload a `STOPPED` status.
      - if [ $BITBUCKET_EXIT_CODE -gt 0 ]; then (cd build/legacy/ci-scripts && yarn update-build-status --name="Bundle Size [OPT]" --state="STOPPED"); fi
      - *send-step-events

# Run bundle size
run-bundle-size: &run-bundle-size
    script:
      # This lets us push to private npm registry
      - pipe: atlassian/artifactory-sidekick:v1
      - *build-setup
      - git fetch origin $TARGET_BRANCH && git checkout $TARGET_BRANCH && git checkout - && git merge $TARGET_BRANCH --no-edit
      - *bolt-install
      - export CHANGED_MAIN_PACKAGES="$MAIN_PACKAGES" && export CHANGED_PACKAGES="$CHANGED_PACKAGES"
      - (cd build/ci/bundle-size-pipeline && yarn split-pkgs-for-bundle-size) | tee bundle-size-packages.txt
      # We grep the line including `packages/` to remove any output from ts-node.
      - export BUNDLE_SIZE_PKGS; BUNDLE_SIZE_PKGS=$(grep packages bundle-size-packages.txt)
      # We want to always capture the bundle size even if the step fails for a reason.
      - echo $BUNDLE_SIZE_PKGS | xargs -n1 -P2 yarn measure --lint --s3  --entryPoints
    artifacts:
      - .currentBundleSize/**
    after-script:
      # For optional build, we upload a `STOPPED` status.
      - if [ $BITBUCKET_EXIT_CODE -gt 0 ]; then cd build/legacy/ci-scripts && yarn update-build-status --name='Bundle Size [OPT]' --state="STOPPED"; fi
      - *send-build-events

run-bundle-size-final: &run-bundle-size-final
    script:
      # This lets us push to private npm registry
      - pipe: atlassian/artifactory-sidekick:v1
      - *build-setup
      - *bolt-install
      - (cd build/ci/bundle-size-pipeline && yarn merge:json)
      - if [ -e ".currentBundleSize/merged.json" ]; then node build/legacy/ci-scripts/upload.build.artefact.for.commit.js .currentBundleSize/merged.json; fi
    after-script:
      - (cd build/legacy/ci-scripts && yarn update-build-status --name='Bundle Size [OPT]' --state=$([ $BITBUCKET_EXIT_CODE -eq 0 ] && echo "SUCCESSFUL" || echo "FAILED"))
      - *send-build-events


# This build runs the visual regression tests in parallel steps.
# It uses `BITBUCKET_PARALLEL_STEP_COUNT` & `BITBUCKET_PARALLEL_STEP` to enable the parallel batching.
# If `TEST_FILES` is specified it will run the tests multiple times in parallel.
runVisualRegressionStep: &runVisualRegressionStep
  <<: *vr-image
  script:
    # This lets us push to private npm registry
    - pipe: atlassian/artifactory-sidekick:v1
    - *build-setup
    - git lfs pull
    - *bolt-install
    - CUSTOM_BUILD=true PARALLEL=true ./build/ci/test-pipeline/ci/run-vr.sh
  after-script:
    - (cd build/legacy/ci-scripts && yarn update-default-build-status "Visual Regression Build")
    - *store-snapshot-failures
    - *send-step-events
  # If a failure occurs, you can download the image snapshot of the differences.
  artifacts:
    - *snapshot-artifact

# This build runs the webdriver tests in parallel steps.
# It uses `BITBUCKET_PARALLEL_STEP_COUNT` & `BITBUCKET_PARALLEL_STEP` to enable the parallel batching.
# If `TEST_FILES` is specified it will run the tests multiple times in parallel.
runWebdriverStep: &runWebdriverStep
  script:
    # This lets us push to private npm registry
    - pipe: atlassian/artifactory-sidekick:v1
    - *build-setup
    - *bolt-install
    - CUSTOM_BUILD=true PARALLEL=true ./build/ci/test-pipeline/ci/run-webdriver.sh
  after-script:
    - (cd build/legacy/ci-scripts && yarn update-default-build-status "Webdriver Build")
    - *send-step-events
  artifacts:
    - *browserstack-artifact

unit-test-parallel-step: &unit-test-parallel-step
  script:
    # This lets us push to private npm registry
    - pipe: atlassian/artifactory-sidekick:v1
    - if [[ -n "$IS_LANDKID_BUILD" ]]; then source ./build/ci/instant-scripts/landkid-setup.sh; else source ./build-setup.sh; fi
    - *bolt-install
    # We dont LANDKID var here because it will modify our tests for webdriver
    - PARALLEL=true ./build/ci/test-pipeline/ci/run-unit.sh
  after-script:
    - git merge --abort || true
    - *fix-jest-junit-xml
    - *send-step-events
  artifacts:
    - test-reports/junit.xml

vr-test-parallel-step: &vr-test-parallel-step
  <<: *vr-image
  script:
    - pipe: atlassian/artifactory-sidekick:v1
    - if [[ -n "$IS_LANDKID_BUILD" ]]; then source ./build/ci/instant-scripts/landkid-setup.sh; else source ./build-setup.sh; fi
    - *bolt-install
    # We have to set the LANDKID var here to set the correct build reporting variables
    - PARALLEL=true LANDKID="$IS_LANDKID_BUILD" ./build/ci/test-pipeline/ci/run-vr.sh
  after-script:
    - git merge --abort || true
    - *store-snapshot-failures
    - *send-step-events
  artifacts:
    - *snapshot-artifact


parallel-test-variables: &parallel-test-variables
  variables:
      # Filtered set of packages determined by cache
      - name: CHANGED_PACKAGES
      # Optional landkid vars required to rebase correctly
      - name: IS_LANDKID_BUILD # Set to true to run as a landkid build (do rebasing, etc)
      - name: TARGET_BRANCH
      - name: LANDKID_DEPENDENCY_COMMITS


##########################################################################
######################     PIPELINES    ##################################
##########################################################################
# Note: This image can be found in services/pipelines-docker-image.
image:
  name: docker-proxy.services.atlassian.com/sox/atlassian/atlassian-frontend:latest-v7
  username: dnovoa
  password: $PIPELINES_JWT_TOKEN
# This ensures we do a full clone on each build which prevents issues when cross referencing
# changesets and releases
clone:
  depth: full
options:
  size: 4x

pipelines:
  branches:
    master:
      - step:
          name: Build and publish packages + Deploy services
          script:
            # This lets us push to private npm registry
            # Adding `SOX: 'true'` will enable to publish to `@atlassiansox`.
            - pipe: atlassian/artifactory-sidekick:v1
              variables:
                SOX: 'true'
            - *build-setup
            - ./build/legacy/ci-scripts/master/run-master.sh
          after-script:
            - *send-build-events

    'release-candidate/*':
      - parallel:
          - step:
              name: Merge into next RC/develop
              script:
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                - yarn ts-node build/legacy/ci-scripts/merge-downstream
          # This was done in a PR build previously, but merging does not trigger a re-run: see https://product-fabric.atlassian.net/browse/AFP-1700
          - step:
              name: Trigger default branch build
              script:
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                - (cd build/legacy/ci-scripts && yarn trigger-pipeline --branch="$BITBUCKET_BRANCH" --pipeline="default")

  pull-requests:
    '**':
      - parallel:
          - step:
              name: Check for changesets
              script:
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                # Enforce the existence of a changeset (when applicable). Errors when one is required but missing.
                - yarn check-changesets
              after-script:
                - *send-step-events
          - step:
              name: Check for packages on scheduled releases
              script:
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                - (cd build/legacy/ci-scripts && yarn check-scheduled-releases)
              after-script:
                - *send-step-events
          - step:
              name: Upload package ownership metadata and add reviewers
              script:
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                - (cd build/legacy/ci-scripts && yarn package-ownership-upload)
              after-script:
                - *send-step-events
          - step:
              name: Trigger mobile webdriver and flakey detection build
              script:
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                # if `$TRIGGER_FLAKEY_DETECTION` is set, we do trigger the additional WD pipelines that run the changed tests.
                # this env var is set in BB settings.
                - if [[ "$TRIGGER_FLAKEY_DETECTION" == true ]]; then (cd build/legacy/ci-scripts && yarn trigger-webdriver-if-changed); else echo "Skipping the trigger of additional pipelines for flakey test detection";fi
                # if `$TRIGGER_MOBILE_TESTS` is set, we trigger the additional mobile integration tests pipelines that run the changed tests.
                # this env var is set in BB settings.
                - if [[ "$TRIGGER_MOBILE_TESTS" == true ]]; then (cd build/legacy/ci-scripts && yarn trigger-webdriver-webview-if-changed); else echo "Skipping the trigger of mobile integration tests";fi
              after-script:
                - *send-step-events
          - step:
              name: Run webdriver tests
              script:
                # This lets us push to private npm registry
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                - export RUN_WEBDRIVER; RUN_WEBDRIVER=$(node build/legacy/ci-scripts/run.tool.if.changed.js webdriver -- echo "true")
                - if [[ "$RUN_WEBDRIVER" != true ]]; then echo "Skipping Webdriver step" && exit 0; fi
                - CHANGED=true ./build/ci/test-pipeline/ci/run-webdriver.sh
              after-script:
                - *fix-jest-junit-xml
                - *send-step-events
              artifacts:
                - test-reports/junit.xml
                - *browserstack-artifact
      - step:
          name: Sending build events
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
          after-script:
            # delete the test-reports saved as artifacts to avoid test results to be displayed in this step.
            - if [ -d test-reports ] ; then rm -rf test-reports; fi
            - *send-build-events
  default:
    - parallel:
        - step:
            name: Trigger Builds And Create Default Build Status
            script:
              - pipe: atlassian/artifactory-sidekick:v1
              - *build-setup
              - *bolt-install
              - cd build/legacy/ci-scripts
              - yarn upload-build-status --name='Default Branch Build' --description="Default build for $BITBUCKET_BRANCH" --state="INPROGRESS"
              # trigger build & branch deploy packages build if needed
              - yarn trigger-build-and-branch-deploy-packages
              # trigger Atlaskit website build if needed
              - yarn trigger-website-build-if-changed
              # trigger constellation website if DS docs changes
              # TODO: DSP-1964: stop running this step for now until we find a proper solution to fix the failed build
              # https://atlassian.slack.com/archives/CL6HC337Z/p1631663077122500
              # - yarn trigger-build-ds-docs-if-changed
              # trigger running bundle size if needed
              - (cd - && cd build/ci/bundle-size-pipeline && yarn trigger-bundle-size-if-changed)
              # if `$TRIGGER_FLAKEY_DETECTION` is set, we do trigger the additional VR pipelines that run the changed tests.
              # this env var is set in BB settings, in addition, we add a check to not run this additional build on develop.
              - if [[ "$TRIGGER_FLAKEY_DETECTION" == true ]]; then yarn trigger-visual-regression-if-changed; else echo "Skipping the trigger of additional pipelines for flakey test detection";fi
            after-script:
              - (cd build/legacy/ci-scripts && yarn update-default-build-status)
              - *send-step-events
        - step:
            name: Cache Node Modules
            script:
              # This lets us push to private npm registry
              - pipe: atlassian/artifactory-sidekick:v1
              - *build-setup
              - *bolt-install
              # If there's no cache for the current yarn.lock, push our node_modules to the cache
              - ./build/ci/instant-scripts/ci-cache.sh compress-and-push
            after-script:
              - (cd build/legacy/ci-scripts && yarn update-default-build-status)
              - *send-step-events
        - step:
            name: Lockfile Linting + Licenses checking
            script:
              # This lets us push to private npm registry
              - pipe: atlassian/artifactory-sidekick:v1
              - *build-setup
              - *bolt-install
              - yarn manypkg check
              - build/legacy/ci-scripts/check-yarn-lock.sh
              - echo "We are now checking the licenses, if the step below fails, it means you are adding a package or a dependency that has an incompatible license."
              - yarn check:licenses
            after-script:
              - (cd build/legacy/ci-scripts && yarn update-default-build-status)
              - *send-step-events
        - step:
            name: Lint
            script:
              # This lets us push to private npm registry
              - pipe: atlassian/artifactory-sidekick:v1
              - *build-setup
              - *bolt-install
              - node build/legacy/ci-scripts/get.changed.packages.since.base.branch.js --spaceDelimited | xargs yarn lint:eslint fileMock.js
              - node build/legacy/ci-scripts/get.changed.packages.since.base.branch.js --spaceDelimited | xargs yarn lint:prettier fileMock.js
              # Check that ts-config.entry-points.json is up to date
              - yarn build:tsconfig && git diff --exit-code -- tsconfig.entry-points.json || (echo 'tsconfig.entry-points.json is out of date, run bolt to update' && false)
              # Tests for unused directives to guard against important rules silently failing.
              - cd build/linting/eslint-tests && yarn test-eslint
            after-script:
              - (cd build/legacy/ci-scripts && yarn update-default-build-status)
              - *fix-jest-junit-xml
              - *send-step-events
            artifacts:
              - test-reports/junit.xml
        - step:
            name: Stylelint + Typecheck + Stricter
            script:
              # This lets us push to private npm registry
              - pipe: atlassian/artifactory-sidekick:v1
              - *build-setup
              - *bolt-install
              - node build/legacy/ci-scripts/run.tool.if.changed.js stylelint -- yarn lint:stylelint
              - node build/legacy/ci-scripts/run.tool.if.changed.js typecheck -- yarn typecheck
              - yarn lint:stricter
            after-script:
              - (cd build/legacy/ci-scripts && yarn update-default-build-status)
              - *send-step-events
        - step:
            name: Testing exception packages
            script:
              - pipe: atlassian/artifactory-sidekick:v1
              - *build-setup
              - *bolt-install
              # Run platform-specific tests of the editor bridge
              - yarn test:editor-mobile:changed:android --passWithNoTests && yarn test:editor-mobile:changed:ios --passWithNoTests
              # This script acts like a unit test to check changes to @atlaskit/adf-schema.
              - node build/legacy/ci-scripts/run.if.package.changed.js @atlaskit/adf-schema -- yarn build:adf-schema:checkuptodate
            after-script:
              - (cd build/legacy/ci-scripts && yarn update-default-build-status)
              - *fix-jest-junit-xml
              - *send-step-events
            artifacts:
              - test-reports/junit.xml
        - step:
            name: Unit Testing
            script:
              # This lets us push to private npm registry
              - pipe: atlassian/artifactory-sidekick:v1
              - *build-setup
              - *bolt-install
              - CHANGED=true PARALLEL_TRIGGER=true ./build/ci/test-pipeline/ci/run-unit.sh
            after-script:
              - (cd build/legacy/ci-scripts && yarn update-default-build-status)
              - *fix-jest-junit-xml
              - *send-step-events
            artifacts:
              - test-reports/junit.xml
        - step:
            name: Visual Regression Testing
            <<: *vr-image
            script:
              # This lets us push to private npm registry
              - pipe: atlassian/artifactory-sidekick:v1
              - *build-setup
              - git lfs pull
              - *bolt-install
              - export RUN_VR; RUN_VR=$(node build/legacy/ci-scripts/run.tool.if.changed.js vr -- echo "true")
              - if [[ "$RUN_VR" != true ]]; then echo "Skipping VR step" && exit 0; fi
              - CHANGED=true PARALLEL_TRIGGER=true ./build/ci/test-pipeline/ci/run-vr.sh
            after-script:
              - (cd build/legacy/ci-scripts && yarn update-default-build-status)
              - *fix-jest-junit-xml
              # Extract all the diff images and store them into a folder for download.
              - *store-snapshot-failures
              - *send-step-events
            # If a failure occurs, you can download the image snapshot of the differences.
            artifacts:
              - *snapshot-artifact
              - test-reports/junit.xml
        - step:
            name: Deploy Services
            script:
              - pipe: atlassian/artifactory-sidekick:v1
              - *build-setup
              - *bolt-install
              - bolt w @af/service-deployments trigger-branch-deployments
            after-script:
              - (cd build/legacy/ci-scripts && yarn update-default-build-status)
              - *send-step-events
        - step:
            # We're preparing to move from bolt to yarn and this build validates the repo is a good
            # state for executing this move. If this fails because the lockfile has changed, most likely
            # You have touched a dependency that also has a yarn resolution. To fix this make the yarn resolution
            # more specific using yarn why to find out where it's used.
            name: Branch is yarn compatible
            script:
              - pipe: atlassian/artifactory-sidekick:v1
              - source ./build-setup.sh
              - node build/ci/instant-scripts/add-yarn-workspace.js
              # Disabling preinstall to get past the isBolt check
              - DISABLE_PREINSTALL=true yarn install --frozen-lockfile
            after-script:
              - (cd build/legacy/ci-scripts && yarn update-default-build-status)
              - *send-step-events
            artifacts:
              - yarn.lock
    - step:
        name: Update final build status
        script:
          - pipe: atlassian/artifactory-sidekick:v1
          - *build-setup
          - *bolt-install
        after-script:
          - (cd build/legacy/ci-scripts && yarn update-default-build-status --final)
          # delete the test-reports saved as artifacts to avoid test results to be displayed in this step.
          - if [ -d test-reports ] ; then rm -rf test-reports; fi
          - *send-build-events

  # Pipelines that can be scheduled or triggered manually.
  custom:
    run-code-evolution-issue-reporter:
      - step:
          caches:
            - node
          name: Run code evolution issue reporter
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - source ./build-setup.sh
            - bolt install --frozen-lockfile
            - bolt run eslint -f json -o ./eslint-result.json ./packages/
            - bolt code-evolution-issue-reporter -e ./eslint-result.json
    # DO NOT RE-RUN THIS PIPELINE even on failure - better to push a new commit.
    build-and-branch-deploy-packages:
      - parallel:
          - step:
              name: Build dists
              script:
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                # Note: Some of the packages store their assets in `git-lfs` and we need to pull those assets to make sure their packages are properly built.
                - git lfs pull --include "**/packages/**/*.svg, **/packages/**/*.png" --exclude="**/__image_snapshots__/*.png"
                # this env var changes the version injected for analytics to 0.0.0-development
                - ANALYTICS_DEVELOPMENT_VERSION=true yarn build --distType cjs,esm,es2019
                - node build/legacy/ci-scripts/run.if.package.changed.js @atlaskit/editor-mobile-bridge -- yarn build:editor-mobile-bridge
                - (cd build/legacy/ci-scripts && yarn upload-partial-dists --distType all)
              after-script:
                # This script will only set the build status if this job fails, otherwise it just echo "SUCCESSFUL"
                - if [ $BITBUCKET_EXIT_CODE -gt 0 ]; then (cd build/legacy/ci-scripts && yarn update-build-status --name="Build packages" --state="FAILED"); fi
                - *send-step-events
          - step:
              name: Build types
              script:
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                # Note: Some of the packages store their assets in `git-lfs` and we need to pull those assets to make sure their packages are properly built.
                - git lfs pull --include "**/packages/**/*.svg, **/packages/**/*.png" --exclude="**/__image_snapshots__/*.png"
                - yarn build --distType types
                - (cd build/legacy/ci-scripts && yarn upload-partial-dists --distType types)
              after-script:
                # This script will only set the build status if this job fails, otherwise it just echo "SUCCESSFUL"
                - if [ $BITBUCKET_EXIT_CODE -gt 0 ]; then (cd build/legacy/ci-scripts && yarn update-build-status --name="Build packages" --state="FAILED"); fi
                - *send-step-events
      - step:
          name: Upload branch deploys
          script:
            # This lets us push to private npm registry
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            # statlas is required for branch deploys
            - (cd build/legacy/ci-scripts && source install-statlas.sh)
            - (cd build/legacy/ci-scripts && yarn download-partial-dists)
            - tar xzvf all.tar.gz && tar xzvf types.tar.gz
            # Deploy only the editor mobile bridge if changed
            - (cd build/legacy/ci-scripts && yarn branch-deploy-editor-mobile-bridge $BITBUCKET_COMMIT)
            # Reset package.json's back
            - git reset --hard HEAD
            # Set auth for snapshots p.a.c - We set the registry for the atlaskit scope here as well as it isn't in npmrc by default
            - npm set @atlaskit:registry https://packages.atlassian.com/api/npm/npm-private-snapshot/
            - sed -i -e 's/\/\/packages.atlassian.com\/api\/npm\/atlassian-npm\//\/\/packages.atlassian.com\/api\/npm\/npm-private-snapshot\//g' ~/.npmrc
            # Publish to snapshots p.a.c
            - (cd build/legacy/ci-scripts && yarn branch-deploy $BITBUCKET_COMMIT)
            # Reset package.json's back as we modify the name of `@atlassiansox` to `@atlassian/not-sox`.
            # We need to do so to trigger the Product Integrator and compute the release plan.
            # However, the product integrator triggering will compute and replace the name of `@atlassiansox` to `@atlassian/not-sox`.
            - git reset --hard HEAD
            - if [[ "$TRIGGER_PRODUCT_INTEGRATOR" == false ]]; then echo "Skipping Product Integrator" && exit 0; fi
            - (cd build/legacy/ci-scripts && yarn trigger-product-integrator)
          after-script:
            - (cd build/legacy/ci-scripts && yarn update-build-status --name="Build packages" --state=$([ $BITBUCKET_EXIT_CODE -eq 0 ] && echo "SUCCESSFUL" || echo "FAILED"))
            - *send-build-events

    product-integrator-build:
      - variables:
          - name: PACKAGES
      - parallel:
          - step:
              name: Create Product Integrator Build Status
              script:
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                - (cd build/legacy/ci-scripts && yarn upload-build-status --name="Product Integrator" --description="Product Integrator Build" --state="INPROGRESS")
              after-script:
                # This script will only set the build status if this job fails, otherwise it just echo "SUCCESSFUL"
                - if [ $BITBUCKET_EXIT_CODE -gt 0 ]; then (cd build/legacy/ci-scripts && yarn update-build-status --name="Product Integrator" --state="FAILED"); fi
                - *send-step-events
          - step:
              image:
                name: docker-proxy.services.atlassian.com/sox/atlassian/atlassian-frontend-product-integrator:latest-v7
                username: dnovoa
                password: $PIPELINES_JWT_TOKEN
              name: Confluence Product Integrator
              script:
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - if [[ "$PACKAGES" == "" ]]; then echo "No packages to branch deploy" && exit 0; else echo "Branch deploying...$PACKAGES";fi
                - *bolt-install
                - export PRODUCT=confluence && export PRODUCT_PLAN_URL="$PRODUCT_CONFLUENCE_PLAN_URL" && export PRODUCT_CI_TOKEN="$CONFLUENCE_BAMBOO_TOKEN_BOT"
                - source packages/monorepo-tooling/branch-deploy-product-integrator/scripts/install-branch-deploy.sh
              after-script:
                - (cd packages/monorepo-tooling/branch-deploy-product-integrator && PRODUCT=confluence yarn send-product-integrator-status)
                # This script will only set the build status if this job fails, otherwise it just echo "SUCCESSFUL"
                - if [ $BITBUCKET_EXIT_CODE -gt 0 ]; then (cd build/legacy/ci-scripts && yarn update-build-status --name="Product Integrator" --state="FAILED"); fi
                # This script updates the Release Dashboard which tracks the product-fabric branch deployment
                - if [[ "$BITBUCKET_BRANCH" == "develop" ]]; then (cd build/legacy/ci-scripts && ./post-product-integrator-status-to-release-dashboard.sh && echo "status pushed to http://go/af-release"); fi
                - *send-step-events
          - step:
              image:
                name: docker-proxy.services.atlassian.com/sox/atlassian/atlassian-frontend-product-integrator:latest-v7
                username: dnovoa
                password: $PIPELINES_JWT_TOKEN
              name: Jira Product Integrator
              script:
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                # TODO: For now, JIRA Product Integrator is disabled because of Media-core not available in atlassian-npm:
                #  https://hello.atlassian.net/browse/BENGHELP-1326.
                - if [[ "$TRIGGER_PRODUCT_INTEGRATOR_JIRA" == false ]]; then echo "Skipping Product Integrator for JIRA" && exit 0; fi
                - if [[ "$PACKAGES" == "" ]]; then echo "No packages to branch deploy" && exit 0; else echo "Branch deploying...$PACKAGES";fi
                - *bolt-install
                - export PRODUCT=jira && export PRODUCT_PLAN_URL="$PRODUCT_JIRA_PLAN_URL" && export PRODUCT_CI_TOKEN="$JIRA_BAMBOO_TOKEN_BOT"
                - source packages/monorepo-tooling/branch-deploy-product-integrator/scripts/install-branch-deploy.sh
              after-script:
                - (cd packages/monorepo-tooling/branch-deploy-product-integrator && PRODUCT=jira yarn send-product-integrator-status)
                - if [ $BITBUCKET_EXIT_CODE -gt 0 ]; then (cd build/legacy/ci-scripts && yarn update-build-status --name="Product Integrator" --state="FAILED"); fi
                - *send-step-events

      - step:
          name: 'Update Product Integrator Status'
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
          after-script:
            - (cd build/legacy/ci-scripts && yarn update-build-status --commit="$BITBUCKET_COMMIT" --name="Product Integrator" --state=$([ $BITBUCKET_EXIT_CODE -eq 0 ] && echo "SUCCESSFUL" || echo "FAILED"))
            - *send-build-events

    cla-internal-deploy:
      # Non-SOX deployment pipeline for CLA Internal (for SOX deployments, use cla-sox-deploy pipeline).
      # MICROS_ENV: ddev or stg-east
      - variables:
          - name: MICROS_ENV

      - step:
          name: Build and push to docker registry
          services:
            - docker
          caches:
            - docker
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - source .artifactory/activate.sh
            - export DOCKER_URL="docker-proxy.services.atlassian.com"
            - export IMAGE_NAME="$DOCKER_URL/twp/cla-internal-web:$BITBUCKET_COMMIT"
            - cd services/cla/cla-internal
            - docker build -t $IMAGE_NAME . --build-arg ARTIFACTORY_USERNAME=$ARTIFACTORY_USERNAME --build-arg ARTIFACTORY_PASSWORD=$ARTIFACTORY_PASSWORD
            - echo $PIPELINES_JWT_TOKEN | docker login -u=dnovoa --password-stdin $DOCKER_URL
            - docker push $IMAGE_NAME

      - step:
          name: Test & Upload Poco Policy
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - source .artifactory/activate.sh
            - pipe: atlassian/poco-pipe:v1
              variables:
                SERVICE_NAME: cla-internal
                POLICIES: services/cla/cla-internal/poco/policy/policies.json
                TESTS: services/cla/cla-internal/poco/test.json

      - step:
          name: Tag Poco Policy
          script:
            - if [[ "$MICROS_ENV" == "ddev" ]]; then export MICROS_ENVTYPE="dev";fi
            - if [[ "$MICROS_ENV" == "stg-east" ]]; then export MICROS_ENVTYPE="staging";fi
            - pipe: atlassian/artifactory-sidekick:v1
            - source .artifactory/activate.sh
            - pipe: atlassian/poco-pipe:v1
              variables:
                SERVICE_NAME: cla-internal
                ENV: '$MICROS_ENVTYPE'
                RELEASE: "true"

      - step:
          name: Deploy CLA Internal
          script:
            - echo "Deploying CLA-Internal to $MICROS_ENV"
            - build/service-support/micros-support/scripts/install-atlas.sh
            - export DOCKER_IMAGE="docker.atl-paas.net/twp/cla-internal-web"
            - cd services/cla/cla-internal
            - VERSION=$BITBUCKET_COMMIT DOCKER_IMAGE=$DOCKER_IMAGE MICROS_ENV=$MICROS_ENV MICROS_TOKEN=$CLA_INTERNAL_MICROS_TOKEN ./scripts/deploy.sh

    cla-external-deploy:
      # Non-SOX deployment pipeline for CLA External (for SOX deployments, use cla-sox-deploy pipeline).
      # MICROS_ENV: ddev or stg-east
      - variables:
          - name: MICROS_ENV

      - step:
          name: Build and push to docker registry
          services:
            - docker
          caches:
            - docker
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - source .artifactory/activate.sh
            - export DOCKER_URL="docker-proxy.services.atlassian.com"
            - export IMAGE_NAME="$DOCKER_URL/twp/cla-external-web:$BITBUCKET_COMMIT"
            - cd services/cla/cla-external
            - docker build -t $IMAGE_NAME . --build-arg ARTIFACTORY_USERNAME=$ARTIFACTORY_USERNAME --build-arg ARTIFACTORY_PASSWORD=$ARTIFACTORY_PASSWORD
            - echo $PIPELINES_JWT_TOKEN | docker login -u=dnovoa --password-stdin $DOCKER_URL
            - docker push $IMAGE_NAME

      - step:
          name: Deploy CLA External
          script:
            - echo "Deploying CLA-External to $MICROS_ENV"
            - build/service-support/micros-support/scripts/install-atlas.sh
            - export DOCKER_IMAGE="docker.atl-paas.net/twp/cla-external-web"
            - cd services/cla/cla-external
            - VERSION=$BITBUCKET_COMMIT DOCKER_IMAGE=$DOCKER_IMAGE MICROS_ENV=$MICROS_ENV MICROS_TOKEN=$CLA_EXTERNAL_MICROS_TOKEN ./scripts/deploy.sh

    cla-bot-deploy:
      # Non-SOX deployment pipeline for CLA Bot (for SOX deployments, use cla-sox-deploy pipeline).
      # MICROS_ENV: ddev or stg-east
      - variables:
          - name: MICROS_ENV

      - step:
          name: Build and push to docker registry
          services:
            - docker
          caches:
            - docker
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - source .artifactory/activate.sh
            - export DOCKER_URL="docker-proxy.services.atlassian.com"
            - export IMAGE_NAME="$DOCKER_URL/twp/cla-bot-web:$BITBUCKET_COMMIT"
            - cd services/cla/cla-bot
            - docker build -t $IMAGE_NAME . --build-arg ARTIFACTORY_USERNAME=$ARTIFACTORY_USERNAME --build-arg ARTIFACTORY_PASSWORD=$ARTIFACTORY_PASSWORD
            - echo $PIPELINES_JWT_TOKEN | docker login -u=dnovoa --password-stdin $DOCKER_URL
            - docker push $IMAGE_NAME

      - step:
          name: Deploy CLA Bot
          script:
            - echo "Deploying CLA-Bot to $MICROS_ENV"
            - build/service-support/micros-support/scripts/install-atlas.sh
            - export DOCKER_IMAGE="docker.atl-paas.net/twp/cla-bot-web"
            - cd services/cla/cla-bot
            - VERSION=$BITBUCKET_COMMIT DOCKER_IMAGE=$DOCKER_IMAGE MICROS_ENV=$MICROS_ENV MICROS_TOKEN=$CLA_BOT_MICROS_TOKEN ./scripts/deploy.sh

    cla-sox-deploy:
      # MICROS_ENV: prod-east
      - variables:
          - name: SERVICE_NAME
          - name: MICROS_ENV

      - step:
          name: Build and push to docker registry
          services:
            - docker
          caches:
            - docker
          script:
            - echo "Building and pushing docker image for $SERVICE_NAME"
            - pipe: atlassian/artifactory-sidekick:v1
            - source .artifactory/activate.sh
            - export DOCKER_URL="docker-proxy.services.atlassian.com"
            - export IMAGE_NAME="$DOCKER_URL/sox/twp/$SERVICE_NAME-web:$BITBUCKET_COMMIT"
            - cd services/cla/$SERVICE_NAME
            - docker build -t $IMAGE_NAME . --build-arg ARTIFACTORY_USERNAME=$ARTIFACTORY_USERNAME --build-arg ARTIFACTORY_PASSWORD=$ARTIFACTORY_PASSWORD
            - echo $PIPELINES_JWT_TOKEN | docker login -u=sox --password-stdin $DOCKER_URL
            - docker push $IMAGE_NAME

      - step:
          name: Test & Upload Poco Policy
          script:
            - if [[ "$SERVICE_NAME" != "cla-internal" ]]; then echo "Skipping Poco for $SERVICE_NAME" && exit 0; fi
            - pipe: atlassian/artifactory-sidekick:v1
            - source .artifactory/activate.sh
            - pipe: atlassian/poco-pipe:v1
              variables:
                SERVICE_NAME: cla-internal
                POLICIES: services/cla/cla-internal/poco/policy/policies.json
                TESTS: services/cla/cla-internal/poco/test.json

      - step:
          name: Tag Poco Policy in prod
          script:
            - if [[ "$SERVICE_NAME" != "cla-internal" ]]; then echo "Skipping Poco for $SERVICE_NAME" && exit 0; fi
            - pipe: atlassian/artifactory-sidekick:v1
            - source .artifactory/activate.sh
            - pipe: atlassian/poco-pipe:v1
              variables:
                SERVICE_NAME: cla-internal
                ENV: prod
                RELEASE: "true"

      - step:
          name: Deploy CLA service
          image:
            name: docker-proxy.services.atlassian.com/sox/atlassian/atlassian-frontend:latest-v7
            username: sox
            password: $PIPELINES_JWT_TOKEN
          script:
            - echo "Deploying $SERVICE_NAME to $MICROS_ENV"
            - export MICROS_URL="wss://micros-proxy.services.atlassian.com"
            - export MICROS_TOKEN="sox:$PIPELINES_JWT_TOKEN"
            - export DOCKER_IMAGE="docker.atl-paas.net/sox/twp/$SERVICE_NAME-web"
            - build/service-support/micros-support/scripts/install-atlas.sh
            - cd services/cla/$SERVICE_NAME
            - VERSION=$BITBUCKET_COMMIT DOCKER_IMAGE=$DOCKER_IMAGE MICROS_ENV=$MICROS_ENV ./scripts/deploy.sh

    # Used to publish hotfixes for @atlassiansox packages.
    # It is HIGHLY RECOMMENDED that you visit https://developer.atlassian.com/cloud/framework/atlassian-frontend/development/09-publishing-hotfixes/
    hotfix-sox:
      - variables:
          # PACKAGE_NAME should be provided in the form of @scope/package-name (i.e., @atlassiansox/some-package)
          - name: PACKAGE_NAME
          - name: PASSWORD
      - step:
          script:
            - if [[ "$PASSWORD" != "$HOTFIX_PASSWORD" ]]; then echo "Authentication failed" && exit 1; fi
            - pipe: atlassian/artifactory-sidekick:v1
              variables:
                COMPLIANT: 'true'
            - source .artifactory/activate.sh
            - *build-setup
            - *bolt-install
            - yarn build
            - bolt w $PACKAGE_NAME exec -- npm publish --tag="hotfix"

    # Used to publish hotfixes. This will not work for @atlassiansox packages.
    hotfix:
      - variables:
          # PACKAGE_NAME should be provided in the form of @scope/package-name (i.e., @atlassian/some-package)
          - name: PACKAGE_NAME
          - name: PASSWORD
      - step:
          script:
            - if [[ "$PASSWORD" != "$HOTFIX_PASSWORD" ]]; then echo "Authentication failed" && exit 1; fi
            - pipe: atlassian/artifactory-sidekick:v1
            - source .artifactory/activate.sh
            - *build-setup
            - *bolt-install
            - yarn build
            - bolt w $PACKAGE_NAME exec -- npm publish --tag="hotfix"


    # Only used in case of an infra issue and we need to prepend some builds with `[OPT]` to by-pass Landkid check.
    # Will be used as the last resort in case of Product CI build blocking pull-requests to be merged in AF.
    make-build-status-optional:
      - variables:
          # BUILD_NAME is the name of the build to be optional.
          - name: BUILD_NAME
          - name: COMMIT
          - name: PASSWORD
      - step:
          script:
            - if [[ "$PASSWORD" != "$HOTFIX_PASSWORD" ]]; then echo "Authentication failed" && exit 1; fi
            - if [[ "$COMMIT" != "" ]]; then export BITBUCKET_COMMIT="$COMMIT"; fi
            - pipe: atlassian/artifactory-sidekick:v1
            - source .artifactory/activate.sh
            - *build-setup
            - *bolt-install
            - (cd build/legacy/ci-scripts && yarn rename-build-status --name="$BUILD_NAME" --state="STOPPED")

    # Adds a comment and task to all PRs that don't contain a required commit with instructions to rebase.
    # This script should be run by a member of Atlassian Frontend Platform in the event of a tooling change
    # requiring all other members of the atlassian-frontend repo to rebase.
    # Please only run when required. If used too often, people will start ignoring the notifications and the benefit will be lost.
    notify-pr-to-rebase:
      - variables:
          - name: PASSWORD # Password to execute this build - only available in AFP LastPass
          - name: ANCESTOR # Ancestor Commit - Required
          - name: TARGET_BRANCH # Only comment on PRs targeting this branch - Optional
          - name: MESSAGE # Append a custom message to the comment - Optional
          - name: DRY_RUN # Don't add anything to PRs only log actions - Optional
      - step:
          script:
            - if [[ "$PASSWORD" != "$HOTFIX_PASSWORD" ]]; then echo "Authentication failed" && exit 1; fi
            - pipe: atlassian/artifactory-sidekick:v1
            - source .artifactory/activate.sh
            - *build-setup
            - *bolt-install
            - (cd build/legacy/ci-scripts && yarn notify-prs-to-rebase)

    release-dashboard-pull-request-update:
      - variables:
          - name: LAST
          - name: SINCE
          - name: URL
          # NOTE: the following variables are used by this script, but stashed in Bitbucket Pipelines.
          # - name: BITBUCKET_USER
          # - name: BITBUCKET_PASSWORD
          # - name: PIPELINES_JWT_TOKEN
          # - name: RELEASE_DASHBOARD_URL
          # - name: RELEASE_DASHBOARD_LAST
          # - name: RELEASE_DASHBOARD_SINCE
      - step:
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - source .artifactory/activate.sh
            - *build-setup
            - *bolt-install
            - if [[ "$LAST" == "" ]]; then export LAST="$RELEASE_DASHBOARD_LAST";fi
            - if [[ "$SINCE" == "" ]]; then export SINCE="$RELEASE_DASHBOARD_SINCE";fi
            - if [[ "$URL" == "" ]]; then export URL="$RELEASE_DASHBOARD_URL";fi
            - cd services/af-release-dashboard && RELEASE_DASHBOARD_TOKEN="Bearer $PIPELINES_JWT_TOKEN" yarn update-releases --last $LAST --since "$SINCE" --url $URL

    release-dashboard-release-timeline-update:
      - variables:
          - name: FROM
          - name: TO
          - name: URL
          # NOTE: the following variables are used by this script, but stashed in Bitbucket Pipelines.
          # - name: ATLASSIAN_USER
          # - name: ATLASSIAN_PASSWORD
          # - name: PIPELINES_JWT_TOKEN
          # - name: RELEASE_DASHBOARD_URL
      - step:
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - source .artifactory/activate.sh
            - *build-setup
            - *bolt-install
            - if [[ "$URL" == "" ]]; then export URL="$RELEASE_DASHBOARD_URL";fi
            - cd services/af-release-dashboard && RELEASE_DASHBOARD_TOKEN="Bearer $PIPELINES_JWT_TOKEN" JIRA_USER=$ATLASSIAN_USER JIRA_PASSWORD=$ATLASSIAN_PASSWORD yarn update-timelines --from $FROM --to $TO --url $URL

    release-dashboard-branch-deploy-update:
      - variables:
          - name: CONFLUENCE_STASH_USER
          - name: SECURED_CONFLUENCE_STASH_TOKEN
          - name: SECURED_CONFLUENCE_BAMBOO_TOKEN
          - name: CONFLUENCE_BAMBOO_BUILD_KEY
          - name: PF_VERSION_FILENAME
          - name: DASHBOARD_URL
          - name: FORCED_ANNOUNCEMENT
          # NOTE: the following variables are used by this script, but stashed in Bitbucket Pipelines.
          # - name: STASH_USER_BOT
          # - name: STASH_TOKEN_BOT
          # - name: CONFLUENCE_BAMBOO_TOKEN
          # - name: PF_BRANCH_DEPLOY_VERSION_FILE
          # - name: PF_BRANCH_BUILD_BAMBOO_KEY
          # - name: RELEASE_DASHBOARD_URL
          # - name: PIPELINES_JWT_TOKEN
      - step:
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - source .artifactory/activate.sh
            - *build-setup
            - *bolt-install
            - if [[ "$DASHBOARD_URL" != "" ]]; then export RELEASE_DASHBOARD_URL="$DASHBOARD_URL";fi
            - if [[ "$CONFLUENCE_STASH_USER" != "" ]]; then export STASH_USER_BOT="$CONFLUENCE_STASH_USER";fi
            - if [[ "$SECURED_CONFLUENCE_STASH_TOKEN" != "" ]]; then export STASH_TOKEN_BOT="$SECURED_CONFLUENCE_STASH_TOKEN";fi
            - if [[ "$SECURED_CONFLUENCE_BAMBOO_TOKEN" != "" ]]; then export CONFLUENCE_BAMBOO_TOKEN="$SECURED_CONFLUENCE_BAMBOO_TOKEN";fi
            - if [[ "$CONFLUENCE_BAMBOO_BUILD_KEY" != "" ]]; then export PF_BRANCH_BUILD_BAMBOO_KEY="$CONFLUENCE_BAMBOO_BUILD_KEY";fi
            - if [[ "$PF_VERSION_FILENAME" != "" ]]; then export PF_BRANCH_DEPLOY_VERSION_FILE="$PF_VERSION_FILENAME";fi
            - if [[ "$FORCED_ANNOUNCEMENT" != "" ]]; then export PF_BRANCH_DEPLOY_FORCE_ANNOUNCEMENT="$FORCED_ANNOUNCEMENT";fi
            - cd services/af-release-dashboard && RELEASE_DASHBOARD_TOKEN="Bearer $PIPELINES_JWT_TOKEN" yarn update-deployment-info

    # Used to build constellation in CI to make sure build hasn't broken. Don't delete!
    # Will only run if there are changes - runs in STAGING mode.
    build-design-system-docs:
      - variables:
          - name: DOCKER_USER

      - step:
          name: Validate service descriptors
          script:
            # Prepare the CI run
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            - cd services/website-constellation
            - bash ./scripts/install-atlas.sh
            # Set env variables so we can use the atlas micros cli
            - export MICROS_URL="wss://micros-proxy.services.atlassian.com"
            - export MICROS_TOKEN="$CONSTELLATION_CLIENT_MICROS_TOKEN"
            # Validate our service descriptors
            - ARTEFACT_NAME=1.zip VERSION=boop atlas micros service validate --file=design-system-docs-lambda.sd.yml --service=design-system-docs-lambda --env=prod-east
            - atlas micros service validate --file=design-system-docs-proxy.sd.yml --service=design-system-docs-proxy --env=prod-east
          after-script:
            # If the previous script failed update build status
            - test $BITBUCKET_EXIT_CODE -ne 0
            - (cd build/legacy/ci-scripts && yarn update-build-status --name='Design System Docs Build' --state='FAILED')

      - step:
          name: Build website
          script:
            # This lets us push to private npm registry
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            - cd services/website-constellation
            - WEBSITE_ENV=staging GATSBY_CONSTELLATION_ENVIRONMENT=STAGING yarn build:staging:client
          after-script:
            - (cd build/legacy/ci-scripts && yarn update-build-status --name='Design System Docs Build' --state=$([ $BITBUCKET_EXIT_CODE -eq 0 ] && echo "SUCCESSFUL" || echo "FAILED"))
            - *send-build-events

    # TEMPORARY script for building constellation and deploying via micros to stg-apse
    deploy-design-system-docs-stg-apse:
      - variables:
          - name: DOCKER_USER
      - parallel:
          - step:
              name: Deploy Static
              script:
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                - cd services/website-constellation
                - echo "👉 INSTALLING atlas cli"
                - . ./scripts/install-atlas.sh
                - echo "👉 BUILDING design-system-docs staging apse"
                - export GATSBY_CONSTELLATION_API_PATH=/api
                - export GATSBY_CONSTELLATION_API_ORIGIN=https://design-system-docs-lambda.ap-southeast-1.staging.atl-paas.net
                - export GATSBY_CONSTELLATION_COOKIE_DOMAIN=atl-paas.net
                - export GATSBY_CONSTELLATION_COOKIE=constellation_cookie_stg-apse
                - WEBSITE_ENV=staging GATSBY_CONSTELLATION_ENVIRONMENT=STAGING yarn build:staging:client
                - echo "👉 DEPLOYING design-system-docs to staging"
                - export MICROS_URL="wss://micros-proxy.services.atlassian.com"
                - export MICROS_TOKEN="$CONSTELLATION_CLIENT_MICROS_TOKEN"
                - yarn deploy:micros:staging-apse:client
              after-script:
                - *send-step-events
          - step:
              name: Deploy Lambda
              script:
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                - cd services/website-constellation
                - echo "👉 INSTALLING atlas cli"
                - . ./scripts/install-atlas.sh
                - echo "👉 DEPLOYING design-system-docs-lambda to staging apse"
                - export MICROS_URL="wss://micros-proxy.services.atlassian.com"
                - export MICROS_TOKEN="$CONSTELLATION_LAMBDA_MICROS_TOKEN"
                - yarn deploy:micros:staging-apse:lambda
              after-script:
                - *send-step-events
      - step:
          name: Sending Build Events
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
          after-script:
            - *send-build-events

    # Custom script for building constellation and deploying via micros to stg-east
    deploy-design-system-docs-staging:
      - variables:
          - name: DOCKER_USER
      - parallel:
          - step:
              name: Deploy Static
              script:
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                - cd services/website-constellation
                - echo "👉 INSTALLING atlas cli"
                - . ./scripts/install-atlas.sh
                - echo "👉 BUILDING design-system-docs staging"
                - export GATSBY_CONSTELLATION_API_PATH=/api
                - export GATSBY_CONSTELLATION_API_ORIGIN=https://api-staging.atlassian.design
                - export GATSBY_CONSTELLATION_COOKIE_DOMAIN=atlassian.design
                - export GATSBY_CONSTELLATION_COOKIE=constellation_cookie_stg-east
                - yarn clean
                - WEBSITE_ENV=staging GATSBY_CONSTELLATION_ENVIRONMENT=STAGING yarn build:staging:client
                - echo "👉 DEPLOYING design-system-docs to staging"
                - export MICROS_URL="wss://micros-proxy.services.atlassian.com"
                - export MICROS_TOKEN="$CONSTELLATION_CLIENT_MICROS_TOKEN"
                - yarn deploy:micros:staging:client
              after-script:
                - *send-step-events
          - step:
              name: Deploy Proxy
              script:
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                - cd services/website-constellation
                - echo "👉 INSTALLING atlas cli"
                - . ./scripts/install-atlas.sh
                - echo "👉 SET design-system-docs-proxy staging"
                - export MICROS_URL="wss://micros-proxy.services.atlassian.com"
                - export MICROS_TOKEN="$CONSTELLATION_PROXY_MICROS_TOKEN"
                - yarn deploy:micros:staging:proxy
              after-script:
                - *send-step-events
          - step:
              name: Deploy Lambda
              script:
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                - cd services/website-constellation
                - echo "👉 INSTALLING atlas cli"
                - . ./scripts/install-atlas.sh
                - echo "👉 DEPLOYING design-system-docs-lambda to staging"
                - export MICROS_URL="wss://micros-proxy.services.atlassian.com"
                - export MICROS_TOKEN="$CONSTELLATION_LAMBDA_MICROS_TOKEN"
                - yarn deploy:micros:staging:lambda
              after-script:
                - *send-step-events
      - step:
          name: Sending Build Events
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
          after-script:
            - *send-build-events

    deploy-design-system-docs-production:
      - parallel:
          - step:
              name: Deploy Static
              image:
                name: docker-proxy.services.atlassian.com/sox/atlassian/atlassian-frontend:latest-v7
                username: sox
                password: $PIPELINES_JWT_TOKEN
              script:
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                - cd services/website-constellation
                - echo "👉 INSTALLING atlas cli"
                - . ./scripts/install-atlas.sh
                - echo "👉 BUILDING design-system-docs production"
                - export GATSBY_CONSTELLATION_API_PATH=/api
                - export GATSBY_CONSTELLATION_API_ORIGIN=https://api.atlassian.design
                - export GATSBY_CONSTELLATION_COOKIE_DOMAIN=atlassian.design
                - export GATSBY_CONSTELLATION_COOKIE=constellation_cookie_prod-east
                - yarn clean
                - WEBSITE_ENV=production GATSBY_CONSTELLATION_ENVIRONMENT=PROD yarn build:production:client
                - echo "👉 DEPLOYING design-system-docs to production"
                - export MICROS_URL="wss://micros-proxy.services.atlassian.com"
                - export MICROS_TOKEN="sox:$PIPELINES_JWT_TOKEN"
                - yarn deploy:micros:production:client
              after-script:
                - *send-step-events
          - step:
              name: Deploy Proxy
              script:
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                - cd services/website-constellation
                - echo "👉 INSTALLING atlas cli"
                - . ./scripts/install-atlas.sh
                - echo "👉 SET design-system-docs-proxy staging"
                - export MICROS_URL="wss://micros-proxy.services.atlassian.com"
                - export MICROS_TOKEN="$CONSTELLATION_PROXY_MICROS_TOKEN"
                - yarn deploy:micros:production:proxy
              after-script:
                - *send-step-events
          - step:
              name: Deploy Lambda
              image:
                name: docker-proxy.services.atlassian.com/sox/atlassian/atlassian-frontend:latest-v7
                username: sox
                password: $PIPELINES_JWT_TOKEN
              script:
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                - cd services/website-constellation
                - echo "INSTALLING atlas cli"
                - . ./scripts/install-atlas.sh
                - echo "DEPLOYING design-system-docs-lambda to production"
                - export MICROS_URL="wss://micros-proxy.services.atlassian.com"
                - export MICROS_TOKEN="sox:$PIPELINES_JWT_TOKEN"
                - yarn deploy:micros:production:lambda
              after-script:
                - *send-step-events
      - step:
          name: Sending Build Events
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
          after-script:
            - *send-build-events

    # This will run the full suite of the webdriver tests on Browserstack Automate.
    build-webdriver:
      - variables:
          # Test files to run - if omitted will run all the tests.
          - name: TEST_FILES
      - step:
          name: Create Default Build Status
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            - (cd build/legacy/ci-scripts && yarn upload-build-status --name='Webdriver Build' --description="Flakey tests detection pipeline or full suite for Webdriver" --state="INPROGRESS")
      - parallel:
          - step:
              name: Running WD tests - 1 of 6 chunks
              <<: *runWebdriverStep
          - step:
              name: Running WD tests - 2 of 6 chunks
              <<: *runWebdriverStep
          - step:
              name: Running WD tests - 3 of 6 chunks
              <<: *runWebdriverStep
          - step:
              name: Running WD tests - 4 of 6 chunks
              <<: *runWebdriverStep
          - step:
              name: Running WD tests - 5 of 6 chunks
              <<: *runWebdriverStep
          - step:
              name: Running WD tests - 6 of 6 chunks
              <<: *runWebdriverStep
      - step:
          name: Update Webdriver Build Status
          script:
            # This lets us push to private npm registry
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
          after-script:
            - (cd build/legacy/ci-scripts && yarn update-default-build-status "Webdriver Build" --final)
            - *send-build-events

    # This will run the full suite of the WebView webdriver tests on Browserstack App Automate.
    build-webdriver-webview:
      - step:
          script:
            # This lets us push to private npm registry
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            - CUSTOM_BUILD=true ./build/ci/test-pipeline/ci/run-webdriver-mobile.sh
          after-script:
            - *send-build-events

    build-webdriver-webview-changed:
      - step:
          script:
            # This lets us push to private npm registry
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            - CHANGED=true CUSTOM_BUILD=true ./build/ci/test-pipeline/ci/run-webdriver-mobile.sh editor-mobile-bridge
          after-script:
            # Extract all the diff images and store them into a folder for download.
            - *store-snapshot-failures
            - (cd build/legacy/ci-scripts && yarn update-build-status --name='Mobile Webdriver Build' --state=$([ $BITBUCKET_EXIT_CODE -eq 0 ] && echo "SUCCESSFUL" || echo "FAILED"))
            - *send-build-events
          artifacts:
            - *snapshot-artifact
            - test-reports/junit.xml

    # This will upload the WebView app binaries into BrowserStack App Automate.
    # They get deleted every 30 days, so we re-upload on a schedule.
    upload-webdriver-webview-binaries:
      - variables:
          # NOTE: the following variables are used by this script, pre-set in Bitbucket Pipelines.
          # - name: BITBUCKET_USER
          # - name: BITBUCKET_PASSWORD
          # - name: BROWSERSTACK_USERNAME
          # - name: BROWSERSTACK_KEY
          # NOTE: You can provide your own credentials to upload the apps into your personal account
          - name: BROWSERSTACK_USERNAME
          - name: SECURED_BROWSERSTACK_KEY
      - step:
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            - (cd build/legacy/ci-scripts && yarn ts-node upload-webview-app-binaries.ts)

    # This will run the full suite of the visual regression tests using Docker.
    build-visual-regression:
      - variables:
          # Test files to run - if omitted will run all the tests.
          - name: TEST_FILES
          - name: REPETITIONS
      - step:
          name: Create Default Build Status
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            - (cd build/legacy/ci-scripts && yarn upload-build-status --name='Visual Regression Build' --description="Flakey tests detection pipeline or full suite for Visual Regression" --state="INPROGRESS")
      - parallel:
          - step:
              name: Running VR tests - 1 of 8 chunks
              <<: *runVisualRegressionStep
          - step:
              name: Running VR tests - 2 of 8 chunks
              <<: *runVisualRegressionStep
          - step:
              name: Running VR tests - 3 of 8 chunks
              <<: *runVisualRegressionStep
          - step:
              name: Running VR tests - 4 of 8 chunks
              <<: *runVisualRegressionStep
          - step:
              name: Running VR tests - 5 of 8 chunks
              <<: *runVisualRegressionStep
          - step:
              name: Running VR tests - 6 of 8 chunks
              <<: *runVisualRegressionStep
          - step:
              name: Running VR tests - 7 of 8 chunks
              <<: *runVisualRegressionStep
          - step:
              name: Running VR tests - 8 of 8 chunks
              <<: *runVisualRegressionStep
      - step:
          name: Update Visual Regression Build Status
          script:
            # This lets us push to private npm registry
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
          after-script:
            - (cd build/legacy/ci-scripts && yarn update-default-build-status "Visual Regression Build" --final)
            - *send-build-events

    unit-test-parallel-2x:
      - *parallel-test-variables
      - parallel:
          - step: { name: 'Unit tests: step 1 of 2', <<: *unit-test-parallel-step }
          - step: { name: 'Unit tests: step 2 of 2', <<: *unit-test-parallel-step }

    unit-test-parallel-4x:
      - *parallel-test-variables
      - parallel:
          - step: { name: 'Unit tests: step 1 of 4', <<: *unit-test-parallel-step }
          - step: { name: 'Unit tests: step 2 of 4', <<: *unit-test-parallel-step }
          - step: { name: 'Unit tests: step 3 of 4', <<: *unit-test-parallel-step }
          - step: { name: 'Unit tests: step 4 of 4', <<: *unit-test-parallel-step }

    unit-test-parallel-8x:
      - *parallel-test-variables
      - parallel:
          - step: { name: 'Unit tests: step 1 of 8', <<: *unit-test-parallel-step }
          - step: { name: 'Unit tests: step 2 of 8', <<: *unit-test-parallel-step }
          - step: { name: 'Unit tests: step 3 of 8', <<: *unit-test-parallel-step }
          - step: { name: 'Unit tests: step 4 of 8', <<: *unit-test-parallel-step }
          - step: { name: 'Unit tests: step 5 of 8', <<: *unit-test-parallel-step }
          - step: { name: 'Unit tests: step 6 of 8', <<: *unit-test-parallel-step }
          - step: { name: 'Unit tests: step 7 of 8', <<: *unit-test-parallel-step }
          - step: { name: 'Unit tests: step 8 of 8', <<: *unit-test-parallel-step }

    vr-test-parallel-2x:
      - *parallel-test-variables
      - parallel:
          - step: { name: 'VR tests: step 1 of 2', <<: *vr-test-parallel-step }
          - step: { name: 'VR tests: step 2 of 2', <<: *vr-test-parallel-step }

    vr-test-parallel-4x:
      - *parallel-test-variables
      - parallel:
          - step: { name: 'VR tests: step 1 of 4', <<: *vr-test-parallel-step }
          - step: { name: 'VR tests: step 2 of 4', <<: *vr-test-parallel-step }
          - step: { name: 'VR tests: step 3 of 4', <<: *vr-test-parallel-step }
          - step: { name: 'VR tests: step 4 of 4', <<: *vr-test-parallel-step }

    vr-test-parallel-8x:
      - *parallel-test-variables
      - parallel:
          - step: { name: 'VR tests: step 1 of 8', <<: *vr-test-parallel-step }
          - step: { name: 'VR tests: step 2 of 8', <<: *vr-test-parallel-step }
          - step: { name: 'VR tests: step 3 of 8', <<: *vr-test-parallel-step }
          - step: { name: 'VR tests: step 4 of 8', <<: *vr-test-parallel-step }
          - step: { name: 'VR tests: step 5 of 8', <<: *vr-test-parallel-step }
          - step: { name: 'VR tests: step 6 of 8', <<: *vr-test-parallel-step }
          - step: { name: 'VR tests: step 7 of 8', <<: *vr-test-parallel-step }
          - step: { name: 'VR tests: step 8 of 8', <<: *vr-test-parallel-step }

    # This will run the visual-regression tool and generate the snapshots for devs to download.
    # Devs can use this build if you have any issues with running the tool locally.
    build-visual-regression-generate-snapshots:
      - variables:
          # Test files to run - if omitted will run all the tests.
          - name: TEST_FILES
      - step:
          <<: *vr-image
          name: Generating snapshot for VR tests
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - git lfs pull
            - *bolt-install
            - CUSTOM_BUILD=true SNAPSHOT=true ./build/ci/test-pipeline/ci/run-vr.sh
          after-script:
            # Extract all the new generated images.
            - git diff --name-only -- '*.png' > generated_snapshots.txt
            - mkdir -p ./imageSnapshot && cat generated_snapshots.txt | while read line; do cp "$BITBUCKET_CLONE_DIR/$line" ./imageSnapshot; done
          # You can download the new snapshots and replace them in the respective folder.
          artifacts:
          - generated_snapshots.txt
          - imageSnapshot/**

    # Cypress build
    build-cypress:
      - step:
          image:
            name: docker-proxy.services.atlassian.com/atlassian/cypress-atlassian-frontend:latest-v0
            username: dnovoa
            password: $PIPELINES_JWT_TOKEN
          name: Cypress Integration Testing
          script:
            # This lets us push to private npm registry
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            - yarn test:cypress:ci:editor
          after-script:
            - (cd build/legacy/ci-scripts && yarn upload-build-status --name='Cypress Build' --description='Cypress Build only for Editor / Media testing products' --state=$([ $BITBUCKET_EXIT_CODE -eq 0 ] && echo "SUCCESSFUL" || echo "FAILED"))
            - *send-build-events

    # This will run essentially the branch builds, but without any optimizations.
    # This build should be _manually_ run in any potentially risky builds.
    run-full-suite:
      - parallel:
          - step:
              name: Building packages
              script:
                # This lets us push to private npm registry
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                - yarn build
              after-script:
                - *send-step-events
          - step:
              name: Lint + Typecheck
              script:
                # This lets us push to private npm registry
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                - yarn lint
                - yarn typecheck
              after-script:
                - *send-step-events
          - step:
              name: Running All Unit tests
              script:
                # This lets us push to private npm registry
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                # Run platform-specific tests of the editor bridge
                - yarn test:editor-mobile:android && yarn test:editor-mobile:ios
                # Run all other unit tests.
                # We do this after the platform specific tests to ensure pipelines uses the larger tests run count in its UI labelling.
                - ./build/ci/test-pipeline/ci/run-unit.sh
              after-script:
                - *send-step-events
          - step:
              name: Running All Browser Integration tests
              script:
                # This lets us push to private npm registry
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                - CUSTOM_BUILD=true ./build/ci/test-pipeline/ci/run-webdriver.sh
              after-script:
                - *send-step-events
              artifacts:
                - *browserstack-artifact
          - step:
              name: Running All Visual Regression tests
              <<: *vr-image
              script:
                # This lets us push to private npm registry
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                - CUSTOM_BUILD=true ./build/ci/test-pipeline/ci/run-vr.sh
              after-script:
                # Extract all the diff images and store them into a folder for download.
                - *store-snapshot-failures
                - *send-step-events
              # If a failure occurs, you can download the image snapshot of the differences.
              artifacts:
                - *snapshot-artifact
          - step:
              name: Building the website
              script:
                # This lets us push to private npm registry
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                - cd website
                # don't worry about deploying, this build will always be run alongside a branch build
                - yarn build
              after-script:
                - *send-step-events
      - step:
          name: Sending Build Events
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
          after-script:
            - *send-build-events

    # This build is used as our `merge` build when managing concurrent PR to master.
    landkid:
      - variables:
          # list of commits of the current build's landkid dependencies
          - name: LANDKID_DEPENDENCY_COMMITS
          # Landkid passes in the target branch so we don't need to search for it in each step
          - name: TARGET_BRANCH
      - parallel:
          - step:
              name: Cache Node Modules
              script:
                # This lets us push to private npm registry
                - pipe: atlassian/artifactory-sidekick:v1
                - *landkid-setup
                - *bolt-install
                # If there's no cache for the current yarn.lock, push our node_modules to the cache
                - ./build/ci/instant-scripts/ci-cache.sh compress-and-push
              after-script:
                - git merge --abort || true
                - *send-step-events
          - step:
              name: Build CJS
              script:
                - pipe: atlassian/artifactory-sidekick:v1
                - *landkid-setup
                - *bolt-install
                # Note: Some of the packages store their assets in `git-lfs` and we need to pull those assets to make sure their packages are properly built.
                - git lfs pull --include "**/packages/**/*.svg"
                - yarn build --distType cjs,esm,es2019
                - node build/legacy/ci-scripts/run.if.package.changed.js @atlaskit/editor-mobile-bridge -- yarn build:editor-mobile-bridge
              after-script:
                - git merge --abort || true
                - *send-step-events
          - step:
              name: Build types
              script:
                - pipe: atlassian/artifactory-sidekick:v1
                - *landkid-setup
                - *bolt-install
                # Note: Some of the packages store their assets in `git-lfs` and we need to pull those assets to make sure their packages are properly built.
                - git lfs pull --include "**/packages/**/*.svg"
                - yarn build --distType types
              after-script:
                - git merge --abort || true
                - *send-step-events
          - step:
              name: Linting
              script:
                # This lets us push to private npm registry
                - pipe: atlassian/artifactory-sidekick:v1
                - *landkid-setup
                - *bolt-install
                - yarn manypkg check
                - yarn lint
                # Check that ts-config.entry-points.json is up to date
                - yarn build:tsconfig && git diff --exit-code -- tsconfig.entry-points.json || (echo 'tsconfig.entry-points.json is out of date, run bolt to update' && false)
              after-script:
                - git merge --abort || true
                - *send-step-events
          - step:
              name: Typechecking (and checking changesets)
              script:
                # This lets us push to private npm registry
                - pipe: atlassian/artifactory-sidekick:v1
                - *landkid-setup
                - *bolt-install
                - yarn typecheck
                - build/legacy/ci-scripts/check-yarn-lock.sh
                - echo "We are now about to run the `version` command which will read changesets and bump packages"
                - echo "We do this so that we know if the repo will be in an inconsistent state when this branch hits master"
                - echo "If the step below fails, it's because a changeset may be bumping a package that is depended upon by a package that didn't exist when the changeset was created"
                - echo "Read the very last error message, it will tell you exactly what is wrong (ignore all the first warnings you'll see)"
                - yarn changeset version
              after-script:
                - git merge --abort || true
                - *send-step-events
          - step:
              name: Unit tests
              script:
                - pipe: atlassian/artifactory-sidekick:v1
                - *landkid-setup
                - *bolt-install
                - PARALLEL_TRIGGER=true ./build/ci/test-pipeline/ci/run-unit.sh
              after-script:
                  - git merge --abort || true
                  - *send-step-events
          - step:
              # TODO: Get rid of this step ideally
              name: Edge case tests
              script:
                - pipe: atlassian/artifactory-sidekick:v1
                - *landkid-setup
                - *bolt-install
                # This script acts like a unit test to check changes to @atlaskit/adf-schema.
                - node build/legacy/ci-scripts/run.if.package.changed.js @atlaskit/adf-schema -- yarn build:adf-schema:checkuptodate
                # Run platform-specific tests of the editor bridge
                - yarn test:editor-mobile:ios
                # Run platform-specific tests of the editor bridge
                - yarn test:editor-mobile:android
          - step:
              name: Running Browser Integration tests
              script:
                # This lets us push to private npm registry
                - pipe: atlassian/artifactory-sidekick:v1
                - *landkid-setup
                - *bolt-install
                - DEPENDENTS=true LANDKID=true ./build/ci/test-pipeline/ci/run-webdriver.sh
              after-script:
                - git merge --abort || true
                - *send-step-events
              artifacts:
                - *browserstack-artifact
          - step:
              name: Running Visual Regression tests
              <<: *vr-image
              script:
                # This lets us push to private npm registry
                - pipe: atlassian/artifactory-sidekick:v1
                - *landkid-setup
                - *bolt-install
                - DEPENDENTS=true LANDKID=true PARALLEL_TRIGGER=true ./build/ci/test-pipeline/ci/run-vr.sh
              after-script:
                - git merge --abort || true
                # Extract all the diff images and store them into a folder for download.
                - *store-snapshot-failures
                - *send-step-events
              # If a failure occurs, you can download the image snapshot of the differences.
              artifacts:
                - *snapshot-artifact
      - step:
          name: Wait until no master is running - except if develop
          script:
            # This lets us push to private npm registry
            - pipe: atlassian/artifactory-sidekick:v1
            - *landkid-setup
            - *bolt-install
            - if [[ "$TARGET_BRANCH" != "master" ]]; then echo "This build does not need to wait for master build."; exit 0; fi
            - (cd build/legacy/ci-scripts && node ./wait.until.no.master.build.running.js)
          after-script:
            # Only execute the below if successful
            - if [ $BITBUCKET_EXIT_CODE -eq 0 ]; then (cd build/release/scheduled-releases && yarn update-pr "$BITBUCKET_COMMIT" "$BITBUCKET_REPO_FULL_NAME"); fi
            - *send-build-events

    # This build should only be run on the develop branch, once per day.
    # It manually clears the cache and runs a very quick install node_modules.
    # We split into two steps so that one can clear the cache so that the second one starts with no cache.
    # (Which causes it to upload when it's finished).
    reseed-pipelines-cache:
      - step:
          name: Clearing old cache
          script:
            # This lets us push to private npm registry
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - ([ "$BITBUCKET_BRANCH" == "master" -o "$BITBUCKET_BRANCH" == "develop" ]) || (echo "This build should only be run on master or develop" && exit 1)
            - *bolt-install
            - node build/legacy/ci-scripts/clear.pipelines.node.cache.js
      - step:
          name: Creating new cache
          script:
            # This lets us push to private npm registry
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            # We re-clear the cache here in case any other builds have managed to start and finish in between us starting.
            # (our build will only upload a cache if there is none when the build finishes).
            - node build/legacy/ci-scripts/clear.pipelines.node.cache.js

    # This build allow to deploy branch dists to easily tests new version of components into consumers / products code base.
    branch-deploy:
      - variables:
          - name: Packages
      - step:
          name: Branch deploy
          script:
            # This lets us push to private npm registry
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - if [[ "$BITBUCKET_BRANCH" == "master" || "$BITBUCKET_BRANCH" == "develop" ]]; then echo "This custom build should not be run against master or develop." && exit 1; fi
            - *bolt-install
            # we dont build es2019 in branch builds just for backwards compatibility
            - yarn build --distType cjs
            - yarn build --distType esm
            # Install Statlas
            - source build/legacy/ci-scripts/install-statlas.sh
            - node build/legacy/ci-scripts/run.if.package.changed.js @atlaskit/editor-mobile-bridge -- yarn build:editor-mobile-bridge
            - (cd build/legacy/ci-scripts && yarn branch-deploy $BITBUCKET_COMMIT --packages "${Packages}")
          artifacts:
            - dists/manifest.json

    # Atlaskit website build with private packages
    build-website-staging-private:
      - step:
          name: Building Atlaskit Website (Private)
          script:
            # This lets us push to private npm registry
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            - export COMMIT=$(echo $BITBUCKET_COMMIT | cut -c1-12)
            - cd website
            - yarn build:no-minimize --website-private --extract-react-types
            - yarn build:copy
            - cd -
            # Run the es-check on the `dist/` folder, exclude mockServiceWorker as it is a generated file.
            - yarn es-check es2017 "./website/dist/**/*.js" --not="./website/dist/mockServiceWorker.js"
            - mkdir $COMMIT && cp -r ./website/public/css/* $COMMIT && cp -r ./website/dist/* $COMMIT && tar -cvzf $COMMIT.tar.gz $COMMIT
            - source build/legacy/ci-scripts/install-statlas.sh
            - atlas statlas post --file=$COMMIT.tar.gz --namespace="$STATLAS_NAMESPACE" --auth-group="$STATLAS_AUTH_GROUP"
            - export WEBSITE_URL="https://statlas.prod.atl-paas.net/$STATLAS_NAMESPACE/$COMMIT/index.html"
            - echo "Your changes are available at..." "$WEBSITE_URL"
            - |
              if [ -n "$BITBUCKET_BRANCH" ]; then
                export BRANCH="$BITBUCKET_BRANCH"
                yarn --cwd website build:redirection $WEBSITE_URL
                atlas statlas put --file=./website/dist/redirection/index.html --namespace="$STATLAS_NAMESPACE" --subdirectory="$BRANCH" --auth-group="$STATLAS_AUTH_GROUP"
                echo "Also your changes are available under the branch url at... https://statlas.prod.atl-paas.net/$STATLAS_NAMESPACE/$BRANCH" # for some branched the url might be not correct as the branch name is not url encoded
              fi
            - cd build/legacy/ci-scripts
            - yarn update-build-status --name='Statlas AK Build' --description='A static preview of Atlaskit staging site hosted on Statlas' --url="$WEBSITE_URL" --state='SUCCESSFUL'
          after-script:
            - if [ $BITBUCKET_EXIT_CODE -gt 0 ]; then (cd build/legacy/ci-scripts && yarn update-build-status --name='Statlas AK Build' --state='FAILED'); fi
            - *send-build-events

    # Run ComponentLab on a single branch
    run-componentlab-single-branch:
      - variables:
          # optional path to individual perf test(s) to run
          - name: PERF_TEST_PATH
          # runs ComponentLab from source instead of npm if specified
          - name: RUN_CL_FROM_SOURCE
          - name: LOG_LEVEL
      - step:
          name: Run ComponentLab (single branch)
          <<: *vr-image
          script:
            # This lets us push to private npm registry
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            - export CL_SCM_REF=$(git rev-parse --abbrev-ref HEAD)
            - export CL_SCM_SHA=$(git rev-parse HEAD)
            - |
              if [ "$RUN_CL_FROM_SOURCE" == true ]; then
                echo "Running ComponentLab from source"
                cd packages/performance/componentlab
                yarn af $PERF_TEST_PATH --launch --launch-headless --no-launch-sandbox --log-level $LOG_LEVEL
                cd ../../..
              else
                echo "Running ComponentLab from npm"
                yarn global add @atlassian/componentlab
                componentlab af $PERF_TEST_PATH --launch --launch-headless --no-launch-sandbox --log-level $LOG_LEVEL
              fi
            - node packages/performance/componentlab/scripts/calculate-iti.js
          artifacts:
            - traces/componentlab/*.json
            - .componentlab/results/**
      - step:
          name: Upload trace files to s3
          script:
            - source ./packages/performance/componentlab/scripts/upload-trace-files-to-s3.sh

    # Run ComponentLab on two branches and compute ITI % difference
    # Note: we are running CL on both branches in the same build step in
    # order to gaurantee they run on the same infrastructure node to
    # provide metric stability.
    run-componentlab:
      - variables:
          # optional path to individual perf test(s) to run
          - name: PERF_TEST_PATH
          - name: CHANGES_BRANCH
          - name: BASELINE_BRANCH
          # runs ComponentLab from source instead of npm if specified
          - name: RUN_CL_FROM_SOURCE
          - name: LOG_LEVEL
      - step:
          name: Run ComponentLab
          <<: *vr-image
          script:
            # This lets us push to private npm registry
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - git fetch origin $CHANGES_BRANCH && git checkout $CHANGES_BRANCH
            - *bolt-install
            - export CL_SCM_REF=$(git rev-parse --abbrev-ref HEAD)
            - export CL_SCM_SHA=$(git rev-parse HEAD)
            - export CL_BRANCH_TYPE="changes"
            - |
              if [ "$RUN_CL_FROM_SOURCE" == true ]; then
                echo "Running ComponentLab from source"
                cd packages/performance/componentlab
                yarn af $PERF_TEST_PATH --launch --launch-headless --no-launch-sandbox --log-level $LOG_LEVEL
                cd ../../..
              else
                echo "Running ComponentLab from npm"
                yarn global add @atlassian/componentlab
                componentlab af $PERF_TEST_PATH --launch --launch-headless --no-launch-sandbox --log-level $LOG_LEVEL
              fi
            - git fetch origin $BASELINE_BRANCH && git checkout $BASELINE_BRANCH
            # instead of bolt clean, do a custom clean so we can keep the results across CL runs
            - bolt componentlab:clean && bolt install --frozen-lockfile
            - export CL_SCM_REF=$(git rev-parse --abbrev-ref HEAD)
            - export CL_SCM_SHA=$(git rev-parse HEAD)
            - export CL_BRANCH_TYPE="baseline"
            - |
              if [ "$RUN_CL_FROM_SOURCE" == true ]; then
                echo "Running ComponentLab from source"
                cd packages/performance/componentlab
                yarn af $PERF_TEST_PATH --launch --launch-headless --no-launch-sandbox --log-level $LOG_LEVEL
                cd ../../..
              else
                echo "Running ComponentLab from npm"
                yarn global add @atlassian/componentlab
                componentlab af $PERF_TEST_PATH --launch --launch-headless --no-launch-sandbox --log-level $LOG_LEVEL
              fi
            - node packages/performance/componentlab/scripts/calculate-iti.js
          artifacts:
            - traces/componentlab/*.json
            - .componentlab/results/**
      - step:
          name: Upload trace files to s3
          script:
            - source ./packages/performance/componentlab/scripts/upload-trace-files-to-s3.sh

    # This build allow to push the bundle size results as ratchet file to s3.
    # See Anchors section for the definition.
    push-bundle-size-to-s3:
      - parallel:
          - step:
              name: Bundle size update - 1 of 10 chunks
              <<: *pushBundleSizeToS3
          - step:
              name: Bundle size update - 2 of 10 chunks
              <<: *pushBundleSizeToS3
          - step:
              name: Bundle size update - 3 of 10 chunks
              <<: *pushBundleSizeToS3
          - step:
              name: Bundle size update - 4 of 10 chunks
              <<: *pushBundleSizeToS3
          - step:
              name: Bundle size update - 5 of 10 chunks
              <<: *pushBundleSizeToS3
          - step:
              name: Bundle size update - 6 of 10 chunks
              <<: *pushBundleSizeToS3
          - step:
              name: Bundle size update - 7 of 10 chunks
              <<: *pushBundleSizeToS3
          - step:
              name: Bundle size update - 8 of 10 chunks
              <<: *pushBundleSizeToS3
          - step:
              name: Bundle size update - 9 of 10 chunks
              <<: *pushBundleSizeToS3
          - step:
              name: Bundle size update - 10 of 10 chunks
              <<: *pushBundleSizeToS3

    # Build used to run bundle size on lot of packages.
    run-bundle-size-large:
      - variables:
        - name: TARGET_BRANCH # Refer to the target branch (default to base branch).
        - name: MAIN_PACKAGES # Refer to the main changed packages compare to the target / base branch.
        - name: CHANGED_PACKAGES # Refer to the changed packages + dependents compare to the target / base branch.
      - step:
          name: Create Bundle Size Build Status
          <<: *create-bundle-size-status
      - parallel:
        - step:
              name: Bundle size chunk 1
              <<: *run-bundle-size
        - step:
              name: Bundle size chunk 2
              <<: *run-bundle-size
        - step:
              name: Bundle size chunk 3
              <<: *run-bundle-size
        - step:
              name: Bundle size chunk 4
              <<: *run-bundle-size
        - step:
              name: Bundle size chunk 5
              <<: *run-bundle-size
        - step:
              name: Bundle size chunk 6
              <<: *run-bundle-size
        - step:
              name: Bundle size chunk 7
              <<: *run-bundle-size
        - step:
              name: Bundle size chunk 8
              <<: *run-bundle-size
        - step:
              name: Bundle size chunk 9
              <<: *run-bundle-size
        - step:
              name: Bundle size chunk 10
              <<: *run-bundle-size
      - step:
          name: Final step
          <<: *run-bundle-size-final

    # Build used to run bundle size on small amount of packages.
    run-bundle-size-small:
      - variables:
        - name: TARGET_BRANCH # Refer to the target branch (default to base branch).
        - name: MAIN_PACKAGES # Refer to the main changed packages compare to the target / base branch.
        - name: CHANGED_PACKAGES # Refer to the changed packages + dependents compare to the target / base branch.
      - step:
          name: Create Bundle Size Build Status
          <<: *create-bundle-size-status
      - step:
          name: Bundle size
          <<: *run-bundle-size
      - step:
          name: Final step
          <<: *run-bundle-size-final

    # For branches like develop, we need to merge master daily.
    merge-downstream:
      - variables:
          - name: TARGET_BRANCH_OVERRIDE
      - step:
          name: Merges current branch (master/rc) to a downstream branch (rc/develop)
          script:
            # This lets us push to private npm registry
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            - if ! [[ "$BITBUCKET_BRANCH" == "master" || "$BITBUCKET_BRANCH" == "release-candidate/"* ]]; then echo "This build should only be run on master or the current release candidate" && exit 1; fi
            - yarn ts-node build/legacy/ci-scripts/merge-downstream "$TARGET_BRANCH_OVERRIDE"
          after-script:
            - *send-build-events

    # For cutting a scheduled release from a custom pipeline.
    cut-release:
      - variables:
          # Name of the current release, e.g. 'suede'
          - name: CURRENT_RELEASE_NAME
          # Name of the next release, e.g. 'tweed'
          - name: NEXT_RELEASE_NAME
          # Whether the script should run in `--dev` mode or not.
          - name: DEV_MODE
          # NOTE: the following variables are used by this script, but stashed in Bitbucket Pipelines.
          # - name: ATLASSIAN_USER
          # - name: ATLASSIAN_PASSWORD
          # - name: BITBUCKET_USER
          # - name: BITBUCKET_PASSWORD
          # - name: AFP_SLACK_TOKEN
      - step:
          name: Cut a release branch as part of the scheduled release process.
          script:
            # Used in all scripts to push to private registry.
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            - cd build/release/scheduled-releases
            - if [[ "$DEV_MODE" != "true" ]]; then DEV_MODE=false; fi
            - yarn cut-release "$CURRENT_RELEASE_NAME" "$NEXT_RELEASE_NAME" --dev "$DEV_MODE"
          after-script:
            - *send-build-events

    # For non-prod deployments (includes dev and staging environments)
    deploy-service-dev:
      - variables:
          - name: SERVICE_PACKAGE
          - name: MICROS_ENV
      - step:
          name: Deploy
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - source .artifactory/activate.sh
            - *build-setup
            - echo "Building and Deploying $SERVICE_PACKAGE to $MICROS_ENV"
            - *bolt-install
            - if [[ "$BITBUCKET_BRANCH" == "master" ]]; then build/legacy/ci-scripts/has.no.changesets.sh $SERVICE_PACKAGE; fi
            - source build/service-support/service-deployments/scripts/export-service-name.sh
            - source build/service-support/service-deployments/scripts/export-micros-token.sh
            - bolt w @af/service-deployments check-lock
            - bolt w @af/service-deployments upload-deployment
            - npx @atlassian/micros-support install-atlas
            - bolt w @af/service-deployments run-step pre-build
            - bolt w @af/service-deployments run-step build
            - bolt w @af/service-deployments run-step pre-deploy
            - bolt w @af/service-deployments run-step deploy
            - bolt w @af/service-deployments run-step post-deploy
            - bolt w @af/service-deployments upload-artefact
          after-script:
            - bolt w @af/service-deployments update-deployment

    deploy-service-prod:
      - variables:
          - name: SERVICE_PACKAGE
          - name: MICROS_ENV
      - step:
          name: Deploy
          image:
            name: docker-proxy.services.atlassian.com/sox/atlassian/atlassian-frontend:latest-v7
            username: sox
            password: $PIPELINES_JWT_TOKEN
          script:
            - pipe: atlassian/artifactory-sidekick:v1
              variables:
                COMPLIANT: 'true'
            - source .artifactory/activate.sh
            - *build-setup
            - echo "Building and Deploying $SERVICE_PACKAGE to $MICROS_ENV"
            - *bolt-install
            - build/legacy/ci-scripts/has.no.changesets.sh $SERVICE_PACKAGE
            # THIS NEEDS TO BE REMOVED ONCE ALL SERVICES ARE USING DEPLOYTOKENS
            - export MICROS_URL="wss://micros-proxy.services.atlassian.com"
            - export MICROS_TOKEN="sox:$PIPELINES_JWT_TOKEN"
            - source build/service-support/service-deployments/scripts/export-service-name.sh
            - bolt w @af/service-deployments check-lock
            - bolt w @af/service-deployments upload-deployment
            - npx @atlassian/micros-support install-atlas
            - bolt w @af/service-deployments run-step pre-build
            - bolt w @af/service-deployments run-step build
            - bolt w @af/service-deployments run-step pre-deploy
            - bolt w @af/service-deployments run-step deploy
            - bolt w @af/service-deployments run-step post-deploy
            - bolt w @af/service-deployments upload-artefact
          after-script:
            - bolt w @af/service-deployments update-deployment

    statlas-branch-deploy-service:
      - variables:
          - name: SERVICE_PACKAGE
      - step:
          name: Deploy
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - echo "Building and Uploading $SERVICE_PACKAGE ($BITBUCKET_COMMIT) to Statlas"
            - *bolt-install
            - source build/service-support/service-deployments/scripts/export-service-name.sh
            - export BASENAME; BASENAME="/atlassian-frontend-services/$SERVICE_NAME/$BITBUCKET_COMMIT" && echo $BASENAME
            - bolt w @af/service-deployments run-step pre-build
            - bolt w @af/service-deployments run-step build
            - bolt w @af/service-deployments statlas-deploy-steps

    rollback-static-service:
      - variables:
          - name: SERVICE_PACKAGE
          - name: VERSION
      - step:
          name: Deploy
          image:
            name: docker-proxy.services.atlassian.com/sox/atlassian/atlassian-frontend:latest-v7
            username: sox
            password: $PIPELINES_JWT_TOKEN
          script:
            - pipe: atlassian/artifactory-sidekick:v1
              variables:
                COMPLIANT: 'true'
            - source .artifactory/activate.sh
            - *build-setup
            - echo "Rolling back $SERVICE_PACKAGE to $VERSION"
            - *bolt-install
            - build/legacy/ci-scripts/has.no.changesets.sh $SERVICE_PACKAGE
            - source build/service-support/service-deployments/scripts/export-service-name.sh
            - source build/service-support/service-deployments/scripts/export-rollback-vars.sh
            - bolt w @af/service-deployments upload-deployment --is-rollback
            - npx @atlassian/micros-support install-atlas
            - bolt w @af/service-deployments checkout-version-commit
            - bolt w @af/service-deployments download-artefact
            - bolt w @af/service-deployments run-step pre-deploy
            - bolt w @af/service-deployments run-step deploy
            - bolt w @af/service-deployments run-step post-deploy
          after-script:
            - bolt w @af/service-deployments update-deployment

    # Deploy automatically our CI docker containers to the SOX Atlassian hub.
    # docker-proxy.services.atlassian.com/sox/atlassian/atlassian-frontend - for regular CI pipelines.
    # docker-proxy.services.atlassian.com/sox/atlassian/atlassian-frontend-vr - for visual regression CI pipelines.
    deploy-docker-ci-container:
      - step:
          name: Deploy CI docker container
          image:
            name: docker-proxy.services.atlassian.com/sox/atlassian/atlassian-frontend:latest-v7
            username: sox
            password: $PIPELINES_JWT_TOKEN
          script:
            # This lets us push to private npm registry
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            # Make sure there are no changesets till on master, which could mean the service hasn't been bumped
            - build/legacy/ci-scripts/has.no.changesets.sh @atlaskit/pipelines-docker-image
            - cd services/pipelines-docker-image
            - IS_SOX_COMPLIANT=true yarn deploy

    # Deploys the image to the sox namespace
    deploy-node-docker-image:
      - variables:
          # Whether to deploy under the sox namespace or not - value should be 'true' or empty
          - name: USE_SOX_NAMESPACE
      - step:
          name: Deploy node docker image
          image: atlassian/default-image:2
          services:
            - docker
          caches:
            - docker
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - source .artifactory/activate.sh
            - cd services/node-docker-image
            - IS_SOX_COMPLIANT=${USE_SOX_NAMESPACE} npm run deploy

    # Generate and upload the techstack report.
    upload-techstack-report:
      - step:
          name: Generate techstack report for Atlassian Frontend
          script:
            # This lets us push to private npm registry
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            - node build/legacy/ci-scripts/get.techstack.report.js > report.json
            - echo "Uploading techstack-report..."
            - curl --progress-bar -X PUT -H "authorization:Bearer ${PIPELINES_JWT_TOKEN}" -T report.json "https://statlas.prod.atl-paas.net/afp/techstack-reports/atlassian-frontend.json"
          after-script:
            - *send-build-events

    # Deploy public atlaskit-website to production
    deploy-atlaskit-website-to-micros-static:
      - step:
          name: Deploy atlaskit website to micros static
          image:
            name: docker-proxy.services.atlassian.com/sox/atlassian/atlassian-frontend:latest-v7
            username: sox
            password: $PIPELINES_JWT_TOKEN
          script:
            # This lets us push to private npm registry
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            - export MICROS_URL="wss://micros-proxy.services.atlassian.com"
            - export MICROS_TOKEN="sox:$PIPELINES_JWT_TOKEN"
            - npx @atlassian/micros-support install-atlas
            - cd website
            - yarn build --extract-react-types && yarn build:copy
            - yarn predeploy
            - yarn deploy:production:micros

    # Deploy techstack website to micros static
    deploy-techstack-website-to-micros-static:
      - step:
          name: Deploy techstack website to micros static
          image:
            name: docker-proxy.services.atlassian.com/sox/atlassian/atlassian-frontend:latest-v7
            username: sox
            password: $PIPELINES_JWT_TOKEN
          script:
            # This lets us push to private npm registry
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            - export MICROS_URL="wss://micros-proxy.services.atlassian.com"
            - export MICROS_TOKEN="sox:$PIPELINES_JWT_TOKEN"
            - npx @atlassian/micros-support install-atlas
            - services/techstack-website/deploy.sh

    deploy-statuspage-chainlink-to-micros-static:
      - variables:
          # The env to deploy to. Should either be ddev, stg-west or prod-west
          - name: MICROS_ENV
          # The docker image username, should be 'sox' for prod and anything for non-prod
          - name: DOCKER_USER
      - step:
          name: Deploy statuspage chainlink website to micros static
          image:
            name: docker-proxy.services.atlassian.com/sox/atlassian/atlassian-frontend:latest-v7
            username: $DOCKER_USER
            password: $PIPELINES_JWT_TOKEN
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            - if [[ "$DOCKER_USER" == "sox" ]]; then build/legacy/ci-scripts/has.no.changesets.sh @atlassian/statuspage-chainlink; fi
            - export MICROS_URL="wss://micros-proxy.services.atlassian.com"
            - if [[ "$MICROS_ENV" == "sox" ]]; then export MICROS_TOKEN="sox:$PIPELINES_JWT_TOKEN";else export MICROS_TOKEN="$CHAINLINK_TOKEN";fi
            - npx @atlassian/micros-support install-atlas
            - SERVICE_ENV=$MICROS_ENV services/statuspage-chainlink/deploy.sh

    build-upload-af-release-data:
      - variables:
          - name: MICROS_ENV
      - step:
          name: Build and upload complete releases dataset for af-release-dashboard
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            - source build/legacy/ci-scripts/install-statlas.sh
            - cd services/af-release-dashboard
            - yarn build:release-data
            - yarn upload:release-data

    deploy-ufo-api-docs:
      - step:
          name: Deploy UFO API Docs
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - source ./build-setup.sh
            - bolt install --frozen-lockfile
            - (cd build/legacy/ci-scripts && yarn build:deploy:dac --packageDirectory=packages/data/ufo-internal)
    build-dragonfruit:
      - step:
          name: Build dragonfruit website
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            - cd services/dragonfruit
            - yarn build

    deploy-dragonfruit-dev:
      - step:
          name: Deploy dragonfruit website to dev
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            # deploy-service-* unfortunately required a branch to run against. We pass through the current branch but default to master.
            - (cd build/legacy/ci-scripts && yarn trigger-pipeline --branch="${BITBUCKET_BRANCH:-master}" --commit=$BITBUCKET_COMMIT --pipeline=deploy-service-dev --variable="SERVICE_PACKAGE:@atlassian/dragonfruit" --variable="MICROS_ENV:ddev")

    # The Dragonfruit (aka Compass) service is configured to deploy to staging on transitive dependencies,
    # but this can also be used to trigger it manually.
    deploy-dragonfruit-stg:
      - step:
          name: Deploy dragonfruit website to staging
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            # deploy-service-* unfortunately required a branch to run against. We pass through the current branch but default to master.
            - (cd build/legacy/ci-scripts && yarn trigger-pipeline --branch="${BITBUCKET_BRANCH:-master}" --commit=$BITBUCKET_COMMIT --pipeline=deploy-service-dev --variable="SERVICE_PACKAGE:@atlassian/dragonfruit" --variable="MICROS_ENV:stg-east")

    # This pipeline is a wrapper around the deploy-service-prod pipeline, and exists so that you don't have to
    # remember what variables need to be included in order to deploy.
    deploy-dragonfruit-prod:
      - step:
          name: Deploy dragonfruit website to production
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            # deploy-service-* unfortunately required a branch to run against. We pass through the current branch but default to master.
            - (cd build/legacy/ci-scripts && yarn trigger-pipeline --branch="${BITBUCKET_BRANCH:-master}" --commit=$BITBUCKET_COMMIT --pipeline=deploy-service-prod --variable="SERVICE_PACKAGE:@atlassian/dragonfruit" --variable="MICROS_ENV:prod-east")

    # send repository statistics to analytics
    send-repo-stats:
      - step:
          name: Send repository statistics
          script:
            # This lets us push to private npm registry
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            # only send statistics to prod analytics when run on master
            - if [[ "$BITBUCKET_BRANCH" == "master" ]]; then export NODE_ENV=production; fi
            - USERNAME="$BITBUCKET_USER" PASSWORD="$BITBUCKET_PASSWORD" yarn ts-node build/metrics/repo-stats/src/index.ts .

    send-jira-repo-stats:
      - step:
          name: Send repository statistics for Jira
          script:
            # This lets us push to private npm registry
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            # only send statistics to prod analytics when run on master
            - if [[ "$BITBUCKET_BRANCH" == "master" ]]; then export NODE_ENV=production; fi
            - STASH_USER="$STASH_USER_BOT" STASH_TOKEN="$STASH_TOKEN_REPO_STATS_ENCODED" yarn ts-node ./build/metrics/repo-stats/src/index.ts --remote --config ./repo-stats-jira-frontend.config.js

    synchrony-testing-deploy:
      - variables:
          - name: MICROS_ENV

      - step:
          name: Deploy Synchrony Testing
          script:
            - echo "Deploying Synchrony Testing to $MICROS_ENV"
            - npx @atlassian/micros-support install-atlas
            - cd services/synchrony-testing
            - MICROS_ENV=$MICROS_ENV MICROS_TOKEN=$SYNCHRONYTESTING_MICROS_TOKEN ./deploy.sh

    deploy-analytics-to-data-portal:
      - variables:
          - name: MICROS_ENV
          - name: CHANGED_PACKAGES
      - step:
          name: Push Analytics
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            - cd services/analytics-auto-push
            - yarn build
            - yarn deploy

    delete-node-modules-cache:
      - variables:
          - name: CACHE_HASH
      - step:
          name: Delete Node Modules Cache
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            - ./build/ci/instant-scripts/ci-cache.sh delete $CACHE_HASH

    skip-inconsistent-tests:
      - variables:
          # When 'true', performs a 'dry run'.
          # Generated jira tickets use the SKIP project instead of their expected project
          # The pull request avoids assigning reviewers by setting a "WIP" prefix in the PR title.
          # Useful when debugging to avoid spamming developers and jira projects when testing deliberately failing tests.
          - name: DRY_RUN
          # When 'true', ignores the environmental threshold protection to avoid skipping packages that fail more than 10% of their tests.
          # Useful when debugging using a single package with a limited number of test files.
          - name: IGNORE_ENV_THRESHOLD
          # Optional filtering to specific packages or test files to expedite dev feedback loop.
          # Space separated. e.g. "packages/design-system/button" or "path/to/file.ts" or "packages/foo packages/bar packages/baz"
          - name: PACKAGES
          # Optional destination branch override. Defaults to the current branch.
          # Useful when debugging. e.g. "master" or "develop" when you're testing on an unmerged feature branch.
          - name: DESTINATION_BRANCH
      - step:
          name: Determine Packages For Base Branch
          script:
              - pipe: atlassian/artifactory-sidekick:v1
              - *build-setup
              - *bolt-install
              - bash ./packages/monorepo-tooling/skip-inconsistent-tests/src/ci/generate-packages.sh ${PACKAGES:-}
          artifacts:
              # Stores a list of packages that should run for the current branch
              - 'packages-list.txt'
      - parallel:
          - step:
              name: Running All Browser Integration tests
              script:
                # Abort early if Integration tests are disabled for this pipeline
                - if [[ $SKIP_TESTS_TEST_TYPES != *integration* ]]; then echo "Integration testing is currently disabled via an ENV variable" && exit 0; fi
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                # We use --gracefulExit to ensure the step passes (exit 0) so that the final 'Skip failed tests' step runs at the end.
                - CUSTOM_BUILD=true ./build/ci/test-pipeline/ci/run-webdriver.sh $(< packages-list.txt) --retry=0 --gracefulExit
              after-script:
                # Rename report file and prevent pipelines failure log truncation bug
                - test -f test-reports/junit.xml && mv test-reports/junit.xml test-reports/IntegrationTestsJunit.xml && bolt ts-node ./build/legacy/ci-scripts/fix-jest-junit-xml.ts test-reports/IntegrationTestsJunit.xml
                # Output the step ID into an artifact for later use in the 'Skip failed tests' final step.
                - echo -n $BITBUCKET_STEP_UUID > pipeline-stepid-integration.txt
                # Duplicate & move the browserstack session file as we'll read from it later
                - cp integration_tests_artifacts/"$BITBUCKET_PARALLEL_STEP"_integration_tests_results.json browserstack-session.json
              artifacts:
                - *browserstack-artifact
                - test-reports/IntegrationTestsJunit.xml
                - pipeline-stepid-integration.txt
                - browserstack-session.json
          - step:
              name: Running All Mobile Integration tests
              script:
                # Abort early if Mobile tests are disabled for this pipeline
                - if [[ $SKIP_TESTS_TEST_TYPES != *mobile* ]]; then echo "Mobile integration testing is currently disabled via an ENV variable" && exit 0; fi
                # Abort early if branch isn't develop or a release candidate
                - if [[ "$BITBUCKET_BRANCH" != "develop" && "$BITBUCKET_BRANCH" != "release-candidate/"* ]]; then echo "Mobile tests are specific to scheduled releases and are only run against develop branch" && exit 0; fi
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                # We use --gracefulExit to ensure the step passes (exit 0) so that the final 'Skip failed tests' step runs at the end.
                - CUSTOM_BUILD=true ./build/ci/test-pipeline/ci/run-webdriver-mobile.sh $(< packages-list.txt) --retry=0 --gracefulExit
              after-script:
                # Rename report file and prevent pipelines failure log truncation bug
                - test -f test-reports/junit.xml && mv test-reports/junit.xml test-reports/MobileIntegrationTestsJunit.xml && bolt ts-node ./build/legacy/ci-scripts/fix-jest-junit-xml.ts test-reports/MobileIntegrationTestsJunit.xml
                # Output the step ID into an artifact for later use in the 'Skip failed tests' final step.
                - echo -n $BITBUCKET_STEP_UUID > pipeline-stepid-mobile.txt
                # Duplicate & move the browserstack session file as we'll read from it later
                - cp integration_tests_artifacts/"$BITBUCKET_PARALLEL_STEP"_integration_tests_results.json browserstack-session-mobile.json
              artifacts:
                - test-reports/MobileIntegrationTestsJunit.xml
                - pipeline-stepid-mobile.txt
                - browserstack-session-mobile.json
          - step:
              name: Running All Visual Regression tests
              <<: *vr-image
              script:
                # Abort early if VR tests are disabled for this pipeline
                - if [[ $SKIP_TESTS_TEST_TYPES != *vr* ]]; then echo "Visual regression testing is currently disabled via an ENV variable" exit 0; fi
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                # We use --gracefulExit to ensure the step passes (exit 0) so that the final 'Skip failed tests' step runs at the end.
                - CUSTOM_BUILD=true ./build/ci/test-pipeline/ci/run-vr.sh $(< packages-list.txt) --repeat=0 --retry=0 --gracefulExit
              after-script:
                # Extract all the diff images and store them into a folder for download.
                - *store-snapshot-failures
                # Rename report file and prevent pipelines failure log truncation bug
                - test -f test-reports/junit.xml && mv test-reports/junit.xml test-reports/VisualRegressionTestsJunit.xml && bolt ts-node ./build/legacy/ci-scripts/fix-jest-junit-xml.ts test-reports/VisualRegressionTestsJunit.xml
                # Output the step ID into an artifact for later use in the 'Skip failed tests' final step.
                - echo -n $BITBUCKET_STEP_UUID > pipeline-stepid-vr.txt
              artifacts:
                - test-reports/VisualRegressionTestsJunit.xml
                - pipeline-stepid-vr.txt
                - *snapshot-artifact
      - step:
          name: Skip failed tests (if applicable)
          script:
            # This lets us push to private npm registry
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            - bolt build @atlaskit/codemod-utils
            - cd packages/monorepo-tooling/skip-inconsistent-tests
            - yarn fetch-failing-tests $BITBUCKET_CLONE_DIR/test-reports $(< packages-list.txt)
            - yarn skip-inconsistent-tests $BITBUCKET_CLONE_DIR/test-reports
          after-script:
            # delete the test-reports saved as artifacts to avoid test results to be displayed in this step.
            - if [ -d test-reports ] ; then rm -rf test-reports; fi

    run-test-orchestrator:
      - variables:
          - name: TEST_TYPE
          - name: CACHE_VERSION
          - name: CHANGED_PACKAGES
      - step:
          name: Run Test Orchestrator
          <<: *vr-image
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            - export TEST_CMD; if [[ "$TEST_TYPE" == "webdriver" ]]; then TEST_CMD='test:webdriver:browserstack'; elif [[ "$TEST_TYPE" == "vr" ]]; then TEST_CMD='test:vr'; else TEST_CMD='test'; fi
            - git lfs pull
            - (cd build/ci/test-pipeline && AF_TEST_CACHE_VERSION="${CACHE_VERSION:-1}" CHANGED_PACKAGES="${CHANGED_PACKAGES}" yarn $TEST_CMD --cached --maxWorkers=50%)

    run-component-performance:
      - variables:
          - name: PACKAGE_NAME
          - name: STORY_NAME
          - name: BASELINE_BRANCH
            default: develop
          - name: RUNS
            default: 10
          - name: COPIES
            default: 10
          - name: SAMPLES
            default: 10
      - parallel:
          - step:
              <<: *vr-image
              name: Run component performance (branch)
              script:
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - *bolt-install
                - bolt w @af/component-performance build
                - export NODE_ENV=production
                - export OUT_DIR=branch
                - bolt storybook ${PACKAGE_NAME} &
                - cd build/experimental/component-performance
                - yarn wait-on http://127.0.0.1:56789
                - ./run
              artifacts:
                - build/experimental/component-performance/branch/**
                - build/experimental/component-performance/screenshots/**
          - step:
              <<: *vr-image
              name: Run component performance (baseline)
              script:
                - pipe: atlassian/artifactory-sidekick:v1
                - *build-setup
                - git checkout ${BASELINE_BRANCH}
                - *bolt-install
                - bolt w @af/component-performance build
                - export NODE_ENV=production
                - export OUT_DIR=baseline
                - bolt storybook ${PACKAGE_NAME} &
                - cd build/experimental/component-performance
                - yarn wait-on http://127.0.0.1:56789
                - ./run
              artifacts:
                - build/experimental/component-performance/baseline/**
                - build/experimental/component-performance/screenshots/**
      - step:
          <<: *vr-image
          name: Parse and compare results
          script:
            - pipe: atlassian/artifactory-sidekick:v1
            - *build-setup
            - *bolt-install
            - bolt sb-perf -c build/experimental/component-performance/branch -b build/experimental/component-performance/baseline
          artifacts:
            - sb-perf/**
