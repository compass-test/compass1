/**
 * Steps involved in master service deployment:
 *  1. Generates a file containing deployment pipeline configs for all services that have both:
 *      - opted-in to automatic deployments from master, and
 *      - have a changeset
 *  2. Reads configs generated by first step and triggers required pipelines
 */
import { PipelinesClient } from '@atlaskit/build-utils/bitbucket';
import {
  getServiceDeploymentMetadata,
  DeploymentType,
} from '../utils/deployment-metadata';
import {
  writeDeploymentMetadata,
  readDeploymentMetadata,
} from '../utils/files';
import { triggerDeploymentPipelines } from '../utils/pipelines';
import { Logger, validatePipelineVariables } from '../utils';

async function generateMetadata() {
  Logger.progress('Determining services to deploy...');
  const serviceDeploymentMetadata = await getServiceDeploymentMetadata(
    DeploymentType.MASTER_CONTINUOUS,
  );

  if (serviceDeploymentMetadata.length === 0) {
    Logger.progress('No deployments to trigger');
  } else {
    Logger.log(serviceDeploymentMetadata);
  }

  await writeDeploymentMetadata(serviceDeploymentMetadata);
  Logger.success('Generated deployment metadata');
}

async function triggerMasterDeployments(pipelinesClient: PipelinesClient) {
  const serviceDeploymentMetadata = await readDeploymentMetadata();
  Logger.log(serviceDeploymentMetadata);

  Logger.progress('Triggering deployments...');
  await triggerDeploymentPipelines(
    serviceDeploymentMetadata,
    { branch: 'master' },
    pipelinesClient,
    (servicePackage: string, url: string) =>
      Logger.success(
        `Triggered deployment pipeline for ${servicePackage}: ${url}`,
      ),
  );
}

if (require.main === module) {
  validatePipelineVariables(process.env);
  const {
    BITBUCKET_BRANCH,
    BITBUCKET_USER,
    BITBUCKET_PASSWORD,
    BITBUCKET_REPO_FULL_NAME,
  } = process.env;

  if (BITBUCKET_BRANCH !== 'master') {
    Logger.exit('This should only be executed in a master branch build');
  }

  const step = process.argv[2];

  if (step === 'generate-metadata') {
    generateMetadata().catch(err => Logger.exit(err));
  } else if (step === 'trigger') {
    const pipelinesClient = new PipelinesClient({
      auth: {
        username: BITBUCKET_USER,
        password: BITBUCKET_PASSWORD,
      },
      repoFullName: BITBUCKET_REPO_FULL_NAME,
    });
    triggerMasterDeployments(pipelinesClient).catch(err => Logger.exit(err));
  }
}
