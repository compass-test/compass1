// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<OpenIdConnectPage /> should render component with claim collapsed 1`] = `
.emotion-0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  line-height: 20px;
  overflow-x: auto;
  white-space: pre;
  font-size: 12px;
  font-family: 'SFMono-Medium','SF Mono','Segoe UI Mono','Roboto Mono','Ubuntu Mono',Menlo,Consolas,Courier,monospace;
  font-weight: normal;
  background-color: var(--ds--code--bg-color,#F4F5F7);
  color: #172B4D;
  border-style: none;
  border-radius: 3px;
}

.emotion-0 code[class*="language-"],
.emotion-0 pre[class*="language-"],
.emotion-0 code {
  all: unset;
  padding: 8px 0;
}

.emotion-0 .token:not([class=token],[data-ds--code--row--highlight]) {
  all: unset;
}

.emotion-0 .token.key,
.emotion-0 .token.keyword {
  color: #0052CC;
  font-weight: bolder;
}

.emotion-0 .token.attr-name {
  color: #067384;
}

.emotion-0 .token.selector {
  color: #0052CC;
}

.emotion-0 .token.comment,
.emotion-0 .token.block-comment {
  color: #505F79;
  font-family: SFMono-MediumItalic,'SFMono-Medium','SF Mono','Segoe UI Mono','Roboto Mono','Ubuntu Mono',Menlo,Consolas,Courier,monospace;
  font-style: italic;
}

.emotion-0 .token.function-name {
  color: #6554C0;
}

.emotion-0 .token.doctype {
  color: #7A5D1A;
}

.emotion-0 .token.substr {
  color: #505F79;
}

.emotion-0 .token.namespace {
  color: #0052CC;
}

.emotion-0 .token.builtin {
  color: #0052CC;
}

.emotion-0 .token.entity {
  color: #0052CC;
}

.emotion-0 .token.bullet {
  color: #0052CC;
}

.emotion-0 .token.code {
  color: #0052CC;
}

.emotion-0 .token.regex {
  color: #067384;
}

.emotion-0 .token.symbol {
  color: #067384;
}

.emotion-0 .token.variable {
  color: #067384;
}

.emotion-0 .token.url {
  color: #6554C0;
}

.emotion-0 .token.selector-attr {
  color: #067384;
}

.emotion-0 .token.selector-pseudo {
  color: #067384;
}

.emotion-0 .token.type {
  color: #067384;
}

.emotion-0 .token.quote {
  color: #067384;
}

.emotion-0 .token.tag {
  color: #067384;
}

.emotion-0 .token.string {
  color: #006644;
}

.emotion-0 .token.class-name {
  color: #6554C0;
}

.emotion-0 .token.title {
  color: #6554C0;
}

.emotion-0 .token.section {
  color: #6554C0;
}

.emotion-0 .token.meta-keyword {
  color: #006644;
}

.emotion-0 .token.meta {
  color: #505F79;
}

.emotion-0 .token.italic {
  font-style: italic;
}

.emotion-0 .token.bold {
  font-weight: bolder;
}

.emotion-0 .token.function {
  color: #172B4D;
}

.emotion-0 .token.number {
  color: #0052CC;
}

.emotion-0 .token.attr-value {
  color: #067384;
}

.emotion-0 .token.prolog {
  color: #0052CC;
}

.emotion-0 .token.cdata {
  color: #505F79;
}

.emotion-0 .token.punctuation {
  color: #172B4D;
}

.emotion-0 .token.property {
  color: #6554C0;
}

.emotion-0 .token.constant {
  color: #067384;
}

.emotion-0 .token.deleted {
  color: #BF2600;
}

.emotion-0 .token.boolean {
  color: #0747A6;
}

.emotion-0 .token.char {
  color: #172B4D;
}

.emotion-0 .token.inserted {
  color: #006644;
}

.emotion-0 .token.operator {
  color: #172B4D;
}

.emotion-0 .token.atrule {
  color: #006644;
}

.emotion-0 .token.important {
  color: #7A5D1A;
  font-weight: bold;
}

.emotion-0 .linenumber,
.emotion-0 .react-syntax-highlighter-line-number {
  min-width: calc(1ch + 16px) !important;
  font-style: normal !important;
  color: #505F79 !important;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  box-sizing: border-box;
  padding-right: 8px !important;
  padding-left: 8px;
  margin-right: 8px;
  text-align: right;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  display: block;
}

.emotion-0 .linenumber {
  display: inline-block !important;
}

.emotion-0 [data-ds--code--row] {
  display: block;
  padding-right: 8px !important;
  margin-right: -8px;
}

.emotion-0 [data-ds--code--row--highlight] {
  background: #EBECF0;
}

.emotion-0 [data-ds--code--row--highlight]::before,
.emotion-0 [data-ds--code--row--highlight]::after {
  -webkit-clip-path: inset(100%);
  clip-path: inset(100%);
  -webkit-clip: rect(1px,1px,1px,1px);
  clip: rect(1px,1px,1px,1px);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.emotion-0 [data-ds--code--row--highlight]::before {
  content: ", Highlight start, ";
}

.emotion-0 [data-ds--code--row--highlight]::after {
  content: ", Highlight end, ";
}

.emotion-0 [data-ds--code--row--highlight] .linenumber {
  border-left: 4px solid #2684FF;
  padding-left: 4px !important;
  position: relative;
}

.emotion-0 [data-ds--code--row--highlight] .linenumber::before {
  content: "";
  position: absolute;
  width: 4px;
  top: -1px;
  left: -4px;
  border-top: 1px solid #2684FF;
}

.emotion-0 [data-ds--code--row--highlight] + [data-ds--code--row]:not([data-ds--code--row--highlight]),
.emotion-0 [data-ds--code--row]:not([data-ds--code--row--highlight]) + [data-ds--code--row--highlight] {
  border-top: 1px dashed transparent;
}

.emotion-0 [data-ds--code--row--highlight]:last-child {
  border-bottom: 1px dashed transparent;
}

.emotion-0 code:first-of-type {
  padding-right: 0px !important;
  background-image: linear-gradient(to right,var(--ds--code--line-number-bg-color,#EBECF0),var(--ds--code--line-number-bg-color,#EBECF0) calc(1ch + 16px),transparent calc(1ch + 16px),transparent);
}

.emotion-0 code:last-of-type {
  padding-right: 8px !important;
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
}

.emotion-3 {
  display: inline-block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  line-height: 1;
  width: 16px;
  height: 16px;
}

.emotion-3 > svg {
  overflow: hidden;
  pointer-events: none;
  max-width: 100%;
  max-height: 100%;
  color: var(--icon-primary-color);
  fill: var(--icon-secondary-color);
  vertical-align: bottom;
}

.emotion-3 > svg stop {
  stop-color: currentColor;
}

@media screen and (forced-colors:active) {
  .emotion-3 > svg {
    -webkit-filter: grayscale(1);
    filter: grayscale(1);
    --icon-primary-color: CanvasText;
    --icon-secondary-color: Canvas;
  }
}

.emotion-3 > svg {
  width: 16px;
  height: 16px;
}

.emotion-10,
.emotion-10:hover,
.emotion-10:active,
.emotion-10:focus,
.emotion-10:visited,
.emotion-10:disabled,
.emotion-10[disabled] {
  -webkit-align-items: baseline;
  -webkit-box-align: baseline;
  -ms-flex-align: baseline;
  align-items: baseline;
  border-width: 0;
  border-radius: 3px;
  box-sizing: border-box;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  font-size: inherit;
  font-style: normal;
  font-family: inherit;
  font-weight: 500;
  max-width: 100%;
  position: relative;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background 0.1s ease-out,box-shadow 0.15s cubic-bezier(0.47,0.03,0.49,1.38);
  transition: background 0.1s ease-out,box-shadow 0.15s cubic-bezier(0.47,0.03,0.49,1.38);
  white-space: nowrap;
  background: none;
  color: var(--text-highEmphasis,#42526E) !important;
  cursor: pointer;
  height: 2.2857142857142856em;
  line-height: 2.2857142857142856em;
  padding: 0 10px;
  vertical-align: middle;
  width: auto;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  outline: none;
  margin: 10px 0px -10px 0px;
}

.emotion-10::-moz-focus-inner,
.emotion-10:hover::-moz-focus-inner,
.emotion-10:active::-moz-focus-inner,
.emotion-10:focus::-moz-focus-inner,
.emotion-10:visited::-moz-focus-inner,
.emotion-10:disabled::-moz-focus-inner,
.emotion-10[disabled]::-moz-focus-inner {
  border: 0;
  margin: 0;
  padding: 0;
}

.emotion-9 {
  -webkit-transition: opacity 0.3s;
  transition: opacity 0.3s;
  opacity: 1;
  margin: 0 2px;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  -webkit-flex-shrink: 1;
  -ms-flex-negative: 1;
  flex-shrink: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.emotion-8 {
  display: inline-block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  line-height: 1;
  width: 32px;
  height: 32px;
}

.emotion-8 > svg {
  overflow: hidden;
  pointer-events: none;
  max-width: 100%;
  max-height: 100%;
  color: var(--icon-primary-color);
  fill: var(--icon-secondary-color);
  vertical-align: bottom;
}

.emotion-8 > svg stop {
  stop-color: currentColor;
}

@media screen and (forced-colors:active) {
  .emotion-8 > svg {
    -webkit-filter: grayscale(1);
    filter: grayscale(1);
    --icon-primary-color: CanvasText;
    --icon-secondary-color: Canvas;
  }
}

.emotion-8 > svg {
  width: 32px;
  height: 32px;
}

.emotion-11 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  line-height: 20px;
  overflow-x: auto;
  white-space: pre;
  font-size: 12px;
  font-family: 'SFMono-Medium','SF Mono','Segoe UI Mono','Roboto Mono','Ubuntu Mono',Menlo,Consolas,Courier,monospace;
  font-weight: normal;
  background-color: var(--ds--code--bg-color,#F4F5F7);
  color: #172B4D;
  border-style: none;
  border-radius: 3px;
}

.emotion-11 code[class*="language-"],
.emotion-11 pre[class*="language-"],
.emotion-11 code {
  all: unset;
  padding: 8px 0;
}

.emotion-11 .token:not([class=token],[data-ds--code--row--highlight]) {
  all: unset;
}

.emotion-11 .token.key,
.emotion-11 .token.keyword {
  color: #0052CC;
  font-weight: bolder;
}

.emotion-11 .token.attr-name {
  color: #067384;
}

.emotion-11 .token.selector {
  color: #0052CC;
}

.emotion-11 .token.comment,
.emotion-11 .token.block-comment {
  color: #505F79;
  font-family: SFMono-MediumItalic,'SFMono-Medium','SF Mono','Segoe UI Mono','Roboto Mono','Ubuntu Mono',Menlo,Consolas,Courier,monospace;
  font-style: italic;
}

.emotion-11 .token.function-name {
  color: #6554C0;
}

.emotion-11 .token.doctype {
  color: #7A5D1A;
}

.emotion-11 .token.substr {
  color: #505F79;
}

.emotion-11 .token.namespace {
  color: #0052CC;
}

.emotion-11 .token.builtin {
  color: #0052CC;
}

.emotion-11 .token.entity {
  color: #0052CC;
}

.emotion-11 .token.bullet {
  color: #0052CC;
}

.emotion-11 .token.code {
  color: #0052CC;
}

.emotion-11 .token.regex {
  color: #067384;
}

.emotion-11 .token.symbol {
  color: #067384;
}

.emotion-11 .token.variable {
  color: #067384;
}

.emotion-11 .token.url {
  color: #6554C0;
}

.emotion-11 .token.selector-attr {
  color: #067384;
}

.emotion-11 .token.selector-pseudo {
  color: #067384;
}

.emotion-11 .token.type {
  color: #067384;
}

.emotion-11 .token.quote {
  color: #067384;
}

.emotion-11 .token.tag {
  color: #067384;
}

.emotion-11 .token.string {
  color: #006644;
}

.emotion-11 .token.class-name {
  color: #6554C0;
}

.emotion-11 .token.title {
  color: #6554C0;
}

.emotion-11 .token.section {
  color: #6554C0;
}

.emotion-11 .token.meta-keyword {
  color: #006644;
}

.emotion-11 .token.meta {
  color: #505F79;
}

.emotion-11 .token.italic {
  font-style: italic;
}

.emotion-11 .token.bold {
  font-weight: bolder;
}

.emotion-11 .token.function {
  color: #172B4D;
}

.emotion-11 .token.number {
  color: #0052CC;
}

.emotion-11 .token.attr-value {
  color: #067384;
}

.emotion-11 .token.prolog {
  color: #0052CC;
}

.emotion-11 .token.cdata {
  color: #505F79;
}

.emotion-11 .token.punctuation {
  color: #172B4D;
}

.emotion-11 .token.property {
  color: #6554C0;
}

.emotion-11 .token.constant {
  color: #067384;
}

.emotion-11 .token.deleted {
  color: #BF2600;
}

.emotion-11 .token.boolean {
  color: #0747A6;
}

.emotion-11 .token.char {
  color: #172B4D;
}

.emotion-11 .token.inserted {
  color: #006644;
}

.emotion-11 .token.operator {
  color: #172B4D;
}

.emotion-11 .token.atrule {
  color: #006644;
}

.emotion-11 .token.important {
  color: #7A5D1A;
  font-weight: bold;
}

.emotion-11 .linenumber,
.emotion-11 .react-syntax-highlighter-line-number {
  min-width: calc(2ch + 16px) !important;
  font-style: normal !important;
  color: #505F79 !important;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  box-sizing: border-box;
  padding-right: 8px !important;
  padding-left: 8px;
  margin-right: 8px;
  text-align: right;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  display: block;
}

.emotion-11 .linenumber {
  display: inline-block !important;
}

.emotion-11 [data-ds--code--row] {
  display: block;
  padding-right: 8px !important;
  margin-right: -8px;
}

.emotion-11 [data-ds--code--row--highlight] {
  background: #EBECF0;
}

.emotion-11 [data-ds--code--row--highlight]::before,
.emotion-11 [data-ds--code--row--highlight]::after {
  -webkit-clip-path: inset(100%);
  clip-path: inset(100%);
  -webkit-clip: rect(1px,1px,1px,1px);
  clip: rect(1px,1px,1px,1px);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.emotion-11 [data-ds--code--row--highlight]::before {
  content: ", Highlight start, ";
}

.emotion-11 [data-ds--code--row--highlight]::after {
  content: ", Highlight end, ";
}

.emotion-11 [data-ds--code--row--highlight] .linenumber {
  border-left: 4px solid #2684FF;
  padding-left: 4px !important;
  position: relative;
}

.emotion-11 [data-ds--code--row--highlight] .linenumber::before {
  content: "";
  position: absolute;
  width: 4px;
  top: -1px;
  left: -4px;
  border-top: 1px solid #2684FF;
}

.emotion-11 [data-ds--code--row--highlight] + [data-ds--code--row]:not([data-ds--code--row--highlight]),
.emotion-11 [data-ds--code--row]:not([data-ds--code--row--highlight]) + [data-ds--code--row--highlight] {
  border-top: 1px dashed transparent;
}

.emotion-11 [data-ds--code--row--highlight]:last-child {
  border-bottom: 1px dashed transparent;
}

.emotion-11 code:first-of-type {
  padding-right: 0px !important;
  background-image: linear-gradient(to right,var(--ds--code--line-number-bg-color,#EBECF0),var(--ds--code--line-number-bg-color,#EBECF0) calc(2ch + 16px),transparent calc(2ch + 16px),transparent);
}

.emotion-11 code:last-of-type {
  padding-right: 8px !important;
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
}

.c0 {
  margin-top: 24px;
}

.c0 h5 {
  color: #6B778C;
}

.c7 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  margin: 5px 0;
}

.c8 {
  width: 50%;
  margin-top: 15px;
}

.c9 {
  width: 47%;
  margin-top: 15px;
}

.c10 {
  width: 3%;
  margin-top: 7px;
  padding-left: 10px;
}

.c6 {
  margin-top: 7px;
  width: 99.5%;
  left: 0px;
  position: absolute;
  border: solid 1px #DFE1E6;
}

.c5 {
  -webkit-transform: translate3d(0,0,0);
  -ms-transform: translate3d(0,0,0);
  transform: translate3d(0,0,0);
  -webkit-transition: -webkit-transform 0.2s ease-in-out;
  -webkit-transition: transform 0.2s ease-in-out;
  transition: transform 0.2s ease-in-out;
  height: 32px;
  margin-top: 9px;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  margin: -8px 0px 7px -10px;
}

.c2 {
  border-radius: 3px;
  width: 24px;
  height: 24px;
  cursor: pointer;
  margin-top: 3px;
  margin-right: 3px;
}

.c3 {
  padding-top: 5.6px;
  padding-left: 4px;
}

.c1 {
  margin: 14px 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  background-color: #F4F5F7;
}

<Memo(OpenIDConnectConfiguration)
  accountName="test"
  accountUuid="{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}"
  connectEnvironment="PRODUCTION"
  deploymentEnvironments={Array []}
  repositoryUuid="{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}"
>
  <h3>
    Identity provider
  </h3>
  <styled.div>
    <div
      className="c0"
    >
      <h5>
        Identity provider URL
      </h5>
      <Memo(CopyableCodeBlock)
        content="https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc"
        language="html"
        name="identityProviderURL"
        showLineNumbers={true}
      >
        <styled.div>
          <div
            className="c1"
          >
            <CodeBlock
              language="html"
              showLineNumbers={true}
              text="https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc"
            >
              <ReactAsyncHighlighter
                PreTag="span"
                className="emotion-0"
                data-code-lang="xml"
                data-ds--code--code-block=""
                language="xml"
                lineProps={[Function]}
                showLineNumbers={true}
                useInlineStyles={false}
                wrapLines={false}
              >
                <SyntaxHighlighter
                  PreTag="span"
                  astGenerator={null}
                  className="emotion-0"
                  data-code-lang="xml"
                  data-ds--code--code-block=""
                  language="xml"
                  lineProps={[Function]}
                  showLineNumbers={true}
                  useInlineStyles={false}
                  wrapLines={false}
                >
                  <span
                    className="prismjs emotion-0"
                    data-code-lang="xml"
                    data-ds--code--code-block=""
                    style={Object {}}
                  >
                    <AllLineNumbers
                      codeString="https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc"
                      codeStyle={Object {}}
                      numberStyle={Object {}}
                      startingLineNumber={1}
                    >
                      <code
                        style={
                          Object {
                            "float": "left",
                            "paddingRight": "10px",
                          }
                        }
                      >
                        <span
                          className="react-syntax-highlighter-line-number"
                          key="line-0"
                          style={Object {}}
                        >
                          1

                        </span>
                      </code>
                    </AllLineNumbers>
                    <code
                      className="language-xml"
                      style={Object {}}
                    >
                      https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc
                    </code>
                  </span>
                </SyntaxHighlighter>
              </ReactAsyncHighlighter>
            </CodeBlock>
            <Memo(CopyButton)
              content="https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc"
              name="identityProviderURL"
            >
              <Tooltip
                content="Copy"
                position="right"
              >
                <div
                  onBlur={[Function]}
                  onClick={[Function]}
                  onFocus={[Function]}
                  onMouseDown={[Function]}
                  onMouseOut={[Function]}
                  onMouseOver={[Function]}
                  role="presentation"
                >
                  <styled.div
                    onClick={[Function]}
                  >
                    <div
                      className="c2"
                      onClick={[Function]}
                    >
                      <styled.div>
                        <div
                          className="c3"
                        >
                          <CopyIcon
                            label="Copy identityProviderURL"
                            size="small"
                          >
                            <Memo(Icon)
                              dangerouslySetGlyph="<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>"
                              label="Copy identityProviderURL"
                              size="small"
                            >
                              <span
                                aria-label="Copy identityProviderURL"
                                className="emotion-3"
                                dangerouslySetInnerHTML={
                                  Object {
                                    "__html": "<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>",
                                  }
                                }
                                role="img"
                                style={
                                  Object {
                                    "--icon-primary-color": "currentColor",
                                    "--icon-secondary-color": "var(--background-default, #FFFFFF)",
                                  }
                                }
                              />
                            </Memo(Icon)>
                          </CopyIcon>
                        </div>
                      </styled.div>
                    </div>
                  </styled.div>
                </div>
              </Tooltip>
            </Memo(CopyButton)>
          </div>
        </styled.div>
      </Memo(CopyableCodeBlock)>
    </div>
  </styled.div>
  <styled.div>
    <div
      className="c0"
    >
      <h5>
        Audience
      </h5>
      <Memo(CopyableCodeBlock)
        content="ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a"
        language="html"
        name="audience"
        showLineNumbers={true}
      >
        <styled.div>
          <div
            className="c1"
          >
            <CodeBlock
              language="html"
              showLineNumbers={true}
              text="ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a"
            >
              <ReactAsyncHighlighter
                PreTag="span"
                className="emotion-0"
                data-code-lang="xml"
                data-ds--code--code-block=""
                language="xml"
                lineProps={[Function]}
                showLineNumbers={true}
                useInlineStyles={false}
                wrapLines={false}
              >
                <SyntaxHighlighter
                  PreTag="span"
                  astGenerator={null}
                  className="emotion-0"
                  data-code-lang="xml"
                  data-ds--code--code-block=""
                  language="xml"
                  lineProps={[Function]}
                  showLineNumbers={true}
                  useInlineStyles={false}
                  wrapLines={false}
                >
                  <span
                    className="prismjs emotion-0"
                    data-code-lang="xml"
                    data-ds--code--code-block=""
                    style={Object {}}
                  >
                    <AllLineNumbers
                      codeString="ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a"
                      codeStyle={Object {}}
                      numberStyle={Object {}}
                      startingLineNumber={1}
                    >
                      <code
                        style={
                          Object {
                            "float": "left",
                            "paddingRight": "10px",
                          }
                        }
                      >
                        <span
                          className="react-syntax-highlighter-line-number"
                          key="line-0"
                          style={Object {}}
                        >
                          1

                        </span>
                      </code>
                    </AllLineNumbers>
                    <code
                      className="language-xml"
                      style={Object {}}
                    >
                      ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a
                    </code>
                  </span>
                </SyntaxHighlighter>
              </ReactAsyncHighlighter>
            </CodeBlock>
            <Memo(CopyButton)
              content="ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a"
              name="audience"
            >
              <Tooltip
                content="Copy"
                position="right"
              >
                <div
                  onBlur={[Function]}
                  onClick={[Function]}
                  onFocus={[Function]}
                  onMouseDown={[Function]}
                  onMouseOut={[Function]}
                  onMouseOver={[Function]}
                  role="presentation"
                >
                  <styled.div
                    onClick={[Function]}
                  >
                    <div
                      className="c2"
                      onClick={[Function]}
                    >
                      <styled.div>
                        <div
                          className="c3"
                        >
                          <CopyIcon
                            label="Copy audience"
                            size="small"
                          >
                            <Memo(Icon)
                              dangerouslySetGlyph="<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>"
                              label="Copy audience"
                              size="small"
                            >
                              <span
                                aria-label="Copy audience"
                                className="emotion-3"
                                dangerouslySetInnerHTML={
                                  Object {
                                    "__html": "<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>",
                                  }
                                }
                                role="img"
                                style={
                                  Object {
                                    "--icon-primary-color": "currentColor",
                                    "--icon-secondary-color": "var(--background-default, #FFFFFF)",
                                  }
                                }
                              />
                            </Memo(Icon)>
                          </CopyIcon>
                        </div>
                      </styled.div>
                    </div>
                  </styled.div>
                </div>
              </Tooltip>
            </Memo(CopyButton)>
          </div>
        </styled.div>
      </Memo(CopyableCodeBlock)>
    </div>
  </styled.div>
  <h3>
    Unique identifiers
  </h3>
  <ForwardRef(CustomThemeButton)
    appearance="subtle"
    name="claim"
    onClick={[Function]}
    theme={[Function]}
  >
    <Provider
      value={[Function]}
    >
      <Consumer>
        <Consumer
          appearance="subtle"
          autoFocus={false}
          iconIsOnlyChild={false}
          isDisabled={false}
          isLoading={false}
          isSelected={false}
          mode="light"
          name="claim"
          onClick={[Function]}
          shouldFitContainer={false}
          spacing="default"
          state="default"
        >
          <ForwardRef(ButtonBase)
            appearance="subtle"
            autoFocus={false}
            buttonCss={
              Object {
                "&, &:hover, &:active, &:focus, &:visited, &:disabled, &[disabled]": Object {
                  "&::-moz-focus-inner": Object {
                    "border": 0,
                    "margin": 0,
                    "padding": 0,
                  },
                  "alignItems": "baseline",
                  "background": "none",
                  "borderRadius": 3,
                  "borderWidth": 0,
                  "boxSizing": "border-box",
                  "color": "var(--text-highEmphasis, #42526E) !important",
                  "cursor": "pointer",
                  "display": "inline-flex",
                  "fontFamily": "inherit",
                  "fontSize": "inherit",
                  "fontStyle": "normal",
                  "fontWeight": 500,
                  "height": "2.2857142857142856em",
                  "justifyContent": "center",
                  "lineHeight": "2.2857142857142856em",
                  "margin": "10px 0px -10px 0px",
                  "maxWidth": "100%",
                  "outline": "none",
                  "padding": "0 10px",
                  "position": "relative",
                  "textAlign": "center",
                  "textDecoration": "none",
                  "transition": "background 0.1s ease-out, box-shadow 0.15s cubic-bezier(0.47, 0.03, 0.49, 1.38)",
                  "verticalAlign": "middle",
                  "whiteSpace": "nowrap",
                  "width": "auto",
                },
              }
            }
            isDisabled={false}
            isSelected={false}
            name="claim"
            onBlur={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onMouseDown={[Function]}
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
            overlay={null}
            shouldFitContainer={false}
            spacing="default"
          >
            <button
              className="emotion-10"
              disabled={false}
              name="claim"
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="emotion-9"
              >
                <styled.div>
                  <div
                    className="c4"
                  >
                    <styled.div
                      isExpanded={false}
                    >
                      <div
                        className="c5"
                      >
                        <ChevronRightIcon
                          label="Expand"
                          size="large"
                        >
                          <Memo(Icon)
                            dangerouslySetGlyph="<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><path d=\\"M10.294 9.698a.988.988 0 010-1.407 1.01 1.01 0 011.419 0l2.965 2.94a1.09 1.09 0 010 1.548l-2.955 2.93a1.01 1.01 0 01-1.42 0 .988.988 0 010-1.407l2.318-2.297-2.327-2.307z\\" fill=\\"currentColor\\" fill-rule=\\"evenodd\\"/></svg>"
                            label="Expand"
                            size="large"
                          >
                            <span
                              aria-label="Expand"
                              className="emotion-8"
                              dangerouslySetInnerHTML={
                                Object {
                                  "__html": "<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><path d=\\"M10.294 9.698a.988.988 0 010-1.407 1.01 1.01 0 011.419 0l2.965 2.94a1.09 1.09 0 010 1.548l-2.955 2.93a1.01 1.01 0 01-1.42 0 .988.988 0 010-1.407l2.318-2.297-2.327-2.307z\\" fill=\\"currentColor\\" fill-rule=\\"evenodd\\"/></svg>",
                                }
                              }
                              role="img"
                              style={
                                Object {
                                  "--icon-primary-color": "currentColor",
                                  "--icon-secondary-color": "var(--background-default, #FFFFFF)",
                                }
                              }
                            />
                          </Memo(Icon)>
                        </ChevronRightIcon>
                      </div>
                    </styled.div>
                    <h5>
                      Example payload
                    </h5>
                  </div>
                </styled.div>
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </Consumer>
      </Consumer>
    </Provider>
  </ForwardRef(CustomThemeButton)>
  <AnimateHeight
    animateOpacity={false}
    animationStateClasses={
      Object {
        "animating": "rah-animating",
        "animatingDown": "rah-animating--down",
        "animatingToHeightAuto": "rah-animating--to-height-auto",
        "animatingToHeightSpecific": "rah-animating--to-height-specific",
        "animatingToHeightZero": "rah-animating--to-height-zero",
        "animatingUp": "rah-animating--up",
        "static": "rah-static",
        "staticHeightAuto": "rah-static--height-auto",
        "staticHeightSpecific": "rah-static--height-specific",
        "staticHeightZero": "rah-static--height-zero",
      }
    }
    applyInlineTransitions={true}
    delay={0}
    duration={200}
    easing="linear"
    height={0}
    style={Object {}}
  >
    <div
      aria-hidden={true}
      className="rah-static rah-static--height-zero"
      style={
        Object {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <div
        style={Object {}}
      >
         
        <styled.div>
          <div
            className="c0"
          >
            <Memo(CopyableCodeBlock)
              content="{
	\\"sub\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}:{stepUuid}\\",
	\\"aud\\": \\"ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a\\",
	\\"stepUuid\\": \\"{xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx}\\",
	\\"iss\\": \\"https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc\\",
	\\"repositoryUuid\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}\\",
	\\"branchName\\": \\"xxxxxxxxx\\",
	\\"exp\\": \\"xxxxxxxxxx\\",
	\\"iat\\": \\"xxxxxxxxxx\\",
	\\"pipelineUuid\\": \\"{xxxxx-xxxxx-xxxx-xxxx-xxxxxxxxxxx}\\",
	\\"workspaceUuid\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}\\"
}"
              language="json"
              name="claim"
              showLineNumbers={true}
            >
              <styled.div>
                <div
                  className="c1"
                >
                  <CodeBlock
                    language="json"
                    showLineNumbers={true}
                    text="{
	\\"sub\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}:{stepUuid}\\",
	\\"aud\\": \\"ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a\\",
	\\"stepUuid\\": \\"{xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx}\\",
	\\"iss\\": \\"https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc\\",
	\\"repositoryUuid\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}\\",
	\\"branchName\\": \\"xxxxxxxxx\\",
	\\"exp\\": \\"xxxxxxxxxx\\",
	\\"iat\\": \\"xxxxxxxxxx\\",
	\\"pipelineUuid\\": \\"{xxxxx-xxxxx-xxxx-xxxx-xxxxxxxxxxx}\\",
	\\"workspaceUuid\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}\\"
}"
                  >
                    <ReactAsyncHighlighter
                      PreTag="span"
                      className="emotion-11"
                      data-code-lang="json"
                      data-ds--code--code-block=""
                      language="json"
                      lineProps={[Function]}
                      showLineNumbers={true}
                      useInlineStyles={false}
                      wrapLines={false}
                    >
                      <SyntaxHighlighter
                        PreTag="span"
                        astGenerator={null}
                        className="emotion-11"
                        data-code-lang="json"
                        data-ds--code--code-block=""
                        language="json"
                        lineProps={[Function]}
                        showLineNumbers={true}
                        useInlineStyles={false}
                        wrapLines={false}
                      >
                        <span
                          className="prismjs emotion-11"
                          data-code-lang="json"
                          data-ds--code--code-block=""
                          style={Object {}}
                        >
                          <AllLineNumbers
                            codeString="{
	\\"sub\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}:{stepUuid}\\",
	\\"aud\\": \\"ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a\\",
	\\"stepUuid\\": \\"{xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx}\\",
	\\"iss\\": \\"https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc\\",
	\\"repositoryUuid\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}\\",
	\\"branchName\\": \\"xxxxxxxxx\\",
	\\"exp\\": \\"xxxxxxxxxx\\",
	\\"iat\\": \\"xxxxxxxxxx\\",
	\\"pipelineUuid\\": \\"{xxxxx-xxxxx-xxxx-xxxx-xxxxxxxxxxx}\\",
	\\"workspaceUuid\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}\\"
}"
                            codeStyle={Object {}}
                            numberStyle={Object {}}
                            startingLineNumber={1}
                          >
                            <code
                              style={
                                Object {
                                  "float": "left",
                                  "paddingRight": "10px",
                                }
                              }
                            >
                              <span
                                className="react-syntax-highlighter-line-number"
                                key="line-0"
                                style={Object {}}
                              >
                                1

                              </span>
                              <span
                                className="react-syntax-highlighter-line-number"
                                key="line-1"
                                style={Object {}}
                              >
                                2

                              </span>
                              <span
                                className="react-syntax-highlighter-line-number"
                                key="line-2"
                                style={Object {}}
                              >
                                3

                              </span>
                              <span
                                className="react-syntax-highlighter-line-number"
                                key="line-3"
                                style={Object {}}
                              >
                                4

                              </span>
                              <span
                                className="react-syntax-highlighter-line-number"
                                key="line-4"
                                style={Object {}}
                              >
                                5

                              </span>
                              <span
                                className="react-syntax-highlighter-line-number"
                                key="line-5"
                                style={Object {}}
                              >
                                6

                              </span>
                              <span
                                className="react-syntax-highlighter-line-number"
                                key="line-6"
                                style={Object {}}
                              >
                                7

                              </span>
                              <span
                                className="react-syntax-highlighter-line-number"
                                key="line-7"
                                style={Object {}}
                              >
                                8

                              </span>
                              <span
                                className="react-syntax-highlighter-line-number"
                                key="line-8"
                                style={Object {}}
                              >
                                9

                              </span>
                              <span
                                className="react-syntax-highlighter-line-number"
                                key="line-9"
                                style={Object {}}
                              >
                                10

                              </span>
                              <span
                                className="react-syntax-highlighter-line-number"
                                key="line-10"
                                style={Object {}}
                              >
                                11

                              </span>
                              <span
                                className="react-syntax-highlighter-line-number"
                                key="line-11"
                                style={Object {}}
                              >
                                12

                              </span>
                            </code>
                          </AllLineNumbers>
                          <code
                            className="language-json"
                            style={Object {}}
                          >
                            {
	"sub": "{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}:{stepUuid}",
	"aud": "ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a",
	"stepUuid": "{xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx}",
	"iss": "https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc",
	"repositoryUuid": "{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}",
	"branchName": "xxxxxxxxx",
	"exp": "xxxxxxxxxx",
	"iat": "xxxxxxxxxx",
	"pipelineUuid": "{xxxxx-xxxxx-xxxx-xxxx-xxxxxxxxxxx}",
	"workspaceUuid": "{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}"
}
                          </code>
                        </span>
                      </SyntaxHighlighter>
                    </ReactAsyncHighlighter>
                  </CodeBlock>
                  <Memo(CopyButton)
                    content="{
	\\"sub\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}:{stepUuid}\\",
	\\"aud\\": \\"ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a\\",
	\\"stepUuid\\": \\"{xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx}\\",
	\\"iss\\": \\"https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc\\",
	\\"repositoryUuid\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}\\",
	\\"branchName\\": \\"xxxxxxxxx\\",
	\\"exp\\": \\"xxxxxxxxxx\\",
	\\"iat\\": \\"xxxxxxxxxx\\",
	\\"pipelineUuid\\": \\"{xxxxx-xxxxx-xxxx-xxxx-xxxxxxxxxxx}\\",
	\\"workspaceUuid\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}\\"
}"
                    name="claim"
                  >
                    <Tooltip
                      content="Copy"
                      position="right"
                    >
                      <div
                        onBlur={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onMouseDown={[Function]}
                        onMouseOut={[Function]}
                        onMouseOver={[Function]}
                        role="presentation"
                      >
                        <styled.div
                          onClick={[Function]}
                        >
                          <div
                            className="c2"
                            onClick={[Function]}
                          >
                            <styled.div>
                              <div
                                className="c3"
                              >
                                <CopyIcon
                                  label="Copy claim"
                                  size="small"
                                >
                                  <Memo(Icon)
                                    dangerouslySetGlyph="<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>"
                                    label="Copy claim"
                                    size="small"
                                  >
                                    <span
                                      aria-label="Copy claim"
                                      className="emotion-3"
                                      dangerouslySetInnerHTML={
                                        Object {
                                          "__html": "<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>",
                                        }
                                      }
                                      role="img"
                                      style={
                                        Object {
                                          "--icon-primary-color": "currentColor",
                                          "--icon-secondary-color": "var(--background-default, #FFFFFF)",
                                        }
                                      }
                                    />
                                  </Memo(Icon)>
                                </CopyIcon>
                              </div>
                            </styled.div>
                          </div>
                        </styled.div>
                      </div>
                    </Tooltip>
                  </Memo(CopyButton)>
                </div>
              </styled.div>
            </Memo(CopyableCodeBlock)>
          </div>
        </styled.div>
      </div>
    </div>
  </AnimateHeight>
  <styled.div>
    <div
      className="c0"
    >
      <h5>
        UUIDs
      </h5>
      <styled.hr>
        <hr
          className="c6"
        />
      </styled.hr>
      <styled.div>
        <div
          className="c7"
        >
          <styled.div>
            <div
              className="c8"
            >
              Workspace UUID
            </div>
          </styled.div>
          <styled.div>
            <div
              className="c9"
            >
              {3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}
            </div>
          </styled.div>
          <styled.div>
            <div
              className="c10"
            >
              <Memo(CopyButton)
                content="{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}"
                name="accountUuid"
              >
                <Tooltip
                  content="Copy"
                  position="right"
                >
                  <div
                    onBlur={[Function]}
                    onClick={[Function]}
                    onFocus={[Function]}
                    onMouseDown={[Function]}
                    onMouseOut={[Function]}
                    onMouseOver={[Function]}
                    role="presentation"
                  >
                    <styled.div
                      onClick={[Function]}
                    >
                      <div
                        className="c2"
                        onClick={[Function]}
                      >
                        <styled.div>
                          <div
                            className="c3"
                          >
                            <CopyIcon
                              label="Copy accountUuid"
                              size="small"
                            >
                              <Memo(Icon)
                                dangerouslySetGlyph="<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>"
                                label="Copy accountUuid"
                                size="small"
                              >
                                <span
                                  aria-label="Copy accountUuid"
                                  className="emotion-3"
                                  dangerouslySetInnerHTML={
                                    Object {
                                      "__html": "<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>",
                                    }
                                  }
                                  role="img"
                                  style={
                                    Object {
                                      "--icon-primary-color": "currentColor",
                                      "--icon-secondary-color": "var(--background-default, #FFFFFF)",
                                    }
                                  }
                                />
                              </Memo(Icon)>
                            </CopyIcon>
                          </div>
                        </styled.div>
                      </div>
                    </styled.div>
                  </div>
                </Tooltip>
              </Memo(CopyButton)>
            </div>
          </styled.div>
        </div>
      </styled.div>
      <styled.div>
        <div
          className="c7"
        >
          <styled.div>
            <div
              className="c8"
            >
              Repository UUID
            </div>
          </styled.div>
          <styled.div>
            <div
              className="c9"
            >
              {3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}
            </div>
          </styled.div>
          <styled.div>
            <div
              className="c10"
            >
              <Memo(CopyButton)
                content="{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}"
                name="repoUuid"
              >
                <Tooltip
                  content="Copy"
                  position="right"
                >
                  <div
                    onBlur={[Function]}
                    onClick={[Function]}
                    onFocus={[Function]}
                    onMouseDown={[Function]}
                    onMouseOut={[Function]}
                    onMouseOver={[Function]}
                    role="presentation"
                  >
                    <styled.div
                      onClick={[Function]}
                    >
                      <div
                        className="c2"
                        onClick={[Function]}
                      >
                        <styled.div>
                          <div
                            className="c3"
                          >
                            <CopyIcon
                              label="Copy repoUuid"
                              size="small"
                            >
                              <Memo(Icon)
                                dangerouslySetGlyph="<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>"
                                label="Copy repoUuid"
                                size="small"
                              >
                                <span
                                  aria-label="Copy repoUuid"
                                  className="emotion-3"
                                  dangerouslySetInnerHTML={
                                    Object {
                                      "__html": "<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>",
                                    }
                                  }
                                  role="img"
                                  style={
                                    Object {
                                      "--icon-primary-color": "currentColor",
                                      "--icon-secondary-color": "var(--background-default, #FFFFFF)",
                                    }
                                  }
                                />
                              </Memo(Icon)>
                            </CopyIcon>
                          </div>
                        </styled.div>
                      </div>
                    </styled.div>
                  </div>
                </Tooltip>
              </Memo(CopyButton)>
            </div>
          </styled.div>
        </div>
      </styled.div>
    </div>
  </styled.div>
</Memo(OpenIDConnectConfiguration)>
`;

exports[`<OpenIdConnectPage /> should render component with claim expanded 1`] = `
.emotion-0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  line-height: 20px;
  overflow-x: auto;
  white-space: pre;
  font-size: 12px;
  font-family: 'SFMono-Medium','SF Mono','Segoe UI Mono','Roboto Mono','Ubuntu Mono',Menlo,Consolas,Courier,monospace;
  font-weight: normal;
  background-color: var(--ds--code--bg-color,#F4F5F7);
  color: #172B4D;
  border-style: none;
  border-radius: 3px;
}

.emotion-0 code[class*="language-"],
.emotion-0 pre[class*="language-"],
.emotion-0 code {
  all: unset;
  padding: 8px 0;
}

.emotion-0 .token:not([class=token],[data-ds--code--row--highlight]) {
  all: unset;
}

.emotion-0 .token.key,
.emotion-0 .token.keyword {
  color: #0052CC;
  font-weight: bolder;
}

.emotion-0 .token.attr-name {
  color: #067384;
}

.emotion-0 .token.selector {
  color: #0052CC;
}

.emotion-0 .token.comment,
.emotion-0 .token.block-comment {
  color: #505F79;
  font-family: SFMono-MediumItalic,'SFMono-Medium','SF Mono','Segoe UI Mono','Roboto Mono','Ubuntu Mono',Menlo,Consolas,Courier,monospace;
  font-style: italic;
}

.emotion-0 .token.function-name {
  color: #6554C0;
}

.emotion-0 .token.doctype {
  color: #7A5D1A;
}

.emotion-0 .token.substr {
  color: #505F79;
}

.emotion-0 .token.namespace {
  color: #0052CC;
}

.emotion-0 .token.builtin {
  color: #0052CC;
}

.emotion-0 .token.entity {
  color: #0052CC;
}

.emotion-0 .token.bullet {
  color: #0052CC;
}

.emotion-0 .token.code {
  color: #0052CC;
}

.emotion-0 .token.regex {
  color: #067384;
}

.emotion-0 .token.symbol {
  color: #067384;
}

.emotion-0 .token.variable {
  color: #067384;
}

.emotion-0 .token.url {
  color: #6554C0;
}

.emotion-0 .token.selector-attr {
  color: #067384;
}

.emotion-0 .token.selector-pseudo {
  color: #067384;
}

.emotion-0 .token.type {
  color: #067384;
}

.emotion-0 .token.quote {
  color: #067384;
}

.emotion-0 .token.tag {
  color: #067384;
}

.emotion-0 .token.string {
  color: #006644;
}

.emotion-0 .token.class-name {
  color: #6554C0;
}

.emotion-0 .token.title {
  color: #6554C0;
}

.emotion-0 .token.section {
  color: #6554C0;
}

.emotion-0 .token.meta-keyword {
  color: #006644;
}

.emotion-0 .token.meta {
  color: #505F79;
}

.emotion-0 .token.italic {
  font-style: italic;
}

.emotion-0 .token.bold {
  font-weight: bolder;
}

.emotion-0 .token.function {
  color: #172B4D;
}

.emotion-0 .token.number {
  color: #0052CC;
}

.emotion-0 .token.attr-value {
  color: #067384;
}

.emotion-0 .token.prolog {
  color: #0052CC;
}

.emotion-0 .token.cdata {
  color: #505F79;
}

.emotion-0 .token.punctuation {
  color: #172B4D;
}

.emotion-0 .token.property {
  color: #6554C0;
}

.emotion-0 .token.constant {
  color: #067384;
}

.emotion-0 .token.deleted {
  color: #BF2600;
}

.emotion-0 .token.boolean {
  color: #0747A6;
}

.emotion-0 .token.char {
  color: #172B4D;
}

.emotion-0 .token.inserted {
  color: #006644;
}

.emotion-0 .token.operator {
  color: #172B4D;
}

.emotion-0 .token.atrule {
  color: #006644;
}

.emotion-0 .token.important {
  color: #7A5D1A;
  font-weight: bold;
}

.emotion-0 .linenumber,
.emotion-0 .react-syntax-highlighter-line-number {
  min-width: calc(1ch + 16px) !important;
  font-style: normal !important;
  color: #505F79 !important;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  box-sizing: border-box;
  padding-right: 8px !important;
  padding-left: 8px;
  margin-right: 8px;
  text-align: right;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  display: block;
}

.emotion-0 .linenumber {
  display: inline-block !important;
}

.emotion-0 [data-ds--code--row] {
  display: block;
  padding-right: 8px !important;
  margin-right: -8px;
}

.emotion-0 [data-ds--code--row--highlight] {
  background: #EBECF0;
}

.emotion-0 [data-ds--code--row--highlight]::before,
.emotion-0 [data-ds--code--row--highlight]::after {
  -webkit-clip-path: inset(100%);
  clip-path: inset(100%);
  -webkit-clip: rect(1px,1px,1px,1px);
  clip: rect(1px,1px,1px,1px);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.emotion-0 [data-ds--code--row--highlight]::before {
  content: ", Highlight start, ";
}

.emotion-0 [data-ds--code--row--highlight]::after {
  content: ", Highlight end, ";
}

.emotion-0 [data-ds--code--row--highlight] .linenumber {
  border-left: 4px solid #2684FF;
  padding-left: 4px !important;
  position: relative;
}

.emotion-0 [data-ds--code--row--highlight] .linenumber::before {
  content: "";
  position: absolute;
  width: 4px;
  top: -1px;
  left: -4px;
  border-top: 1px solid #2684FF;
}

.emotion-0 [data-ds--code--row--highlight] + [data-ds--code--row]:not([data-ds--code--row--highlight]),
.emotion-0 [data-ds--code--row]:not([data-ds--code--row--highlight]) + [data-ds--code--row--highlight] {
  border-top: 1px dashed transparent;
}

.emotion-0 [data-ds--code--row--highlight]:last-child {
  border-bottom: 1px dashed transparent;
}

.emotion-0 code:first-of-type {
  padding-right: 0px !important;
  background-image: linear-gradient(to right,var(--ds--code--line-number-bg-color,#EBECF0),var(--ds--code--line-number-bg-color,#EBECF0) calc(1ch + 16px),transparent calc(1ch + 16px),transparent);
}

.emotion-0 code:last-of-type {
  padding-right: 8px !important;
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
}

.emotion-3 {
  display: inline-block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  line-height: 1;
  width: 16px;
  height: 16px;
}

.emotion-3 > svg {
  overflow: hidden;
  pointer-events: none;
  max-width: 100%;
  max-height: 100%;
  color: var(--icon-primary-color);
  fill: var(--icon-secondary-color);
  vertical-align: bottom;
}

.emotion-3 > svg stop {
  stop-color: currentColor;
}

@media screen and (forced-colors:active) {
  .emotion-3 > svg {
    -webkit-filter: grayscale(1);
    filter: grayscale(1);
    --icon-primary-color: CanvasText;
    --icon-secondary-color: Canvas;
  }
}

.emotion-3 > svg {
  width: 16px;
  height: 16px;
}

.emotion-10,
.emotion-10:hover,
.emotion-10:active,
.emotion-10:focus,
.emotion-10:visited,
.emotion-10:disabled,
.emotion-10[disabled] {
  -webkit-align-items: baseline;
  -webkit-box-align: baseline;
  -ms-flex-align: baseline;
  align-items: baseline;
  border-width: 0;
  border-radius: 3px;
  box-sizing: border-box;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  font-size: inherit;
  font-style: normal;
  font-family: inherit;
  font-weight: 500;
  max-width: 100%;
  position: relative;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background 0.1s ease-out,box-shadow 0.15s cubic-bezier(0.47,0.03,0.49,1.38);
  transition: background 0.1s ease-out,box-shadow 0.15s cubic-bezier(0.47,0.03,0.49,1.38);
  white-space: nowrap;
  background: none;
  color: var(--text-highEmphasis,#42526E) !important;
  cursor: pointer;
  height: 2.2857142857142856em;
  line-height: 2.2857142857142856em;
  padding: 0 10px;
  vertical-align: middle;
  width: auto;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  outline: none;
  margin: 10px 0px -10px 0px;
}

.emotion-10::-moz-focus-inner,
.emotion-10:hover::-moz-focus-inner,
.emotion-10:active::-moz-focus-inner,
.emotion-10:focus::-moz-focus-inner,
.emotion-10:visited::-moz-focus-inner,
.emotion-10:disabled::-moz-focus-inner,
.emotion-10[disabled]::-moz-focus-inner {
  border: 0;
  margin: 0;
  padding: 0;
}

.emotion-9 {
  -webkit-transition: opacity 0.3s;
  transition: opacity 0.3s;
  opacity: 1;
  margin: 0 2px;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  -webkit-flex-shrink: 1;
  -ms-flex-negative: 1;
  flex-shrink: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.emotion-8 {
  display: inline-block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  line-height: 1;
  width: 32px;
  height: 32px;
}

.emotion-8 > svg {
  overflow: hidden;
  pointer-events: none;
  max-width: 100%;
  max-height: 100%;
  color: var(--icon-primary-color);
  fill: var(--icon-secondary-color);
  vertical-align: bottom;
}

.emotion-8 > svg stop {
  stop-color: currentColor;
}

@media screen and (forced-colors:active) {
  .emotion-8 > svg {
    -webkit-filter: grayscale(1);
    filter: grayscale(1);
    --icon-primary-color: CanvasText;
    --icon-secondary-color: Canvas;
  }
}

.emotion-8 > svg {
  width: 32px;
  height: 32px;
}

.emotion-11 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  line-height: 20px;
  overflow-x: auto;
  white-space: pre;
  font-size: 12px;
  font-family: 'SFMono-Medium','SF Mono','Segoe UI Mono','Roboto Mono','Ubuntu Mono',Menlo,Consolas,Courier,monospace;
  font-weight: normal;
  background-color: var(--ds--code--bg-color,#F4F5F7);
  color: #172B4D;
  border-style: none;
  border-radius: 3px;
}

.emotion-11 code[class*="language-"],
.emotion-11 pre[class*="language-"],
.emotion-11 code {
  all: unset;
  padding: 8px 0;
}

.emotion-11 .token:not([class=token],[data-ds--code--row--highlight]) {
  all: unset;
}

.emotion-11 .token.key,
.emotion-11 .token.keyword {
  color: #0052CC;
  font-weight: bolder;
}

.emotion-11 .token.attr-name {
  color: #067384;
}

.emotion-11 .token.selector {
  color: #0052CC;
}

.emotion-11 .token.comment,
.emotion-11 .token.block-comment {
  color: #505F79;
  font-family: SFMono-MediumItalic,'SFMono-Medium','SF Mono','Segoe UI Mono','Roboto Mono','Ubuntu Mono',Menlo,Consolas,Courier,monospace;
  font-style: italic;
}

.emotion-11 .token.function-name {
  color: #6554C0;
}

.emotion-11 .token.doctype {
  color: #7A5D1A;
}

.emotion-11 .token.substr {
  color: #505F79;
}

.emotion-11 .token.namespace {
  color: #0052CC;
}

.emotion-11 .token.builtin {
  color: #0052CC;
}

.emotion-11 .token.entity {
  color: #0052CC;
}

.emotion-11 .token.bullet {
  color: #0052CC;
}

.emotion-11 .token.code {
  color: #0052CC;
}

.emotion-11 .token.regex {
  color: #067384;
}

.emotion-11 .token.symbol {
  color: #067384;
}

.emotion-11 .token.variable {
  color: #067384;
}

.emotion-11 .token.url {
  color: #6554C0;
}

.emotion-11 .token.selector-attr {
  color: #067384;
}

.emotion-11 .token.selector-pseudo {
  color: #067384;
}

.emotion-11 .token.type {
  color: #067384;
}

.emotion-11 .token.quote {
  color: #067384;
}

.emotion-11 .token.tag {
  color: #067384;
}

.emotion-11 .token.string {
  color: #006644;
}

.emotion-11 .token.class-name {
  color: #6554C0;
}

.emotion-11 .token.title {
  color: #6554C0;
}

.emotion-11 .token.section {
  color: #6554C0;
}

.emotion-11 .token.meta-keyword {
  color: #006644;
}

.emotion-11 .token.meta {
  color: #505F79;
}

.emotion-11 .token.italic {
  font-style: italic;
}

.emotion-11 .token.bold {
  font-weight: bolder;
}

.emotion-11 .token.function {
  color: #172B4D;
}

.emotion-11 .token.number {
  color: #0052CC;
}

.emotion-11 .token.attr-value {
  color: #067384;
}

.emotion-11 .token.prolog {
  color: #0052CC;
}

.emotion-11 .token.cdata {
  color: #505F79;
}

.emotion-11 .token.punctuation {
  color: #172B4D;
}

.emotion-11 .token.property {
  color: #6554C0;
}

.emotion-11 .token.constant {
  color: #067384;
}

.emotion-11 .token.deleted {
  color: #BF2600;
}

.emotion-11 .token.boolean {
  color: #0747A6;
}

.emotion-11 .token.char {
  color: #172B4D;
}

.emotion-11 .token.inserted {
  color: #006644;
}

.emotion-11 .token.operator {
  color: #172B4D;
}

.emotion-11 .token.atrule {
  color: #006644;
}

.emotion-11 .token.important {
  color: #7A5D1A;
  font-weight: bold;
}

.emotion-11 .linenumber,
.emotion-11 .react-syntax-highlighter-line-number {
  min-width: calc(2ch + 16px) !important;
  font-style: normal !important;
  color: #505F79 !important;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  box-sizing: border-box;
  padding-right: 8px !important;
  padding-left: 8px;
  margin-right: 8px;
  text-align: right;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  display: block;
}

.emotion-11 .linenumber {
  display: inline-block !important;
}

.emotion-11 [data-ds--code--row] {
  display: block;
  padding-right: 8px !important;
  margin-right: -8px;
}

.emotion-11 [data-ds--code--row--highlight] {
  background: #EBECF0;
}

.emotion-11 [data-ds--code--row--highlight]::before,
.emotion-11 [data-ds--code--row--highlight]::after {
  -webkit-clip-path: inset(100%);
  clip-path: inset(100%);
  -webkit-clip: rect(1px,1px,1px,1px);
  clip: rect(1px,1px,1px,1px);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.emotion-11 [data-ds--code--row--highlight]::before {
  content: ", Highlight start, ";
}

.emotion-11 [data-ds--code--row--highlight]::after {
  content: ", Highlight end, ";
}

.emotion-11 [data-ds--code--row--highlight] .linenumber {
  border-left: 4px solid #2684FF;
  padding-left: 4px !important;
  position: relative;
}

.emotion-11 [data-ds--code--row--highlight] .linenumber::before {
  content: "";
  position: absolute;
  width: 4px;
  top: -1px;
  left: -4px;
  border-top: 1px solid #2684FF;
}

.emotion-11 [data-ds--code--row--highlight] + [data-ds--code--row]:not([data-ds--code--row--highlight]),
.emotion-11 [data-ds--code--row]:not([data-ds--code--row--highlight]) + [data-ds--code--row--highlight] {
  border-top: 1px dashed transparent;
}

.emotion-11 [data-ds--code--row--highlight]:last-child {
  border-bottom: 1px dashed transparent;
}

.emotion-11 code:first-of-type {
  padding-right: 0px !important;
  background-image: linear-gradient(to right,var(--ds--code--line-number-bg-color,#EBECF0),var(--ds--code--line-number-bg-color,#EBECF0) calc(2ch + 16px),transparent calc(2ch + 16px),transparent);
}

.emotion-11 code:last-of-type {
  padding-right: 8px !important;
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
}

.c0 {
  margin-top: 24px;
}

.c0 h5 {
  color: #6B778C;
}

.c7 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  margin: 5px 0;
}

.c8 {
  width: 50%;
  margin-top: 15px;
}

.c9 {
  width: 47%;
  margin-top: 15px;
}

.c10 {
  width: 3%;
  margin-top: 7px;
  padding-left: 10px;
}

.c6 {
  margin-top: 7px;
  width: 99.5%;
  left: 0px;
  position: absolute;
  border: solid 1px #DFE1E6;
}

.c5 {
  -webkit-transform: translate3d(0,0,0);
  -ms-transform: translate3d(0,0,0);
  transform: translate3d(0,0,0);
  -webkit-transform: rotateZ(90deg);
  -ms-transform: rotateZ(90deg);
  transform: rotateZ(90deg);
  -webkit-transition: -webkit-transform 0.2s ease-in-out;
  -webkit-transition: transform 0.2s ease-in-out;
  transition: transform 0.2s ease-in-out;
  height: 32px;
  margin-top: 9px;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  margin: -8px 0px 7px -10px;
}

.c2 {
  border-radius: 3px;
  width: 24px;
  height: 24px;
  cursor: pointer;
  margin-top: 3px;
  margin-right: 3px;
}

.c3 {
  padding-top: 5.6px;
  padding-left: 4px;
}

.c1 {
  margin: 14px 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  background-color: #F4F5F7;
}

<Memo(OpenIDConnectConfiguration)
  accountName="test"
  accountUuid="{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}"
  connectEnvironment="PRODUCTION"
  deploymentEnvironments={Array []}
  repositoryUuid="{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}"
>
  <h3>
    Identity provider
  </h3>
  <styled.div>
    <div
      className="c0"
    >
      <h5>
        Identity provider URL
      </h5>
      <Memo(CopyableCodeBlock)
        content="https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc"
        language="html"
        name="identityProviderURL"
        showLineNumbers={true}
      >
        <styled.div>
          <div
            className="c1"
          >
            <CodeBlock
              language="html"
              showLineNumbers={true}
              text="https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc"
            >
              <ReactAsyncHighlighter
                PreTag="span"
                className="emotion-0"
                data-code-lang="xml"
                data-ds--code--code-block=""
                language="xml"
                lineProps={[Function]}
                showLineNumbers={true}
                useInlineStyles={false}
                wrapLines={false}
              >
                <SyntaxHighlighter
                  PreTag="span"
                  astGenerator={
                    Object {
                      "alias": [Function],
                      "highlight": [Function],
                      "listLanguages": [Function],
                      "register": [Function],
                      "registered": [Function],
                    }
                  }
                  className="emotion-0"
                  data-code-lang="xml"
                  data-ds--code--code-block=""
                  language="xml"
                  lineProps={[Function]}
                  showLineNumbers={true}
                  useInlineStyles={false}
                  wrapLines={false}
                >
                  <span
                    className="prismjs emotion-0"
                    data-code-lang="xml"
                    data-ds--code--code-block=""
                    style={Object {}}
                  >
                    <code
                      className="language-xml"
                      style={
                        Object {
                          "whiteSpace": "pre",
                        }
                      }
                    >
                      <span
                        className="comment linenumber react-syntax-highlighter-line-number"
                        key="line-number--1"
                        style={
                          Object {
                            "display": "inline-block",
                            "minWidth": "1.25em",
                            "paddingRight": "1em",
                            "textAlign": "right",
                            "userSelect": "none",
                          }
                        }
                      >
                        1
                      </span>
                      <span
                        className=""
                        key="code-segement1"
                      >
                        https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc
                      </span>
                    </code>
                  </span>
                </SyntaxHighlighter>
              </ReactAsyncHighlighter>
            </CodeBlock>
            <Memo(CopyButton)
              content="https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc"
              name="identityProviderURL"
            >
              <Tooltip
                content="Copy"
                position="right"
              >
                <div
                  onBlur={[Function]}
                  onClick={[Function]}
                  onFocus={[Function]}
                  onMouseDown={[Function]}
                  onMouseOut={[Function]}
                  onMouseOver={[Function]}
                  role="presentation"
                >
                  <styled.div
                    onClick={[Function]}
                  >
                    <div
                      className="c2"
                      onClick={[Function]}
                    >
                      <styled.div>
                        <div
                          className="c3"
                        >
                          <CopyIcon
                            label="Copy identityProviderURL"
                            size="small"
                          >
                            <Memo(Icon)
                              dangerouslySetGlyph="<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>"
                              label="Copy identityProviderURL"
                              size="small"
                            >
                              <span
                                aria-label="Copy identityProviderURL"
                                className="emotion-3"
                                dangerouslySetInnerHTML={
                                  Object {
                                    "__html": "<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>",
                                  }
                                }
                                role="img"
                                style={
                                  Object {
                                    "--icon-primary-color": "currentColor",
                                    "--icon-secondary-color": "var(--background-default, #FFFFFF)",
                                  }
                                }
                              />
                            </Memo(Icon)>
                          </CopyIcon>
                        </div>
                      </styled.div>
                    </div>
                  </styled.div>
                </div>
              </Tooltip>
            </Memo(CopyButton)>
          </div>
        </styled.div>
      </Memo(CopyableCodeBlock)>
    </div>
  </styled.div>
  <styled.div>
    <div
      className="c0"
    >
      <h5>
        Audience
      </h5>
      <Memo(CopyableCodeBlock)
        content="ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a"
        language="html"
        name="audience"
        showLineNumbers={true}
      >
        <styled.div>
          <div
            className="c1"
          >
            <CodeBlock
              language="html"
              showLineNumbers={true}
              text="ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a"
            >
              <ReactAsyncHighlighter
                PreTag="span"
                className="emotion-0"
                data-code-lang="xml"
                data-ds--code--code-block=""
                language="xml"
                lineProps={[Function]}
                showLineNumbers={true}
                useInlineStyles={false}
                wrapLines={false}
              >
                <SyntaxHighlighter
                  PreTag="span"
                  astGenerator={
                    Object {
                      "alias": [Function],
                      "highlight": [Function],
                      "listLanguages": [Function],
                      "register": [Function],
                      "registered": [Function],
                    }
                  }
                  className="emotion-0"
                  data-code-lang="xml"
                  data-ds--code--code-block=""
                  language="xml"
                  lineProps={[Function]}
                  showLineNumbers={true}
                  useInlineStyles={false}
                  wrapLines={false}
                >
                  <span
                    className="prismjs emotion-0"
                    data-code-lang="xml"
                    data-ds--code--code-block=""
                    style={Object {}}
                  >
                    <code
                      className="language-xml"
                      style={
                        Object {
                          "whiteSpace": "pre",
                        }
                      }
                    >
                      <span
                        className="comment linenumber react-syntax-highlighter-line-number"
                        key="line-number--1"
                        style={
                          Object {
                            "display": "inline-block",
                            "minWidth": "1.25em",
                            "paddingRight": "1em",
                            "textAlign": "right",
                            "userSelect": "none",
                          }
                        }
                      >
                        1
                      </span>
                      <span
                        className=""
                        key="code-segement1"
                      >
                        ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a
                      </span>
                    </code>
                  </span>
                </SyntaxHighlighter>
              </ReactAsyncHighlighter>
            </CodeBlock>
            <Memo(CopyButton)
              content="ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a"
              name="audience"
            >
              <Tooltip
                content="Copy"
                position="right"
              >
                <div
                  onBlur={[Function]}
                  onClick={[Function]}
                  onFocus={[Function]}
                  onMouseDown={[Function]}
                  onMouseOut={[Function]}
                  onMouseOver={[Function]}
                  role="presentation"
                >
                  <styled.div
                    onClick={[Function]}
                  >
                    <div
                      className="c2"
                      onClick={[Function]}
                    >
                      <styled.div>
                        <div
                          className="c3"
                        >
                          <CopyIcon
                            label="Copy audience"
                            size="small"
                          >
                            <Memo(Icon)
                              dangerouslySetGlyph="<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>"
                              label="Copy audience"
                              size="small"
                            >
                              <span
                                aria-label="Copy audience"
                                className="emotion-3"
                                dangerouslySetInnerHTML={
                                  Object {
                                    "__html": "<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>",
                                  }
                                }
                                role="img"
                                style={
                                  Object {
                                    "--icon-primary-color": "currentColor",
                                    "--icon-secondary-color": "var(--background-default, #FFFFFF)",
                                  }
                                }
                              />
                            </Memo(Icon)>
                          </CopyIcon>
                        </div>
                      </styled.div>
                    </div>
                  </styled.div>
                </div>
              </Tooltip>
            </Memo(CopyButton)>
          </div>
        </styled.div>
      </Memo(CopyableCodeBlock)>
    </div>
  </styled.div>
  <h3>
    Unique identifiers
  </h3>
  <ForwardRef(CustomThemeButton)
    appearance="subtle"
    name="claim"
    onClick={[Function]}
    theme={[Function]}
  >
    <Provider
      value={[Function]}
    >
      <Consumer>
        <Consumer
          appearance="subtle"
          autoFocus={false}
          iconIsOnlyChild={false}
          isDisabled={false}
          isLoading={false}
          isSelected={false}
          mode="light"
          name="claim"
          onClick={[Function]}
          shouldFitContainer={false}
          spacing="default"
          state="default"
        >
          <ForwardRef(ButtonBase)
            appearance="subtle"
            autoFocus={false}
            buttonCss={
              Object {
                "&, &:hover, &:active, &:focus, &:visited, &:disabled, &[disabled]": Object {
                  "&::-moz-focus-inner": Object {
                    "border": 0,
                    "margin": 0,
                    "padding": 0,
                  },
                  "alignItems": "baseline",
                  "background": "none",
                  "borderRadius": 3,
                  "borderWidth": 0,
                  "boxSizing": "border-box",
                  "color": "var(--text-highEmphasis, #42526E) !important",
                  "cursor": "pointer",
                  "display": "inline-flex",
                  "fontFamily": "inherit",
                  "fontSize": "inherit",
                  "fontStyle": "normal",
                  "fontWeight": 500,
                  "height": "2.2857142857142856em",
                  "justifyContent": "center",
                  "lineHeight": "2.2857142857142856em",
                  "margin": "10px 0px -10px 0px",
                  "maxWidth": "100%",
                  "outline": "none",
                  "padding": "0 10px",
                  "position": "relative",
                  "textAlign": "center",
                  "textDecoration": "none",
                  "transition": "background 0.1s ease-out, box-shadow 0.15s cubic-bezier(0.47, 0.03, 0.49, 1.38)",
                  "verticalAlign": "middle",
                  "whiteSpace": "nowrap",
                  "width": "auto",
                },
              }
            }
            isDisabled={false}
            isSelected={false}
            name="claim"
            onBlur={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onMouseDown={[Function]}
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
            overlay={null}
            shouldFitContainer={false}
            spacing="default"
          >
            <button
              className="emotion-10"
              disabled={false}
              name="claim"
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="emotion-9"
              >
                <styled.div>
                  <div
                    className="c4"
                  >
                    <styled.div
                      isExpanded={true}
                    >
                      <div
                        className="c5"
                      >
                        <ChevronRightIcon
                          label="Expand"
                          size="large"
                        >
                          <Memo(Icon)
                            dangerouslySetGlyph="<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><path d=\\"M10.294 9.698a.988.988 0 010-1.407 1.01 1.01 0 011.419 0l2.965 2.94a1.09 1.09 0 010 1.548l-2.955 2.93a1.01 1.01 0 01-1.42 0 .988.988 0 010-1.407l2.318-2.297-2.327-2.307z\\" fill=\\"currentColor\\" fill-rule=\\"evenodd\\"/></svg>"
                            label="Expand"
                            size="large"
                          >
                            <span
                              aria-label="Expand"
                              className="emotion-8"
                              dangerouslySetInnerHTML={
                                Object {
                                  "__html": "<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><path d=\\"M10.294 9.698a.988.988 0 010-1.407 1.01 1.01 0 011.419 0l2.965 2.94a1.09 1.09 0 010 1.548l-2.955 2.93a1.01 1.01 0 01-1.42 0 .988.988 0 010-1.407l2.318-2.297-2.327-2.307z\\" fill=\\"currentColor\\" fill-rule=\\"evenodd\\"/></svg>",
                                }
                              }
                              role="img"
                              style={
                                Object {
                                  "--icon-primary-color": "currentColor",
                                  "--icon-secondary-color": "var(--background-default, #FFFFFF)",
                                }
                              }
                            />
                          </Memo(Icon)>
                        </ChevronRightIcon>
                      </div>
                    </styled.div>
                    <h5>
                      Example payload
                    </h5>
                  </div>
                </styled.div>
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </Consumer>
      </Consumer>
    </Provider>
  </ForwardRef(CustomThemeButton)>
  <AnimateHeight
    animateOpacity={false}
    animationStateClasses={
      Object {
        "animating": "rah-animating",
        "animatingDown": "rah-animating--down",
        "animatingToHeightAuto": "rah-animating--to-height-auto",
        "animatingToHeightSpecific": "rah-animating--to-height-specific",
        "animatingToHeightZero": "rah-animating--to-height-zero",
        "animatingUp": "rah-animating--up",
        "static": "rah-static",
        "staticHeightAuto": "rah-static--height-auto",
        "staticHeightSpecific": "rah-static--height-specific",
        "staticHeightZero": "rah-static--height-zero",
      }
    }
    applyInlineTransitions={true}
    delay={0}
    duration={200}
    easing="linear"
    height="auto"
    style={Object {}}
  >
    <div
      aria-hidden={true}
      className="rah-animating rah-animating--down rah-animating--to-height-auto"
      style={
        Object {
          "WebkitTransition": "height 200ms linear 0ms",
          "height": 0,
          "overflow": "hidden",
          "transition": "height 200ms linear 0ms",
        }
      }
    >
      <div
        style={Object {}}
      >
         
        <styled.div>
          <div
            className="c0"
          >
            <Memo(CopyableCodeBlock)
              content="{
	\\"sub\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}:{stepUuid}\\",
	\\"aud\\": \\"ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a\\",
	\\"stepUuid\\": \\"{xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx}\\",
	\\"iss\\": \\"https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc\\",
	\\"repositoryUuid\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}\\",
	\\"branchName\\": \\"xxxxxxxxx\\",
	\\"exp\\": \\"xxxxxxxxxx\\",
	\\"iat\\": \\"xxxxxxxxxx\\",
	\\"pipelineUuid\\": \\"{xxxxx-xxxxx-xxxx-xxxx-xxxxxxxxxxx}\\",
	\\"workspaceUuid\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}\\"
}"
              language="json"
              name="claim"
              showLineNumbers={true}
            >
              <styled.div>
                <div
                  className="c1"
                >
                  <CodeBlock
                    language="json"
                    showLineNumbers={true}
                    text="{
	\\"sub\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}:{stepUuid}\\",
	\\"aud\\": \\"ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a\\",
	\\"stepUuid\\": \\"{xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx}\\",
	\\"iss\\": \\"https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc\\",
	\\"repositoryUuid\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}\\",
	\\"branchName\\": \\"xxxxxxxxx\\",
	\\"exp\\": \\"xxxxxxxxxx\\",
	\\"iat\\": \\"xxxxxxxxxx\\",
	\\"pipelineUuid\\": \\"{xxxxx-xxxxx-xxxx-xxxx-xxxxxxxxxxx}\\",
	\\"workspaceUuid\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}\\"
}"
                  >
                    <ReactAsyncHighlighter
                      PreTag="span"
                      className="emotion-11"
                      data-code-lang="json"
                      data-ds--code--code-block=""
                      language="json"
                      lineProps={[Function]}
                      showLineNumbers={true}
                      useInlineStyles={false}
                      wrapLines={false}
                    >
                      <SyntaxHighlighter
                        PreTag="span"
                        astGenerator={
                          Object {
                            "alias": [Function],
                            "highlight": [Function],
                            "listLanguages": [Function],
                            "register": [Function],
                            "registered": [Function],
                          }
                        }
                        className="emotion-11"
                        data-code-lang="json"
                        data-ds--code--code-block=""
                        language="json"
                        lineProps={[Function]}
                        showLineNumbers={true}
                        useInlineStyles={false}
                        wrapLines={false}
                      >
                        <span
                          className="prismjs emotion-11"
                          data-code-lang="json"
                          data-ds--code--code-block=""
                          style={Object {}}
                        >
                          <code
                            className="language-json"
                            style={
                              Object {
                                "whiteSpace": "pre",
                              }
                            }
                          >
                            <span
                              className="comment linenumber react-syntax-highlighter-line-number"
                              key="line-number--1"
                              style={
                                Object {
                                  "display": "inline-block",
                                  "minWidth": "2.25em",
                                  "paddingRight": "1em",
                                  "textAlign": "right",
                                  "userSelect": "none",
                                }
                              }
                            >
                              1
                            </span>
                            <span
                              className="token punctuation"
                              key="code-segement1"
                            >
                              {
                            </span>
                            <span
                              className=""
                              key="code-segement2"
                            >
                              

                            </span>
                            <span
                              className="comment linenumber react-syntax-highlighter-line-number"
                              key="line-number--2"
                              style={
                                Object {
                                  "display": "inline-block",
                                  "minWidth": "2.25em",
                                  "paddingRight": "1em",
                                  "textAlign": "right",
                                  "userSelect": "none",
                                }
                              }
                            >
                              2
                            </span>
                            <span
                              className=""
                              key="code-segement4"
                            >
                              	
                            </span>
                            <span
                              className="token property"
                              key="code-segement5"
                            >
                              "sub"
                            </span>
                            <span
                              className="token operator"
                              key="code-segement6"
                            >
                              :
                            </span>
                            <span
                              className=""
                              key="code-segement7"
                            >
                               
                            </span>
                            <span
                              className="token string"
                              key="code-segement8"
                            >
                              "{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}:{stepUuid}"
                            </span>
                            <span
                              className="token punctuation"
                              key="code-segement9"
                            >
                              ,
                            </span>
                            <span
                              className=""
                              key="code-segement10"
                            >
                              

                            </span>
                            <span
                              className="comment linenumber react-syntax-highlighter-line-number"
                              key="line-number--3"
                              style={
                                Object {
                                  "display": "inline-block",
                                  "minWidth": "2.25em",
                                  "paddingRight": "1em",
                                  "textAlign": "right",
                                  "userSelect": "none",
                                }
                              }
                            >
                              3
                            </span>
                            <span
                              className=""
                              key="code-segement12"
                            >
                              	
                            </span>
                            <span
                              className="token property"
                              key="code-segement13"
                            >
                              "aud"
                            </span>
                            <span
                              className="token operator"
                              key="code-segement14"
                            >
                              :
                            </span>
                            <span
                              className=""
                              key="code-segement15"
                            >
                               
                            </span>
                            <span
                              className="token string"
                              key="code-segement16"
                            >
                              "ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a"
                            </span>
                            <span
                              className="token punctuation"
                              key="code-segement17"
                            >
                              ,
                            </span>
                            <span
                              className=""
                              key="code-segement18"
                            >
                              

                            </span>
                            <span
                              className="comment linenumber react-syntax-highlighter-line-number"
                              key="line-number--4"
                              style={
                                Object {
                                  "display": "inline-block",
                                  "minWidth": "2.25em",
                                  "paddingRight": "1em",
                                  "textAlign": "right",
                                  "userSelect": "none",
                                }
                              }
                            >
                              4
                            </span>
                            <span
                              className=""
                              key="code-segement20"
                            >
                              	
                            </span>
                            <span
                              className="token property"
                              key="code-segement21"
                            >
                              "stepUuid"
                            </span>
                            <span
                              className="token operator"
                              key="code-segement22"
                            >
                              :
                            </span>
                            <span
                              className=""
                              key="code-segement23"
                            >
                               
                            </span>
                            <span
                              className="token string"
                              key="code-segement24"
                            >
                              "{xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx}"
                            </span>
                            <span
                              className="token punctuation"
                              key="code-segement25"
                            >
                              ,
                            </span>
                            <span
                              className=""
                              key="code-segement26"
                            >
                              

                            </span>
                            <span
                              className="comment linenumber react-syntax-highlighter-line-number"
                              key="line-number--5"
                              style={
                                Object {
                                  "display": "inline-block",
                                  "minWidth": "2.25em",
                                  "paddingRight": "1em",
                                  "textAlign": "right",
                                  "userSelect": "none",
                                }
                              }
                            >
                              5
                            </span>
                            <span
                              className=""
                              key="code-segement28"
                            >
                              	
                            </span>
                            <span
                              className="token property"
                              key="code-segement29"
                            >
                              "iss"
                            </span>
                            <span
                              className="token operator"
                              key="code-segement30"
                            >
                              :
                            </span>
                            <span
                              className=""
                              key="code-segement31"
                            >
                               
                            </span>
                            <span
                              className="token string"
                              key="code-segement32"
                            >
                              "https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc"
                            </span>
                            <span
                              className="token punctuation"
                              key="code-segement33"
                            >
                              ,
                            </span>
                            <span
                              className=""
                              key="code-segement34"
                            >
                              

                            </span>
                            <span
                              className="comment linenumber react-syntax-highlighter-line-number"
                              key="line-number--6"
                              style={
                                Object {
                                  "display": "inline-block",
                                  "minWidth": "2.25em",
                                  "paddingRight": "1em",
                                  "textAlign": "right",
                                  "userSelect": "none",
                                }
                              }
                            >
                              6
                            </span>
                            <span
                              className=""
                              key="code-segement36"
                            >
                              	
                            </span>
                            <span
                              className="token property"
                              key="code-segement37"
                            >
                              "repositoryUuid"
                            </span>
                            <span
                              className="token operator"
                              key="code-segement38"
                            >
                              :
                            </span>
                            <span
                              className=""
                              key="code-segement39"
                            >
                               
                            </span>
                            <span
                              className="token string"
                              key="code-segement40"
                            >
                              "{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}"
                            </span>
                            <span
                              className="token punctuation"
                              key="code-segement41"
                            >
                              ,
                            </span>
                            <span
                              className=""
                              key="code-segement42"
                            >
                              

                            </span>
                            <span
                              className="comment linenumber react-syntax-highlighter-line-number"
                              key="line-number--7"
                              style={
                                Object {
                                  "display": "inline-block",
                                  "minWidth": "2.25em",
                                  "paddingRight": "1em",
                                  "textAlign": "right",
                                  "userSelect": "none",
                                }
                              }
                            >
                              7
                            </span>
                            <span
                              className=""
                              key="code-segement44"
                            >
                              	
                            </span>
                            <span
                              className="token property"
                              key="code-segement45"
                            >
                              "branchName"
                            </span>
                            <span
                              className="token operator"
                              key="code-segement46"
                            >
                              :
                            </span>
                            <span
                              className=""
                              key="code-segement47"
                            >
                               
                            </span>
                            <span
                              className="token string"
                              key="code-segement48"
                            >
                              "xxxxxxxxx"
                            </span>
                            <span
                              className="token punctuation"
                              key="code-segement49"
                            >
                              ,
                            </span>
                            <span
                              className=""
                              key="code-segement50"
                            >
                              

                            </span>
                            <span
                              className="comment linenumber react-syntax-highlighter-line-number"
                              key="line-number--8"
                              style={
                                Object {
                                  "display": "inline-block",
                                  "minWidth": "2.25em",
                                  "paddingRight": "1em",
                                  "textAlign": "right",
                                  "userSelect": "none",
                                }
                              }
                            >
                              8
                            </span>
                            <span
                              className=""
                              key="code-segement52"
                            >
                              	
                            </span>
                            <span
                              className="token property"
                              key="code-segement53"
                            >
                              "exp"
                            </span>
                            <span
                              className="token operator"
                              key="code-segement54"
                            >
                              :
                            </span>
                            <span
                              className=""
                              key="code-segement55"
                            >
                               
                            </span>
                            <span
                              className="token string"
                              key="code-segement56"
                            >
                              "xxxxxxxxxx"
                            </span>
                            <span
                              className="token punctuation"
                              key="code-segement57"
                            >
                              ,
                            </span>
                            <span
                              className=""
                              key="code-segement58"
                            >
                              

                            </span>
                            <span
                              className="comment linenumber react-syntax-highlighter-line-number"
                              key="line-number--9"
                              style={
                                Object {
                                  "display": "inline-block",
                                  "minWidth": "2.25em",
                                  "paddingRight": "1em",
                                  "textAlign": "right",
                                  "userSelect": "none",
                                }
                              }
                            >
                              9
                            </span>
                            <span
                              className=""
                              key="code-segement60"
                            >
                              	
                            </span>
                            <span
                              className="token property"
                              key="code-segement61"
                            >
                              "iat"
                            </span>
                            <span
                              className="token operator"
                              key="code-segement62"
                            >
                              :
                            </span>
                            <span
                              className=""
                              key="code-segement63"
                            >
                               
                            </span>
                            <span
                              className="token string"
                              key="code-segement64"
                            >
                              "xxxxxxxxxx"
                            </span>
                            <span
                              className="token punctuation"
                              key="code-segement65"
                            >
                              ,
                            </span>
                            <span
                              className=""
                              key="code-segement66"
                            >
                              

                            </span>
                            <span
                              className="comment linenumber react-syntax-highlighter-line-number"
                              key="line-number--10"
                              style={
                                Object {
                                  "display": "inline-block",
                                  "minWidth": "2.25em",
                                  "paddingRight": "1em",
                                  "textAlign": "right",
                                  "userSelect": "none",
                                }
                              }
                            >
                              10
                            </span>
                            <span
                              className=""
                              key="code-segement68"
                            >
                              	
                            </span>
                            <span
                              className="token property"
                              key="code-segement69"
                            >
                              "pipelineUuid"
                            </span>
                            <span
                              className="token operator"
                              key="code-segement70"
                            >
                              :
                            </span>
                            <span
                              className=""
                              key="code-segement71"
                            >
                               
                            </span>
                            <span
                              className="token string"
                              key="code-segement72"
                            >
                              "{xxxxx-xxxxx-xxxx-xxxx-xxxxxxxxxxx}"
                            </span>
                            <span
                              className="token punctuation"
                              key="code-segement73"
                            >
                              ,
                            </span>
                            <span
                              className=""
                              key="code-segement74"
                            >
                              

                            </span>
                            <span
                              className="comment linenumber react-syntax-highlighter-line-number"
                              key="line-number--11"
                              style={
                                Object {
                                  "display": "inline-block",
                                  "minWidth": "2.25em",
                                  "paddingRight": "1em",
                                  "textAlign": "right",
                                  "userSelect": "none",
                                }
                              }
                            >
                              11
                            </span>
                            <span
                              className=""
                              key="code-segement76"
                            >
                              	
                            </span>
                            <span
                              className="token property"
                              key="code-segement77"
                            >
                              "workspaceUuid"
                            </span>
                            <span
                              className="token operator"
                              key="code-segement78"
                            >
                              :
                            </span>
                            <span
                              className=""
                              key="code-segement79"
                            >
                               
                            </span>
                            <span
                              className="token string"
                              key="code-segement80"
                            >
                              "{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}"
                            </span>
                            <span
                              className=""
                              key="code-segement81"
                            >
                              

                            </span>
                            <span
                              className="comment linenumber react-syntax-highlighter-line-number"
                              key="line-number--12"
                              style={
                                Object {
                                  "display": "inline-block",
                                  "minWidth": "2.25em",
                                  "paddingRight": "1em",
                                  "textAlign": "right",
                                  "userSelect": "none",
                                }
                              }
                            >
                              12
                            </span>
                            <span
                              className=""
                              key="code-segement83"
                            />
                            <span
                              className="token punctuation"
                              key="code-segement84"
                            >
                              }
                            </span>
                          </code>
                        </span>
                      </SyntaxHighlighter>
                    </ReactAsyncHighlighter>
                  </CodeBlock>
                  <Memo(CopyButton)
                    content="{
	\\"sub\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}:{stepUuid}\\",
	\\"aud\\": \\"ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a\\",
	\\"stepUuid\\": \\"{xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx}\\",
	\\"iss\\": \\"https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc\\",
	\\"repositoryUuid\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}\\",
	\\"branchName\\": \\"xxxxxxxxx\\",
	\\"exp\\": \\"xxxxxxxxxx\\",
	\\"iat\\": \\"xxxxxxxxxx\\",
	\\"pipelineUuid\\": \\"{xxxxx-xxxxx-xxxx-xxxx-xxxxxxxxxxx}\\",
	\\"workspaceUuid\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}\\"
}"
                    name="claim"
                  >
                    <Tooltip
                      content="Copy"
                      position="right"
                    >
                      <div
                        onBlur={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onMouseDown={[Function]}
                        onMouseOut={[Function]}
                        onMouseOver={[Function]}
                        role="presentation"
                      >
                        <styled.div
                          onClick={[Function]}
                        >
                          <div
                            className="c2"
                            onClick={[Function]}
                          >
                            <styled.div>
                              <div
                                className="c3"
                              >
                                <CopyIcon
                                  label="Copy claim"
                                  size="small"
                                >
                                  <Memo(Icon)
                                    dangerouslySetGlyph="<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>"
                                    label="Copy claim"
                                    size="small"
                                  >
                                    <span
                                      aria-label="Copy claim"
                                      className="emotion-3"
                                      dangerouslySetInnerHTML={
                                        Object {
                                          "__html": "<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>",
                                        }
                                      }
                                      role="img"
                                      style={
                                        Object {
                                          "--icon-primary-color": "currentColor",
                                          "--icon-secondary-color": "var(--background-default, #FFFFFF)",
                                        }
                                      }
                                    />
                                  </Memo(Icon)>
                                </CopyIcon>
                              </div>
                            </styled.div>
                          </div>
                        </styled.div>
                      </div>
                    </Tooltip>
                  </Memo(CopyButton)>
                </div>
              </styled.div>
            </Memo(CopyableCodeBlock)>
          </div>
        </styled.div>
      </div>
    </div>
  </AnimateHeight>
  <styled.div>
    <div
      className="c0"
    >
      <h5>
        UUIDs
      </h5>
      <styled.hr>
        <hr
          className="c6"
        />
      </styled.hr>
      <styled.div>
        <div
          className="c7"
        >
          <styled.div>
            <div
              className="c8"
            >
              Workspace UUID
            </div>
          </styled.div>
          <styled.div>
            <div
              className="c9"
            >
              {3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}
            </div>
          </styled.div>
          <styled.div>
            <div
              className="c10"
            >
              <Memo(CopyButton)
                content="{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}"
                name="accountUuid"
              >
                <Tooltip
                  content="Copy"
                  position="right"
                >
                  <div
                    onBlur={[Function]}
                    onClick={[Function]}
                    onFocus={[Function]}
                    onMouseDown={[Function]}
                    onMouseOut={[Function]}
                    onMouseOver={[Function]}
                    role="presentation"
                  >
                    <styled.div
                      onClick={[Function]}
                    >
                      <div
                        className="c2"
                        onClick={[Function]}
                      >
                        <styled.div>
                          <div
                            className="c3"
                          >
                            <CopyIcon
                              label="Copy accountUuid"
                              size="small"
                            >
                              <Memo(Icon)
                                dangerouslySetGlyph="<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>"
                                label="Copy accountUuid"
                                size="small"
                              >
                                <span
                                  aria-label="Copy accountUuid"
                                  className="emotion-3"
                                  dangerouslySetInnerHTML={
                                    Object {
                                      "__html": "<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>",
                                    }
                                  }
                                  role="img"
                                  style={
                                    Object {
                                      "--icon-primary-color": "currentColor",
                                      "--icon-secondary-color": "var(--background-default, #FFFFFF)",
                                    }
                                  }
                                />
                              </Memo(Icon)>
                            </CopyIcon>
                          </div>
                        </styled.div>
                      </div>
                    </styled.div>
                  </div>
                </Tooltip>
              </Memo(CopyButton)>
            </div>
          </styled.div>
        </div>
      </styled.div>
      <styled.div>
        <div
          className="c7"
        >
          <styled.div>
            <div
              className="c8"
            >
              Repository UUID
            </div>
          </styled.div>
          <styled.div>
            <div
              className="c9"
            >
              {3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}
            </div>
          </styled.div>
          <styled.div>
            <div
              className="c10"
            >
              <Memo(CopyButton)
                content="{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}"
                name="repoUuid"
              >
                <Tooltip
                  content="Copy"
                  position="right"
                >
                  <div
                    onBlur={[Function]}
                    onClick={[Function]}
                    onFocus={[Function]}
                    onMouseDown={[Function]}
                    onMouseOut={[Function]}
                    onMouseOver={[Function]}
                    role="presentation"
                  >
                    <styled.div
                      onClick={[Function]}
                    >
                      <div
                        className="c2"
                        onClick={[Function]}
                      >
                        <styled.div>
                          <div
                            className="c3"
                          >
                            <CopyIcon
                              label="Copy repoUuid"
                              size="small"
                            >
                              <Memo(Icon)
                                dangerouslySetGlyph="<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>"
                                label="Copy repoUuid"
                                size="small"
                              >
                                <span
                                  aria-label="Copy repoUuid"
                                  className="emotion-3"
                                  dangerouslySetInnerHTML={
                                    Object {
                                      "__html": "<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>",
                                    }
                                  }
                                  role="img"
                                  style={
                                    Object {
                                      "--icon-primary-color": "currentColor",
                                      "--icon-secondary-color": "var(--background-default, #FFFFFF)",
                                    }
                                  }
                                />
                              </Memo(Icon)>
                            </CopyIcon>
                          </div>
                        </styled.div>
                      </div>
                    </styled.div>
                  </div>
                </Tooltip>
              </Memo(CopyButton)>
            </div>
          </styled.div>
        </div>
      </styled.div>
    </div>
  </styled.div>
</Memo(OpenIDConnectConfiguration)>
`;

exports[`<OpenIdConnectPage /> should render component with deployment environment 1`] = `
.emotion-0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  line-height: 20px;
  overflow-x: auto;
  white-space: pre;
  font-size: 12px;
  font-family: 'SFMono-Medium','SF Mono','Segoe UI Mono','Roboto Mono','Ubuntu Mono',Menlo,Consolas,Courier,monospace;
  font-weight: normal;
  background-color: var(--ds--code--bg-color,#F4F5F7);
  color: #172B4D;
  border-style: none;
  border-radius: 3px;
}

.emotion-0 code[class*="language-"],
.emotion-0 pre[class*="language-"],
.emotion-0 code {
  all: unset;
  padding: 8px 0;
}

.emotion-0 .token:not([class=token],[data-ds--code--row--highlight]) {
  all: unset;
}

.emotion-0 .token.key,
.emotion-0 .token.keyword {
  color: #0052CC;
  font-weight: bolder;
}

.emotion-0 .token.attr-name {
  color: #067384;
}

.emotion-0 .token.selector {
  color: #0052CC;
}

.emotion-0 .token.comment,
.emotion-0 .token.block-comment {
  color: #505F79;
  font-family: SFMono-MediumItalic,'SFMono-Medium','SF Mono','Segoe UI Mono','Roboto Mono','Ubuntu Mono',Menlo,Consolas,Courier,monospace;
  font-style: italic;
}

.emotion-0 .token.function-name {
  color: #6554C0;
}

.emotion-0 .token.doctype {
  color: #7A5D1A;
}

.emotion-0 .token.substr {
  color: #505F79;
}

.emotion-0 .token.namespace {
  color: #0052CC;
}

.emotion-0 .token.builtin {
  color: #0052CC;
}

.emotion-0 .token.entity {
  color: #0052CC;
}

.emotion-0 .token.bullet {
  color: #0052CC;
}

.emotion-0 .token.code {
  color: #0052CC;
}

.emotion-0 .token.regex {
  color: #067384;
}

.emotion-0 .token.symbol {
  color: #067384;
}

.emotion-0 .token.variable {
  color: #067384;
}

.emotion-0 .token.url {
  color: #6554C0;
}

.emotion-0 .token.selector-attr {
  color: #067384;
}

.emotion-0 .token.selector-pseudo {
  color: #067384;
}

.emotion-0 .token.type {
  color: #067384;
}

.emotion-0 .token.quote {
  color: #067384;
}

.emotion-0 .token.tag {
  color: #067384;
}

.emotion-0 .token.string {
  color: #006644;
}

.emotion-0 .token.class-name {
  color: #6554C0;
}

.emotion-0 .token.title {
  color: #6554C0;
}

.emotion-0 .token.section {
  color: #6554C0;
}

.emotion-0 .token.meta-keyword {
  color: #006644;
}

.emotion-0 .token.meta {
  color: #505F79;
}

.emotion-0 .token.italic {
  font-style: italic;
}

.emotion-0 .token.bold {
  font-weight: bolder;
}

.emotion-0 .token.function {
  color: #172B4D;
}

.emotion-0 .token.number {
  color: #0052CC;
}

.emotion-0 .token.attr-value {
  color: #067384;
}

.emotion-0 .token.prolog {
  color: #0052CC;
}

.emotion-0 .token.cdata {
  color: #505F79;
}

.emotion-0 .token.punctuation {
  color: #172B4D;
}

.emotion-0 .token.property {
  color: #6554C0;
}

.emotion-0 .token.constant {
  color: #067384;
}

.emotion-0 .token.deleted {
  color: #BF2600;
}

.emotion-0 .token.boolean {
  color: #0747A6;
}

.emotion-0 .token.char {
  color: #172B4D;
}

.emotion-0 .token.inserted {
  color: #006644;
}

.emotion-0 .token.operator {
  color: #172B4D;
}

.emotion-0 .token.atrule {
  color: #006644;
}

.emotion-0 .token.important {
  color: #7A5D1A;
  font-weight: bold;
}

.emotion-0 .linenumber,
.emotion-0 .react-syntax-highlighter-line-number {
  min-width: calc(1ch + 16px) !important;
  font-style: normal !important;
  color: #505F79 !important;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  box-sizing: border-box;
  padding-right: 8px !important;
  padding-left: 8px;
  margin-right: 8px;
  text-align: right;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  display: block;
}

.emotion-0 .linenumber {
  display: inline-block !important;
}

.emotion-0 [data-ds--code--row] {
  display: block;
  padding-right: 8px !important;
  margin-right: -8px;
}

.emotion-0 [data-ds--code--row--highlight] {
  background: #EBECF0;
}

.emotion-0 [data-ds--code--row--highlight]::before,
.emotion-0 [data-ds--code--row--highlight]::after {
  -webkit-clip-path: inset(100%);
  clip-path: inset(100%);
  -webkit-clip: rect(1px,1px,1px,1px);
  clip: rect(1px,1px,1px,1px);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.emotion-0 [data-ds--code--row--highlight]::before {
  content: ", Highlight start, ";
}

.emotion-0 [data-ds--code--row--highlight]::after {
  content: ", Highlight end, ";
}

.emotion-0 [data-ds--code--row--highlight] .linenumber {
  border-left: 4px solid #2684FF;
  padding-left: 4px !important;
  position: relative;
}

.emotion-0 [data-ds--code--row--highlight] .linenumber::before {
  content: "";
  position: absolute;
  width: 4px;
  top: -1px;
  left: -4px;
  border-top: 1px solid #2684FF;
}

.emotion-0 [data-ds--code--row--highlight] + [data-ds--code--row]:not([data-ds--code--row--highlight]),
.emotion-0 [data-ds--code--row]:not([data-ds--code--row--highlight]) + [data-ds--code--row--highlight] {
  border-top: 1px dashed transparent;
}

.emotion-0 [data-ds--code--row--highlight]:last-child {
  border-bottom: 1px dashed transparent;
}

.emotion-0 code:first-of-type {
  padding-right: 0px !important;
  background-image: linear-gradient(to right,var(--ds--code--line-number-bg-color,#EBECF0),var(--ds--code--line-number-bg-color,#EBECF0) calc(1ch + 16px),transparent calc(1ch + 16px),transparent);
}

.emotion-0 code:last-of-type {
  padding-right: 8px !important;
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
}

.emotion-3 {
  display: inline-block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  line-height: 1;
  width: 16px;
  height: 16px;
}

.emotion-3 > svg {
  overflow: hidden;
  pointer-events: none;
  max-width: 100%;
  max-height: 100%;
  color: var(--icon-primary-color);
  fill: var(--icon-secondary-color);
  vertical-align: bottom;
}

.emotion-3 > svg stop {
  stop-color: currentColor;
}

@media screen and (forced-colors:active) {
  .emotion-3 > svg {
    -webkit-filter: grayscale(1);
    filter: grayscale(1);
    --icon-primary-color: CanvasText;
    --icon-secondary-color: Canvas;
  }
}

.emotion-3 > svg {
  width: 16px;
  height: 16px;
}

.emotion-10,
.emotion-10:hover,
.emotion-10:active,
.emotion-10:focus,
.emotion-10:visited,
.emotion-10:disabled,
.emotion-10[disabled] {
  -webkit-align-items: baseline;
  -webkit-box-align: baseline;
  -ms-flex-align: baseline;
  align-items: baseline;
  border-width: 0;
  border-radius: 3px;
  box-sizing: border-box;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  font-size: inherit;
  font-style: normal;
  font-family: inherit;
  font-weight: 500;
  max-width: 100%;
  position: relative;
  text-align: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: background 0.1s ease-out,box-shadow 0.15s cubic-bezier(0.47,0.03,0.49,1.38);
  transition: background 0.1s ease-out,box-shadow 0.15s cubic-bezier(0.47,0.03,0.49,1.38);
  white-space: nowrap;
  background: none;
  color: var(--text-highEmphasis,#42526E) !important;
  cursor: pointer;
  height: 2.2857142857142856em;
  line-height: 2.2857142857142856em;
  padding: 0 10px;
  vertical-align: middle;
  width: auto;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  outline: none;
  margin: 10px 0px -10px 0px;
}

.emotion-10::-moz-focus-inner,
.emotion-10:hover::-moz-focus-inner,
.emotion-10:active::-moz-focus-inner,
.emotion-10:focus::-moz-focus-inner,
.emotion-10:visited::-moz-focus-inner,
.emotion-10:disabled::-moz-focus-inner,
.emotion-10[disabled]::-moz-focus-inner {
  border: 0;
  margin: 0;
  padding: 0;
}

.emotion-9 {
  -webkit-transition: opacity 0.3s;
  transition: opacity 0.3s;
  opacity: 1;
  margin: 0 2px;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  -webkit-flex-shrink: 1;
  -ms-flex-negative: 1;
  flex-shrink: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.emotion-8 {
  display: inline-block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  line-height: 1;
  width: 32px;
  height: 32px;
}

.emotion-8 > svg {
  overflow: hidden;
  pointer-events: none;
  max-width: 100%;
  max-height: 100%;
  color: var(--icon-primary-color);
  fill: var(--icon-secondary-color);
  vertical-align: bottom;
}

.emotion-8 > svg stop {
  stop-color: currentColor;
}

@media screen and (forced-colors:active) {
  .emotion-8 > svg {
    -webkit-filter: grayscale(1);
    filter: grayscale(1);
    --icon-primary-color: CanvasText;
    --icon-secondary-color: Canvas;
  }
}

.emotion-8 > svg {
  width: 32px;
  height: 32px;
}

.emotion-11 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  line-height: 20px;
  overflow-x: auto;
  white-space: pre;
  font-size: 12px;
  font-family: 'SFMono-Medium','SF Mono','Segoe UI Mono','Roboto Mono','Ubuntu Mono',Menlo,Consolas,Courier,monospace;
  font-weight: normal;
  background-color: var(--ds--code--bg-color,#F4F5F7);
  color: #172B4D;
  border-style: none;
  border-radius: 3px;
}

.emotion-11 code[class*="language-"],
.emotion-11 pre[class*="language-"],
.emotion-11 code {
  all: unset;
  padding: 8px 0;
}

.emotion-11 .token:not([class=token],[data-ds--code--row--highlight]) {
  all: unset;
}

.emotion-11 .token.key,
.emotion-11 .token.keyword {
  color: #0052CC;
  font-weight: bolder;
}

.emotion-11 .token.attr-name {
  color: #067384;
}

.emotion-11 .token.selector {
  color: #0052CC;
}

.emotion-11 .token.comment,
.emotion-11 .token.block-comment {
  color: #505F79;
  font-family: SFMono-MediumItalic,'SFMono-Medium','SF Mono','Segoe UI Mono','Roboto Mono','Ubuntu Mono',Menlo,Consolas,Courier,monospace;
  font-style: italic;
}

.emotion-11 .token.function-name {
  color: #6554C0;
}

.emotion-11 .token.doctype {
  color: #7A5D1A;
}

.emotion-11 .token.substr {
  color: #505F79;
}

.emotion-11 .token.namespace {
  color: #0052CC;
}

.emotion-11 .token.builtin {
  color: #0052CC;
}

.emotion-11 .token.entity {
  color: #0052CC;
}

.emotion-11 .token.bullet {
  color: #0052CC;
}

.emotion-11 .token.code {
  color: #0052CC;
}

.emotion-11 .token.regex {
  color: #067384;
}

.emotion-11 .token.symbol {
  color: #067384;
}

.emotion-11 .token.variable {
  color: #067384;
}

.emotion-11 .token.url {
  color: #6554C0;
}

.emotion-11 .token.selector-attr {
  color: #067384;
}

.emotion-11 .token.selector-pseudo {
  color: #067384;
}

.emotion-11 .token.type {
  color: #067384;
}

.emotion-11 .token.quote {
  color: #067384;
}

.emotion-11 .token.tag {
  color: #067384;
}

.emotion-11 .token.string {
  color: #006644;
}

.emotion-11 .token.class-name {
  color: #6554C0;
}

.emotion-11 .token.title {
  color: #6554C0;
}

.emotion-11 .token.section {
  color: #6554C0;
}

.emotion-11 .token.meta-keyword {
  color: #006644;
}

.emotion-11 .token.meta {
  color: #505F79;
}

.emotion-11 .token.italic {
  font-style: italic;
}

.emotion-11 .token.bold {
  font-weight: bolder;
}

.emotion-11 .token.function {
  color: #172B4D;
}

.emotion-11 .token.number {
  color: #0052CC;
}

.emotion-11 .token.attr-value {
  color: #067384;
}

.emotion-11 .token.prolog {
  color: #0052CC;
}

.emotion-11 .token.cdata {
  color: #505F79;
}

.emotion-11 .token.punctuation {
  color: #172B4D;
}

.emotion-11 .token.property {
  color: #6554C0;
}

.emotion-11 .token.constant {
  color: #067384;
}

.emotion-11 .token.deleted {
  color: #BF2600;
}

.emotion-11 .token.boolean {
  color: #0747A6;
}

.emotion-11 .token.char {
  color: #172B4D;
}

.emotion-11 .token.inserted {
  color: #006644;
}

.emotion-11 .token.operator {
  color: #172B4D;
}

.emotion-11 .token.atrule {
  color: #006644;
}

.emotion-11 .token.important {
  color: #7A5D1A;
  font-weight: bold;
}

.emotion-11 .linenumber,
.emotion-11 .react-syntax-highlighter-line-number {
  min-width: calc(2ch + 16px) !important;
  font-style: normal !important;
  color: #505F79 !important;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  box-sizing: border-box;
  padding-right: 8px !important;
  padding-left: 8px;
  margin-right: 8px;
  text-align: right;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  display: block;
}

.emotion-11 .linenumber {
  display: inline-block !important;
}

.emotion-11 [data-ds--code--row] {
  display: block;
  padding-right: 8px !important;
  margin-right: -8px;
}

.emotion-11 [data-ds--code--row--highlight] {
  background: #EBECF0;
}

.emotion-11 [data-ds--code--row--highlight]::before,
.emotion-11 [data-ds--code--row--highlight]::after {
  -webkit-clip-path: inset(100%);
  clip-path: inset(100%);
  -webkit-clip: rect(1px,1px,1px,1px);
  clip: rect(1px,1px,1px,1px);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.emotion-11 [data-ds--code--row--highlight]::before {
  content: ", Highlight start, ";
}

.emotion-11 [data-ds--code--row--highlight]::after {
  content: ", Highlight end, ";
}

.emotion-11 [data-ds--code--row--highlight] .linenumber {
  border-left: 4px solid #2684FF;
  padding-left: 4px !important;
  position: relative;
}

.emotion-11 [data-ds--code--row--highlight] .linenumber::before {
  content: "";
  position: absolute;
  width: 4px;
  top: -1px;
  left: -4px;
  border-top: 1px solid #2684FF;
}

.emotion-11 [data-ds--code--row--highlight] + [data-ds--code--row]:not([data-ds--code--row--highlight]),
.emotion-11 [data-ds--code--row]:not([data-ds--code--row--highlight]) + [data-ds--code--row--highlight] {
  border-top: 1px dashed transparent;
}

.emotion-11 [data-ds--code--row--highlight]:last-child {
  border-bottom: 1px dashed transparent;
}

.emotion-11 code:first-of-type {
  padding-right: 0px !important;
  background-image: linear-gradient(to right,var(--ds--code--line-number-bg-color,#EBECF0),var(--ds--code--line-number-bg-color,#EBECF0) calc(2ch + 16px),transparent calc(2ch + 16px),transparent);
}

.emotion-11 code:last-of-type {
  padding-right: 8px !important;
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
}

.emotion-21 {
  display: inline-block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  line-height: 1;
}

.emotion-21 > svg {
  overflow: hidden;
  pointer-events: none;
  max-width: 100%;
  max-height: 100%;
  color: var(--icon-primary-color);
  fill: var(--icon-secondary-color);
  vertical-align: bottom;
}

.emotion-21 > svg stop {
  stop-color: currentColor;
}

@media screen and (forced-colors:active) {
  .emotion-21 > svg {
    -webkit-filter: grayscale(1);
    filter: grayscale(1);
    --icon-primary-color: CanvasText;
    --icon-secondary-color: Canvas;
  }
}

.emotion-25 {
  pointer-events: all;
  position: relative;
  box-sizing: border-box;
  font-family: -apple-system,BlinkMacSystemFont,'Segoe UI','Roboto','Oxygen','Ubuntu','Fira Sans','Droid Sans','Helvetica Neue',sans-serif;
}



.emotion-17 {
  z-index: 9999;
  border: 0;
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  width: 1px;
  position: absolute;
  overflow: hidden;
  padding: 0;
  white-space: nowrap;
}

.emotion-24 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: var(--background-subtleNeutral-resting, #F4F5F7);
  border-color: var(--border-neutral, #F4F5F7);
  border-radius: 3px;
  border-style: solid;
  border-width: 2px;
  box-shadow: none;
  cursor: default;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-flex-wrap: wrap;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  justify-content: space-between;
  min-height: 40px;
  outline: 0!important;
  position: relative;
  -webkit-transition: background-color 200ms ease-in-out,border-color 200ms ease-in-out;
  transition: background-color 200ms ease-in-out,border-color 200ms ease-in-out;
  box-sizing: border-box;
  padding: 0;
}

.emotion-24:hover {
  border-color: hsl(0, 0%, 70%);
}

.emotion-24::-webkit-scrollbar {
  height: 8px;
  width: 8px;
}

.emotion-24::-webkit-scrollbar-corner {
  display: none;
}

.emotion-24:hover {
  cursor: pointer;
  background-color: var(--background-default, #EBECF0);
  border-color: var(--border-neutral, #EBECF0);
}

.emotion-24:hover::-webkit-scrollbar-thumb {
  background-color: rgba(0,0,0,0.2);
}

.emotion-24::-webkit-scrollbar-thumb:hover {
  background-color: rgba(0,0,0,0.4);
}

.emotion-20 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  -webkit-box-flex-wrap: wrap;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  padding: 2px 8px;
  -webkit-overflow-scrolling: touch;
  position: relative;
  overflow: hidden;
  box-sizing: border-box;
  padding-left: 6px;
  padding-right: 6px;
  padding-bottom: 2px;
  padding-top: 2px;
}

.emotion-18 {
  color: var(--text-lowEmphasis, #5E6C84);
  margin-left: 2px;
  margin-right: 2px;
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -moz-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
  box-sizing: border-box;
}

.emotion-19 {
  margin: 2px;
  padding-bottom: 2px;
  padding-top: 2px;
  visibility: visible;
  color: var(--text-highEmphasis, hsl(0, 0%, 20%));
  box-sizing: border-box;
}

.emotion-23 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-align-self: stretch;
  -ms-flex-item-align: stretch;
  align-self: stretch;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  box-sizing: border-box;
  padding-right: 4px;
}

.emotion-22 {
  color: var(--text-mediumEmphasis, #42526E);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  padding: 8px;
  -webkit-transition: color 150ms;
  transition: color 150ms;
  box-sizing: border-box;
  padding-left: 2px;
  padding-right: 2px;
  padding-bottom: 6px;
  padding-top: 6px;
}

.emotion-22:hover {
  color: var(--text-mediumEmphasis, #6B778C);
}

.c11 {
  margin-top: 20px;
  width: 30%;
}

.c0 {
  margin-top: 24px;
}

.c0 h5 {
  color: #6B778C;
}

.c7 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  margin: 5px 0;
}

.c8 {
  width: 50%;
  margin-top: 15px;
}

.c9 {
  width: 47%;
  margin-top: 15px;
}

.c10 {
  width: 3%;
  margin-top: 7px;
  padding-left: 10px;
}

.c6 {
  margin-top: 7px;
  width: 99.5%;
  left: 0px;
  position: absolute;
  border: solid 1px #DFE1E6;
}

.c5 {
  -webkit-transform: translate3d(0,0,0);
  -ms-transform: translate3d(0,0,0);
  transform: translate3d(0,0,0);
  -webkit-transition: -webkit-transform 0.2s ease-in-out;
  -webkit-transition: transform 0.2s ease-in-out;
  transition: transform 0.2s ease-in-out;
  height: 32px;
  margin-top: 9px;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  margin: -8px 0px 7px -10px;
}

.c2 {
  border-radius: 3px;
  width: 24px;
  height: 24px;
  cursor: pointer;
  margin-top: 3px;
  margin-right: 3px;
}

.c3 {
  padding-top: 5.6px;
  padding-left: 4px;
}

.c1 {
  margin: 14px 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  background-color: #F4F5F7;
}

<Memo(OpenIDConnectConfiguration)
  accountName="test"
  accountUuid="{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}"
  connectEnvironment="PRODUCTION"
  deploymentEnvironments={
    Array [
      Object {
        "label": "Other",
        "options": Array [
          Object {
            "label": "No environment",
            "uuid": "",
            "value": "no environment",
          },
        ],
      },
      Object {
        "label": "Test Environments",
        "options": Array [
          Object {
            "label": "foo",
            "uuid": "{blah}",
            "value": "bar",
          },
        ],
      },
    ]
  }
  repositoryUuid="{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}"
>
  <h3>
    Identity provider
  </h3>
  <styled.div>
    <div
      className="c0"
    >
      <h5>
        Identity provider URL
      </h5>
      <Memo(CopyableCodeBlock)
        content="https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc"
        language="html"
        name="identityProviderURL"
        showLineNumbers={true}
      >
        <styled.div>
          <div
            className="c1"
          >
            <CodeBlock
              language="html"
              showLineNumbers={true}
              text="https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc"
            >
              <ReactAsyncHighlighter
                PreTag="span"
                className="emotion-0"
                data-code-lang="xml"
                data-ds--code--code-block=""
                language="xml"
                lineProps={[Function]}
                showLineNumbers={true}
                useInlineStyles={false}
                wrapLines={false}
              >
                <SyntaxHighlighter
                  PreTag="span"
                  astGenerator={
                    Object {
                      "alias": [Function],
                      "highlight": [Function],
                      "listLanguages": [Function],
                      "register": [Function],
                      "registered": [Function],
                    }
                  }
                  className="emotion-0"
                  data-code-lang="xml"
                  data-ds--code--code-block=""
                  language="xml"
                  lineProps={[Function]}
                  showLineNumbers={true}
                  useInlineStyles={false}
                  wrapLines={false}
                >
                  <span
                    className="prismjs emotion-0"
                    data-code-lang="xml"
                    data-ds--code--code-block=""
                    style={Object {}}
                  >
                    <code
                      className="language-xml"
                      style={
                        Object {
                          "whiteSpace": "pre",
                        }
                      }
                    >
                      <span
                        className="comment linenumber react-syntax-highlighter-line-number"
                        key="line-number--1"
                        style={
                          Object {
                            "display": "inline-block",
                            "minWidth": "1.25em",
                            "paddingRight": "1em",
                            "textAlign": "right",
                            "userSelect": "none",
                          }
                        }
                      >
                        1
                      </span>
                      <span
                        className=""
                        key="code-segement1"
                      >
                        https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc
                      </span>
                    </code>
                  </span>
                </SyntaxHighlighter>
              </ReactAsyncHighlighter>
            </CodeBlock>
            <Memo(CopyButton)
              content="https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc"
              name="identityProviderURL"
            >
              <Tooltip
                content="Copy"
                position="right"
              >
                <div
                  onBlur={[Function]}
                  onClick={[Function]}
                  onFocus={[Function]}
                  onMouseDown={[Function]}
                  onMouseOut={[Function]}
                  onMouseOver={[Function]}
                  role="presentation"
                >
                  <styled.div
                    onClick={[Function]}
                  >
                    <div
                      className="c2"
                      onClick={[Function]}
                    >
                      <styled.div>
                        <div
                          className="c3"
                        >
                          <CopyIcon
                            label="Copy identityProviderURL"
                            size="small"
                          >
                            <Memo(Icon)
                              dangerouslySetGlyph="<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>"
                              label="Copy identityProviderURL"
                              size="small"
                            >
                              <span
                                aria-label="Copy identityProviderURL"
                                className="emotion-3"
                                dangerouslySetInnerHTML={
                                  Object {
                                    "__html": "<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>",
                                  }
                                }
                                role="img"
                                style={
                                  Object {
                                    "--icon-primary-color": "currentColor",
                                    "--icon-secondary-color": "var(--background-default, #FFFFFF)",
                                  }
                                }
                              />
                            </Memo(Icon)>
                          </CopyIcon>
                        </div>
                      </styled.div>
                    </div>
                  </styled.div>
                </div>
              </Tooltip>
            </Memo(CopyButton)>
          </div>
        </styled.div>
      </Memo(CopyableCodeBlock)>
    </div>
  </styled.div>
  <styled.div>
    <div
      className="c0"
    >
      <h5>
        Audience
      </h5>
      <Memo(CopyableCodeBlock)
        content="ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a"
        language="html"
        name="audience"
        showLineNumbers={true}
      >
        <styled.div>
          <div
            className="c1"
          >
            <CodeBlock
              language="html"
              showLineNumbers={true}
              text="ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a"
            >
              <ReactAsyncHighlighter
                PreTag="span"
                className="emotion-0"
                data-code-lang="xml"
                data-ds--code--code-block=""
                language="xml"
                lineProps={[Function]}
                showLineNumbers={true}
                useInlineStyles={false}
                wrapLines={false}
              >
                <SyntaxHighlighter
                  PreTag="span"
                  astGenerator={
                    Object {
                      "alias": [Function],
                      "highlight": [Function],
                      "listLanguages": [Function],
                      "register": [Function],
                      "registered": [Function],
                    }
                  }
                  className="emotion-0"
                  data-code-lang="xml"
                  data-ds--code--code-block=""
                  language="xml"
                  lineProps={[Function]}
                  showLineNumbers={true}
                  useInlineStyles={false}
                  wrapLines={false}
                >
                  <span
                    className="prismjs emotion-0"
                    data-code-lang="xml"
                    data-ds--code--code-block=""
                    style={Object {}}
                  >
                    <code
                      className="language-xml"
                      style={
                        Object {
                          "whiteSpace": "pre",
                        }
                      }
                    >
                      <span
                        className="comment linenumber react-syntax-highlighter-line-number"
                        key="line-number--1"
                        style={
                          Object {
                            "display": "inline-block",
                            "minWidth": "1.25em",
                            "paddingRight": "1em",
                            "textAlign": "right",
                            "userSelect": "none",
                          }
                        }
                      >
                        1
                      </span>
                      <span
                        className=""
                        key="code-segement1"
                      >
                        ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a
                      </span>
                    </code>
                  </span>
                </SyntaxHighlighter>
              </ReactAsyncHighlighter>
            </CodeBlock>
            <Memo(CopyButton)
              content="ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a"
              name="audience"
            >
              <Tooltip
                content="Copy"
                position="right"
              >
                <div
                  onBlur={[Function]}
                  onClick={[Function]}
                  onFocus={[Function]}
                  onMouseDown={[Function]}
                  onMouseOut={[Function]}
                  onMouseOver={[Function]}
                  role="presentation"
                >
                  <styled.div
                    onClick={[Function]}
                  >
                    <div
                      className="c2"
                      onClick={[Function]}
                    >
                      <styled.div>
                        <div
                          className="c3"
                        >
                          <CopyIcon
                            label="Copy audience"
                            size="small"
                          >
                            <Memo(Icon)
                              dangerouslySetGlyph="<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>"
                              label="Copy audience"
                              size="small"
                            >
                              <span
                                aria-label="Copy audience"
                                className="emotion-3"
                                dangerouslySetInnerHTML={
                                  Object {
                                    "__html": "<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>",
                                  }
                                }
                                role="img"
                                style={
                                  Object {
                                    "--icon-primary-color": "currentColor",
                                    "--icon-secondary-color": "var(--background-default, #FFFFFF)",
                                  }
                                }
                              />
                            </Memo(Icon)>
                          </CopyIcon>
                        </div>
                      </styled.div>
                    </div>
                  </styled.div>
                </div>
              </Tooltip>
            </Memo(CopyButton)>
          </div>
        </styled.div>
      </Memo(CopyableCodeBlock)>
    </div>
  </styled.div>
  <h3>
    Unique identifiers
  </h3>
  <ForwardRef(CustomThemeButton)
    appearance="subtle"
    name="claim"
    onClick={[Function]}
    theme={[Function]}
  >
    <Provider
      value={[Function]}
    >
      <Consumer>
        <Consumer
          appearance="subtle"
          autoFocus={false}
          iconIsOnlyChild={false}
          isDisabled={false}
          isLoading={false}
          isSelected={false}
          mode="light"
          name="claim"
          onClick={[Function]}
          shouldFitContainer={false}
          spacing="default"
          state="default"
        >
          <ForwardRef(ButtonBase)
            appearance="subtle"
            autoFocus={false}
            buttonCss={
              Object {
                "&, &:hover, &:active, &:focus, &:visited, &:disabled, &[disabled]": Object {
                  "&::-moz-focus-inner": Object {
                    "border": 0,
                    "margin": 0,
                    "padding": 0,
                  },
                  "alignItems": "baseline",
                  "background": "none",
                  "borderRadius": 3,
                  "borderWidth": 0,
                  "boxSizing": "border-box",
                  "color": "var(--text-highEmphasis, #42526E) !important",
                  "cursor": "pointer",
                  "display": "inline-flex",
                  "fontFamily": "inherit",
                  "fontSize": "inherit",
                  "fontStyle": "normal",
                  "fontWeight": 500,
                  "height": "2.2857142857142856em",
                  "justifyContent": "center",
                  "lineHeight": "2.2857142857142856em",
                  "margin": "10px 0px -10px 0px",
                  "maxWidth": "100%",
                  "outline": "none",
                  "padding": "0 10px",
                  "position": "relative",
                  "textAlign": "center",
                  "textDecoration": "none",
                  "transition": "background 0.1s ease-out, box-shadow 0.15s cubic-bezier(0.47, 0.03, 0.49, 1.38)",
                  "verticalAlign": "middle",
                  "whiteSpace": "nowrap",
                  "width": "auto",
                },
              }
            }
            isDisabled={false}
            isSelected={false}
            name="claim"
            onBlur={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onMouseDown={[Function]}
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
            overlay={null}
            shouldFitContainer={false}
            spacing="default"
          >
            <button
              className="emotion-10"
              disabled={false}
              name="claim"
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="emotion-9"
              >
                <styled.div>
                  <div
                    className="c4"
                  >
                    <styled.div
                      isExpanded={false}
                    >
                      <div
                        className="c5"
                      >
                        <ChevronRightIcon
                          label="Expand"
                          size="large"
                        >
                          <Memo(Icon)
                            dangerouslySetGlyph="<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><path d=\\"M10.294 9.698a.988.988 0 010-1.407 1.01 1.01 0 011.419 0l2.965 2.94a1.09 1.09 0 010 1.548l-2.955 2.93a1.01 1.01 0 01-1.42 0 .988.988 0 010-1.407l2.318-2.297-2.327-2.307z\\" fill=\\"currentColor\\" fill-rule=\\"evenodd\\"/></svg>"
                            label="Expand"
                            size="large"
                          >
                            <span
                              aria-label="Expand"
                              className="emotion-8"
                              dangerouslySetInnerHTML={
                                Object {
                                  "__html": "<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><path d=\\"M10.294 9.698a.988.988 0 010-1.407 1.01 1.01 0 011.419 0l2.965 2.94a1.09 1.09 0 010 1.548l-2.955 2.93a1.01 1.01 0 01-1.42 0 .988.988 0 010-1.407l2.318-2.297-2.327-2.307z\\" fill=\\"currentColor\\" fill-rule=\\"evenodd\\"/></svg>",
                                }
                              }
                              role="img"
                              style={
                                Object {
                                  "--icon-primary-color": "currentColor",
                                  "--icon-secondary-color": "var(--background-default, #FFFFFF)",
                                }
                              }
                            />
                          </Memo(Icon)>
                        </ChevronRightIcon>
                      </div>
                    </styled.div>
                    <h5>
                      Example payload
                    </h5>
                  </div>
                </styled.div>
              </span>
            </button>
          </ForwardRef(ButtonBase)>
        </Consumer>
      </Consumer>
    </Provider>
  </ForwardRef(CustomThemeButton)>
  <AnimateHeight
    animateOpacity={false}
    animationStateClasses={
      Object {
        "animating": "rah-animating",
        "animatingDown": "rah-animating--down",
        "animatingToHeightAuto": "rah-animating--to-height-auto",
        "animatingToHeightSpecific": "rah-animating--to-height-specific",
        "animatingToHeightZero": "rah-animating--to-height-zero",
        "animatingUp": "rah-animating--up",
        "static": "rah-static",
        "staticHeightAuto": "rah-static--height-auto",
        "staticHeightSpecific": "rah-static--height-specific",
        "staticHeightZero": "rah-static--height-zero",
      }
    }
    applyInlineTransitions={true}
    delay={0}
    duration={200}
    easing="linear"
    height={0}
    style={Object {}}
  >
    <div
      aria-hidden={true}
      className="rah-static rah-static--height-zero"
      style={
        Object {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <div
        style={Object {}}
      >
         
        <styled.div>
          <div
            className="c0"
          >
            <Memo(CopyableCodeBlock)
              content="{
	\\"sub\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}:undefined:{stepUuid}\\",
	\\"aud\\": \\"ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a\\",
	\\"stepUuid\\": \\"{xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx}\\",
	\\"deploymentEnvironmentUuid\\": \\"undefined\\",
	\\"iss\\": \\"https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc\\",
	\\"repositoryUuid\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}\\",
	\\"branchName\\": \\"xxxxxxxxx\\",
	\\"exp\\": \\"xxxxxxxxxx\\",
	\\"iat\\": \\"xxxxxxxxxx\\",
	\\"pipelineUuid\\": \\"{xxxxx-xxxxx-xxxx-xxxx-xxxxxxxxxxx}\\",
	\\"workspaceUuid\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}\\"
}"
              language="json"
              name="claim"
              showLineNumbers={true}
            >
              <styled.div>
                <div
                  className="c1"
                >
                  <CodeBlock
                    language="json"
                    showLineNumbers={true}
                    text="{
	\\"sub\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}:undefined:{stepUuid}\\",
	\\"aud\\": \\"ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a\\",
	\\"stepUuid\\": \\"{xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx}\\",
	\\"deploymentEnvironmentUuid\\": \\"undefined\\",
	\\"iss\\": \\"https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc\\",
	\\"repositoryUuid\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}\\",
	\\"branchName\\": \\"xxxxxxxxx\\",
	\\"exp\\": \\"xxxxxxxxxx\\",
	\\"iat\\": \\"xxxxxxxxxx\\",
	\\"pipelineUuid\\": \\"{xxxxx-xxxxx-xxxx-xxxx-xxxxxxxxxxx}\\",
	\\"workspaceUuid\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}\\"
}"
                  >
                    <ReactAsyncHighlighter
                      PreTag="span"
                      className="emotion-11"
                      data-code-lang="json"
                      data-ds--code--code-block=""
                      language="json"
                      lineProps={[Function]}
                      showLineNumbers={true}
                      useInlineStyles={false}
                      wrapLines={false}
                    >
                      <SyntaxHighlighter
                        PreTag="span"
                        astGenerator={
                          Object {
                            "alias": [Function],
                            "highlight": [Function],
                            "listLanguages": [Function],
                            "register": [Function],
                            "registered": [Function],
                          }
                        }
                        className="emotion-11"
                        data-code-lang="json"
                        data-ds--code--code-block=""
                        language="json"
                        lineProps={[Function]}
                        showLineNumbers={true}
                        useInlineStyles={false}
                        wrapLines={false}
                      >
                        <span
                          className="prismjs emotion-11"
                          data-code-lang="json"
                          data-ds--code--code-block=""
                          style={Object {}}
                        >
                          <code
                            className="language-json"
                            style={
                              Object {
                                "whiteSpace": "pre",
                              }
                            }
                          >
                            <span
                              className="comment linenumber react-syntax-highlighter-line-number"
                              key="line-number--1"
                              style={
                                Object {
                                  "display": "inline-block",
                                  "minWidth": "2.25em",
                                  "paddingRight": "1em",
                                  "textAlign": "right",
                                  "userSelect": "none",
                                }
                              }
                            >
                              1
                            </span>
                            <span
                              className="token punctuation"
                              key="code-segement1"
                            >
                              {
                            </span>
                            <span
                              className=""
                              key="code-segement2"
                            >
                              

                            </span>
                            <span
                              className="comment linenumber react-syntax-highlighter-line-number"
                              key="line-number--2"
                              style={
                                Object {
                                  "display": "inline-block",
                                  "minWidth": "2.25em",
                                  "paddingRight": "1em",
                                  "textAlign": "right",
                                  "userSelect": "none",
                                }
                              }
                            >
                              2
                            </span>
                            <span
                              className=""
                              key="code-segement4"
                            >
                              	
                            </span>
                            <span
                              className="token property"
                              key="code-segement5"
                            >
                              "sub"
                            </span>
                            <span
                              className="token operator"
                              key="code-segement6"
                            >
                              :
                            </span>
                            <span
                              className=""
                              key="code-segement7"
                            >
                               
                            </span>
                            <span
                              className="token string"
                              key="code-segement8"
                            >
                              "{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}:undefined:{stepUuid}"
                            </span>
                            <span
                              className="token punctuation"
                              key="code-segement9"
                            >
                              ,
                            </span>
                            <span
                              className=""
                              key="code-segement10"
                            >
                              

                            </span>
                            <span
                              className="comment linenumber react-syntax-highlighter-line-number"
                              key="line-number--3"
                              style={
                                Object {
                                  "display": "inline-block",
                                  "minWidth": "2.25em",
                                  "paddingRight": "1em",
                                  "textAlign": "right",
                                  "userSelect": "none",
                                }
                              }
                            >
                              3
                            </span>
                            <span
                              className=""
                              key="code-segement12"
                            >
                              	
                            </span>
                            <span
                              className="token property"
                              key="code-segement13"
                            >
                              "aud"
                            </span>
                            <span
                              className="token operator"
                              key="code-segement14"
                            >
                              :
                            </span>
                            <span
                              className=""
                              key="code-segement15"
                            >
                               
                            </span>
                            <span
                              className="token string"
                              key="code-segement16"
                            >
                              "ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a"
                            </span>
                            <span
                              className="token punctuation"
                              key="code-segement17"
                            >
                              ,
                            </span>
                            <span
                              className=""
                              key="code-segement18"
                            >
                              

                            </span>
                            <span
                              className="comment linenumber react-syntax-highlighter-line-number"
                              key="line-number--4"
                              style={
                                Object {
                                  "display": "inline-block",
                                  "minWidth": "2.25em",
                                  "paddingRight": "1em",
                                  "textAlign": "right",
                                  "userSelect": "none",
                                }
                              }
                            >
                              4
                            </span>
                            <span
                              className=""
                              key="code-segement20"
                            >
                              	
                            </span>
                            <span
                              className="token property"
                              key="code-segement21"
                            >
                              "stepUuid"
                            </span>
                            <span
                              className="token operator"
                              key="code-segement22"
                            >
                              :
                            </span>
                            <span
                              className=""
                              key="code-segement23"
                            >
                               
                            </span>
                            <span
                              className="token string"
                              key="code-segement24"
                            >
                              "{xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx}"
                            </span>
                            <span
                              className="token punctuation"
                              key="code-segement25"
                            >
                              ,
                            </span>
                            <span
                              className=""
                              key="code-segement26"
                            >
                              

                            </span>
                            <span
                              className="comment linenumber react-syntax-highlighter-line-number"
                              key="line-number--5"
                              style={
                                Object {
                                  "display": "inline-block",
                                  "minWidth": "2.25em",
                                  "paddingRight": "1em",
                                  "textAlign": "right",
                                  "userSelect": "none",
                                }
                              }
                            >
                              5
                            </span>
                            <span
                              className=""
                              key="code-segement28"
                            >
                              	
                            </span>
                            <span
                              className="token property"
                              key="code-segement29"
                            >
                              "deploymentEnvironmentUuid"
                            </span>
                            <span
                              className="token operator"
                              key="code-segement30"
                            >
                              :
                            </span>
                            <span
                              className=""
                              key="code-segement31"
                            >
                               
                            </span>
                            <span
                              className="token string"
                              key="code-segement32"
                            >
                              "undefined"
                            </span>
                            <span
                              className="token punctuation"
                              key="code-segement33"
                            >
                              ,
                            </span>
                            <span
                              className=""
                              key="code-segement34"
                            >
                              

                            </span>
                            <span
                              className="comment linenumber react-syntax-highlighter-line-number"
                              key="line-number--6"
                              style={
                                Object {
                                  "display": "inline-block",
                                  "minWidth": "2.25em",
                                  "paddingRight": "1em",
                                  "textAlign": "right",
                                  "userSelect": "none",
                                }
                              }
                            >
                              6
                            </span>
                            <span
                              className=""
                              key="code-segement36"
                            >
                              	
                            </span>
                            <span
                              className="token property"
                              key="code-segement37"
                            >
                              "iss"
                            </span>
                            <span
                              className="token operator"
                              key="code-segement38"
                            >
                              :
                            </span>
                            <span
                              className=""
                              key="code-segement39"
                            >
                               
                            </span>
                            <span
                              className="token string"
                              key="code-segement40"
                            >
                              "https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc"
                            </span>
                            <span
                              className="token punctuation"
                              key="code-segement41"
                            >
                              ,
                            </span>
                            <span
                              className=""
                              key="code-segement42"
                            >
                              

                            </span>
                            <span
                              className="comment linenumber react-syntax-highlighter-line-number"
                              key="line-number--7"
                              style={
                                Object {
                                  "display": "inline-block",
                                  "minWidth": "2.25em",
                                  "paddingRight": "1em",
                                  "textAlign": "right",
                                  "userSelect": "none",
                                }
                              }
                            >
                              7
                            </span>
                            <span
                              className=""
                              key="code-segement44"
                            >
                              	
                            </span>
                            <span
                              className="token property"
                              key="code-segement45"
                            >
                              "repositoryUuid"
                            </span>
                            <span
                              className="token operator"
                              key="code-segement46"
                            >
                              :
                            </span>
                            <span
                              className=""
                              key="code-segement47"
                            >
                               
                            </span>
                            <span
                              className="token string"
                              key="code-segement48"
                            >
                              "{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}"
                            </span>
                            <span
                              className="token punctuation"
                              key="code-segement49"
                            >
                              ,
                            </span>
                            <span
                              className=""
                              key="code-segement50"
                            >
                              

                            </span>
                            <span
                              className="comment linenumber react-syntax-highlighter-line-number"
                              key="line-number--8"
                              style={
                                Object {
                                  "display": "inline-block",
                                  "minWidth": "2.25em",
                                  "paddingRight": "1em",
                                  "textAlign": "right",
                                  "userSelect": "none",
                                }
                              }
                            >
                              8
                            </span>
                            <span
                              className=""
                              key="code-segement52"
                            >
                              	
                            </span>
                            <span
                              className="token property"
                              key="code-segement53"
                            >
                              "branchName"
                            </span>
                            <span
                              className="token operator"
                              key="code-segement54"
                            >
                              :
                            </span>
                            <span
                              className=""
                              key="code-segement55"
                            >
                               
                            </span>
                            <span
                              className="token string"
                              key="code-segement56"
                            >
                              "xxxxxxxxx"
                            </span>
                            <span
                              className="token punctuation"
                              key="code-segement57"
                            >
                              ,
                            </span>
                            <span
                              className=""
                              key="code-segement58"
                            >
                              

                            </span>
                            <span
                              className="comment linenumber react-syntax-highlighter-line-number"
                              key="line-number--9"
                              style={
                                Object {
                                  "display": "inline-block",
                                  "minWidth": "2.25em",
                                  "paddingRight": "1em",
                                  "textAlign": "right",
                                  "userSelect": "none",
                                }
                              }
                            >
                              9
                            </span>
                            <span
                              className=""
                              key="code-segement60"
                            >
                              	
                            </span>
                            <span
                              className="token property"
                              key="code-segement61"
                            >
                              "exp"
                            </span>
                            <span
                              className="token operator"
                              key="code-segement62"
                            >
                              :
                            </span>
                            <span
                              className=""
                              key="code-segement63"
                            >
                               
                            </span>
                            <span
                              className="token string"
                              key="code-segement64"
                            >
                              "xxxxxxxxxx"
                            </span>
                            <span
                              className="token punctuation"
                              key="code-segement65"
                            >
                              ,
                            </span>
                            <span
                              className=""
                              key="code-segement66"
                            >
                              

                            </span>
                            <span
                              className="comment linenumber react-syntax-highlighter-line-number"
                              key="line-number--10"
                              style={
                                Object {
                                  "display": "inline-block",
                                  "minWidth": "2.25em",
                                  "paddingRight": "1em",
                                  "textAlign": "right",
                                  "userSelect": "none",
                                }
                              }
                            >
                              10
                            </span>
                            <span
                              className=""
                              key="code-segement68"
                            >
                              	
                            </span>
                            <span
                              className="token property"
                              key="code-segement69"
                            >
                              "iat"
                            </span>
                            <span
                              className="token operator"
                              key="code-segement70"
                            >
                              :
                            </span>
                            <span
                              className=""
                              key="code-segement71"
                            >
                               
                            </span>
                            <span
                              className="token string"
                              key="code-segement72"
                            >
                              "xxxxxxxxxx"
                            </span>
                            <span
                              className="token punctuation"
                              key="code-segement73"
                            >
                              ,
                            </span>
                            <span
                              className=""
                              key="code-segement74"
                            >
                              

                            </span>
                            <span
                              className="comment linenumber react-syntax-highlighter-line-number"
                              key="line-number--11"
                              style={
                                Object {
                                  "display": "inline-block",
                                  "minWidth": "2.25em",
                                  "paddingRight": "1em",
                                  "textAlign": "right",
                                  "userSelect": "none",
                                }
                              }
                            >
                              11
                            </span>
                            <span
                              className=""
                              key="code-segement76"
                            >
                              	
                            </span>
                            <span
                              className="token property"
                              key="code-segement77"
                            >
                              "pipelineUuid"
                            </span>
                            <span
                              className="token operator"
                              key="code-segement78"
                            >
                              :
                            </span>
                            <span
                              className=""
                              key="code-segement79"
                            >
                               
                            </span>
                            <span
                              className="token string"
                              key="code-segement80"
                            >
                              "{xxxxx-xxxxx-xxxx-xxxx-xxxxxxxxxxx}"
                            </span>
                            <span
                              className="token punctuation"
                              key="code-segement81"
                            >
                              ,
                            </span>
                            <span
                              className=""
                              key="code-segement82"
                            >
                              

                            </span>
                            <span
                              className="comment linenumber react-syntax-highlighter-line-number"
                              key="line-number--12"
                              style={
                                Object {
                                  "display": "inline-block",
                                  "minWidth": "2.25em",
                                  "paddingRight": "1em",
                                  "textAlign": "right",
                                  "userSelect": "none",
                                }
                              }
                            >
                              12
                            </span>
                            <span
                              className=""
                              key="code-segement84"
                            >
                              	
                            </span>
                            <span
                              className="token property"
                              key="code-segement85"
                            >
                              "workspaceUuid"
                            </span>
                            <span
                              className="token operator"
                              key="code-segement86"
                            >
                              :
                            </span>
                            <span
                              className=""
                              key="code-segement87"
                            >
                               
                            </span>
                            <span
                              className="token string"
                              key="code-segement88"
                            >
                              "{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}"
                            </span>
                            <span
                              className=""
                              key="code-segement89"
                            >
                              

                            </span>
                            <span
                              className="comment linenumber react-syntax-highlighter-line-number"
                              key="line-number--13"
                              style={
                                Object {
                                  "display": "inline-block",
                                  "minWidth": "2.25em",
                                  "paddingRight": "1em",
                                  "textAlign": "right",
                                  "userSelect": "none",
                                }
                              }
                            >
                              13
                            </span>
                            <span
                              className=""
                              key="code-segement91"
                            />
                            <span
                              className="token punctuation"
                              key="code-segement92"
                            >
                              }
                            </span>
                          </code>
                        </span>
                      </SyntaxHighlighter>
                    </ReactAsyncHighlighter>
                  </CodeBlock>
                  <Memo(CopyButton)
                    content="{
	\\"sub\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}:undefined:{stepUuid}\\",
	\\"aud\\": \\"ari:cloud:bitbucket::workspace/3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a\\",
	\\"stepUuid\\": \\"{xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx}\\",
	\\"deploymentEnvironmentUuid\\": \\"undefined\\",
	\\"iss\\": \\"https://api.bitbucket.org/2.0/workspaces/test/pipelines-config/identity/oidc\\",
	\\"repositoryUuid\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}\\",
	\\"branchName\\": \\"xxxxxxxxx\\",
	\\"exp\\": \\"xxxxxxxxxx\\",
	\\"iat\\": \\"xxxxxxxxxx\\",
	\\"pipelineUuid\\": \\"{xxxxx-xxxxx-xxxx-xxxx-xxxxxxxxxxx}\\",
	\\"workspaceUuid\\": \\"{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}\\"
}"
                    name="claim"
                  >
                    <Tooltip
                      content="Copy"
                      position="right"
                    >
                      <div
                        onBlur={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onMouseDown={[Function]}
                        onMouseOut={[Function]}
                        onMouseOver={[Function]}
                        role="presentation"
                      >
                        <styled.div
                          onClick={[Function]}
                        >
                          <div
                            className="c2"
                            onClick={[Function]}
                          >
                            <styled.div>
                              <div
                                className="c3"
                              >
                                <CopyIcon
                                  label="Copy claim"
                                  size="small"
                                >
                                  <Memo(Icon)
                                    dangerouslySetGlyph="<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>"
                                    label="Copy claim"
                                    size="small"
                                  >
                                    <span
                                      aria-label="Copy claim"
                                      className="emotion-3"
                                      dangerouslySetInnerHTML={
                                        Object {
                                          "__html": "<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>",
                                        }
                                      }
                                      role="img"
                                      style={
                                        Object {
                                          "--icon-primary-color": "currentColor",
                                          "--icon-secondary-color": "var(--background-default, #FFFFFF)",
                                        }
                                      }
                                    />
                                  </Memo(Icon)>
                                </CopyIcon>
                              </div>
                            </styled.div>
                          </div>
                        </styled.div>
                      </div>
                    </Tooltip>
                  </Memo(CopyButton)>
                </div>
              </styled.div>
            </Memo(CopyableCodeBlock)>
          </div>
        </styled.div>
      </div>
    </div>
  </AnimateHeight>
  <styled.div>
    <div
      className="c0"
    >
      <h5>
        UUIDs
      </h5>
      <styled.hr>
        <hr
          className="c6"
        />
      </styled.hr>
      <styled.div>
        <div
          className="c7"
        >
          <styled.div>
            <div
              className="c8"
            >
              Workspace UUID
            </div>
          </styled.div>
          <styled.div>
            <div
              className="c9"
            >
              {3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}
            </div>
          </styled.div>
          <styled.div>
            <div
              className="c10"
            >
              <Memo(CopyButton)
                content="{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}"
                name="accountUuid"
              >
                <Tooltip
                  content="Copy"
                  position="right"
                >
                  <div
                    onBlur={[Function]}
                    onClick={[Function]}
                    onFocus={[Function]}
                    onMouseDown={[Function]}
                    onMouseOut={[Function]}
                    onMouseOver={[Function]}
                    role="presentation"
                  >
                    <styled.div
                      onClick={[Function]}
                    >
                      <div
                        className="c2"
                        onClick={[Function]}
                      >
                        <styled.div>
                          <div
                            className="c3"
                          >
                            <CopyIcon
                              label="Copy accountUuid"
                              size="small"
                            >
                              <Memo(Icon)
                                dangerouslySetGlyph="<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>"
                                label="Copy accountUuid"
                                size="small"
                              >
                                <span
                                  aria-label="Copy accountUuid"
                                  className="emotion-3"
                                  dangerouslySetInnerHTML={
                                    Object {
                                      "__html": "<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>",
                                    }
                                  }
                                  role="img"
                                  style={
                                    Object {
                                      "--icon-primary-color": "currentColor",
                                      "--icon-secondary-color": "var(--background-default, #FFFFFF)",
                                    }
                                  }
                                />
                              </Memo(Icon)>
                            </CopyIcon>
                          </div>
                        </styled.div>
                      </div>
                    </styled.div>
                  </div>
                </Tooltip>
              </Memo(CopyButton)>
            </div>
          </styled.div>
        </div>
      </styled.div>
      <styled.div>
        <div
          className="c7"
        >
          <styled.div>
            <div
              className="c8"
            >
              Repository UUID
            </div>
          </styled.div>
          <styled.div>
            <div
              className="c9"
            >
              {3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}
            </div>
          </styled.div>
          <styled.div>
            <div
              className="c10"
            >
              <Memo(CopyButton)
                content="{3b7fd7c7-6dc8-4054-9c53-69182c4e4d2a}"
                name="repoUuid"
              >
                <Tooltip
                  content="Copy"
                  position="right"
                >
                  <div
                    onBlur={[Function]}
                    onClick={[Function]}
                    onFocus={[Function]}
                    onMouseDown={[Function]}
                    onMouseOut={[Function]}
                    onMouseOver={[Function]}
                    role="presentation"
                  >
                    <styled.div
                      onClick={[Function]}
                    >
                      <div
                        className="c2"
                        onClick={[Function]}
                      >
                        <styled.div>
                          <div
                            className="c3"
                          >
                            <CopyIcon
                              label="Copy repoUuid"
                              size="small"
                            >
                              <Memo(Icon)
                                dangerouslySetGlyph="<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>"
                                label="Copy repoUuid"
                                size="small"
                              >
                                <span
                                  aria-label="Copy repoUuid"
                                  className="emotion-3"
                                  dangerouslySetInnerHTML={
                                    Object {
                                      "__html": "<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>",
                                    }
                                  }
                                  role="img"
                                  style={
                                    Object {
                                      "--icon-primary-color": "currentColor",
                                      "--icon-secondary-color": "var(--background-default, #FFFFFF)",
                                    }
                                  }
                                />
                              </Memo(Icon)>
                            </CopyIcon>
                          </div>
                        </styled.div>
                      </div>
                    </styled.div>
                  </div>
                </Tooltip>
              </Memo(CopyButton)>
            </div>
          </styled.div>
        </div>
      </styled.div>
    </div>
  </styled.div>
  <styled.div>
    <div
      className="c0"
    >
      <h5>
        Deployment environments
      </h5>
      <styled.hr>
        <hr
          className="c6"
        />
      </styled.hr>
      <styled.div>
        <div
          className="c11"
        >
          <WithAnalyticsContext(WithAnalyticsEvents(AtlaskitSelect))
            id="select_environment"
            instanceId="select_environment"
            isClearable={false}
            isSearchable={true}
            name="deploymentEnvironmentType"
            onChange={[Function]}
            options={
              Array [
                Object {
                  "label": "Other",
                  "options": Array [
                    Object {
                      "label": "No environment",
                      "uuid": "",
                      "value": "no environment",
                    },
                  ],
                },
                Object {
                  "label": "Test Environments",
                  "options": Array [
                    Object {
                      "label": "foo",
                      "uuid": "{blah}",
                      "value": "bar",
                    },
                  ],
                },
              ]
            }
            placeholder="Select Environment"
          >
            <AnalyticsContext
              data={
                Object {
                  "componentName": "select",
                  "packageName": "@atlaskit/fabric",
                  "packageVersion": "0.0.0",
                }
              }
            >
              <WithAnalyticsEvents(AtlaskitSelect)
                id="select_environment"
                instanceId="select_environment"
                isClearable={false}
                isSearchable={true}
                name="deploymentEnvironmentType"
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "label": "Other",
                      "options": Array [
                        Object {
                          "label": "No environment",
                          "uuid": "",
                          "value": "no environment",
                        },
                      ],
                    },
                    Object {
                      "label": "Test Environments",
                      "options": Array [
                        Object {
                          "label": "foo",
                          "uuid": "{blah}",
                          "value": "bar",
                        },
                      ],
                    },
                  ]
                }
                placeholder="Select Environment"
              >
                <AtlaskitSelect
                  components={Object {}}
                  createAnalyticsEvent={[Function]}
                  id="select_environment"
                  instanceId="select_environment"
                  isClearable={false}
                  isSearchable={true}
                  name="deploymentEnvironmentType"
                  onChange={[Function]}
                  onClickPreventDefault={true}
                  options={
                    Array [
                      Object {
                        "label": "Other",
                        "options": Array [
                          Object {
                            "label": "No environment",
                            "uuid": "",
                            "value": "no environment",
                          },
                        ],
                      },
                      Object {
                        "label": "Test Environments",
                        "options": Array [
                          Object {
                            "label": "foo",
                            "uuid": "{blah}",
                            "value": "bar",
                          },
                        ],
                      },
                    ]
                  }
                  placeholder="Select Environment"
                  spacing="default"
                  styles={Object {}}
                  tabSelectsValue={false}
                  validationState="default"
                >
                  <StateManager
                    aria-live="assertive"
                    components={
                      Object {
                        "ClearIndicator": [Function],
                        "DropdownIndicator": [Function],
                        "IndicatorSeparator": null,
                        "LoadingIndicator": [Function],
                        "MultiValueRemove": [Function],
                      }
                    }
                    createAnalyticsEvent={[Function]}
                    defaultInputValue=""
                    defaultMenuIsOpen={false}
                    defaultValue={null}
                    id="select_environment"
                    instanceId="select_environment"
                    isClearable={false}
                    isSearchable={true}
                    name="deploymentEnvironmentType"
                    onChange={[Function]}
                    onClickPreventDefault={true}
                    options={
                      Array [
                        Object {
                          "label": "Other",
                          "options": Array [
                            Object {
                              "label": "No environment",
                              "uuid": "",
                              "value": "no environment",
                            },
                          ],
                        },
                        Object {
                          "label": "Test Environments",
                          "options": Array [
                            Object {
                              "label": "foo",
                              "uuid": "{blah}",
                              "value": "bar",
                            },
                          ],
                        },
                      ]
                    }
                    placeholder="Select Environment"
                    styles={
                      Object {
                        "clearIndicator": [Function],
                        "container": [Function],
                        "control": [Function],
                        "dropdownIndicator": [Function],
                        "indicatorsContainer": [Function],
                        "input": [Function],
                        "loadingIndicator": [Function],
                        "menu": [Function],
                        "menuList": [Function],
                        "multiValue": [Function],
                        "multiValueLabel": [Function],
                        "multiValueRemove": [Function],
                        "option": [Function],
                        "placeholder": [Function],
                        "singleValue": [Function],
                        "valueContainer": [Function],
                      }
                    }
                    tabSelectsValue={false}
                  >
                    <Select
                      aria-live="assertive"
                      backspaceRemovesValue={true}
                      blurInputOnSelect={true}
                      captureMenuScroll={false}
                      closeMenuOnScroll={false}
                      closeMenuOnSelect={true}
                      components={
                        Object {
                          "ClearIndicator": [Function],
                          "DropdownIndicator": [Function],
                          "IndicatorSeparator": null,
                          "LoadingIndicator": [Function],
                          "MultiValueRemove": [Function],
                        }
                      }
                      controlShouldRenderValue={true}
                      createAnalyticsEvent={[Function]}
                      escapeClearsValue={false}
                      filterOption={[Function]}
                      formatGroupLabel={[Function]}
                      getOptionLabel={[Function]}
                      getOptionValue={[Function]}
                      id="select_environment"
                      inputValue=""
                      instanceId="select_environment"
                      isClearable={false}
                      isDisabled={false}
                      isLoading={false}
                      isMulti={false}
                      isOptionDisabled={[Function]}
                      isRtl={false}
                      isSearchable={true}
                      loadingMessage={[Function]}
                      maxMenuHeight={300}
                      menuIsOpen={false}
                      menuPlacement="bottom"
                      menuPosition="absolute"
                      menuShouldBlockScroll={false}
                      menuShouldScrollIntoView={true}
                      minMenuHeight={140}
                      name="deploymentEnvironmentType"
                      noOptionsMessage={[Function]}
                      onChange={[Function]}
                      onClickPreventDefault={true}
                      onInputChange={[Function]}
                      onMenuClose={[Function]}
                      onMenuOpen={[Function]}
                      openMenuOnClick={true}
                      openMenuOnFocus={false}
                      options={
                        Array [
                          Object {
                            "label": "Other",
                            "options": Array [
                              Object {
                                "label": "No environment",
                                "uuid": "",
                                "value": "no environment",
                              },
                            ],
                          },
                          Object {
                            "label": "Test Environments",
                            "options": Array [
                              Object {
                                "label": "foo",
                                "uuid": "{blah}",
                                "value": "bar",
                              },
                            ],
                          },
                        ]
                      }
                      pageSize={5}
                      placeholder="Select Environment"
                      screenReaderStatus={[Function]}
                      styles={
                        Object {
                          "clearIndicator": [Function],
                          "container": [Function],
                          "control": [Function],
                          "dropdownIndicator": [Function],
                          "indicatorsContainer": [Function],
                          "input": [Function],
                          "loadingIndicator": [Function],
                          "menu": [Function],
                          "menuList": [Function],
                          "multiValue": [Function],
                          "multiValueLabel": [Function],
                          "multiValueRemove": [Function],
                          "option": [Function],
                          "placeholder": [Function],
                          "singleValue": [Function],
                          "valueContainer": [Function],
                        }
                      }
                      tabIndex="0"
                      tabSelectsValue={false}
                      value={null}
                    >
                      <SelectContainer
                        clearValue={[Function]}
                        cx={[Function]}
                        getStyles={[Function]}
                        getValue={[Function]}
                        hasValue={false}
                        innerProps={
                          Object {
                            "id": "select_environment",
                            "onKeyDown": [Function],
                          }
                        }
                        isDisabled={false}
                        isFocused={false}
                        isMulti={false}
                        isRtl={false}
                        options={
                          Array [
                            Object {
                              "label": "Other",
                              "options": Array [
                                Object {
                                  "label": "No environment",
                                  "uuid": "",
                                  "value": "no environment",
                                },
                              ],
                            },
                            Object {
                              "label": "Test Environments",
                              "options": Array [
                                Object {
                                  "label": "foo",
                                  "uuid": "{blah}",
                                  "value": "bar",
                                },
                              ],
                            },
                          ]
                        }
                        selectOption={[Function]}
                        selectProps={
                          Object {
                            "aria-live": "assertive",
                            "backspaceRemovesValue": true,
                            "blurInputOnSelect": true,
                            "captureMenuScroll": false,
                            "closeMenuOnScroll": false,
                            "closeMenuOnSelect": true,
                            "components": Object {
                              "ClearIndicator": [Function],
                              "DropdownIndicator": [Function],
                              "IndicatorSeparator": null,
                              "LoadingIndicator": [Function],
                              "MultiValueRemove": [Function],
                            },
                            "controlShouldRenderValue": true,
                            "createAnalyticsEvent": [Function],
                            "escapeClearsValue": false,
                            "filterOption": [Function],
                            "formatGroupLabel": [Function],
                            "getOptionLabel": [Function],
                            "getOptionValue": [Function],
                            "id": "select_environment",
                            "inputValue": "",
                            "instanceId": "select_environment",
                            "isClearable": false,
                            "isDisabled": false,
                            "isLoading": false,
                            "isMulti": false,
                            "isOptionDisabled": [Function],
                            "isRtl": false,
                            "isSearchable": true,
                            "loadingMessage": [Function],
                            "maxMenuHeight": 300,
                            "menuIsOpen": false,
                            "menuPlacement": "bottom",
                            "menuPosition": "absolute",
                            "menuShouldBlockScroll": false,
                            "menuShouldScrollIntoView": true,
                            "minMenuHeight": 140,
                            "name": "deploymentEnvironmentType",
                            "noOptionsMessage": [Function],
                            "onChange": [Function],
                            "onClickPreventDefault": true,
                            "onInputChange": [Function],
                            "onMenuClose": [Function],
                            "onMenuOpen": [Function],
                            "openMenuOnClick": true,
                            "openMenuOnFocus": false,
                            "options": Array [
                              Object {
                                "label": "Other",
                                "options": Array [
                                  Object {
                                    "label": "No environment",
                                    "uuid": "",
                                    "value": "no environment",
                                  },
                                ],
                              },
                              Object {
                                "label": "Test Environments",
                                "options": Array [
                                  Object {
                                    "label": "foo",
                                    "uuid": "{blah}",
                                    "value": "bar",
                                  },
                                ],
                              },
                            ],
                            "pageSize": 5,
                            "placeholder": "Select Environment",
                            "screenReaderStatus": [Function],
                            "styles": Object {
                              "clearIndicator": [Function],
                              "container": [Function],
                              "control": [Function],
                              "dropdownIndicator": [Function],
                              "indicatorsContainer": [Function],
                              "input": [Function],
                              "loadingIndicator": [Function],
                              "menu": [Function],
                              "menuList": [Function],
                              "multiValue": [Function],
                              "multiValueLabel": [Function],
                              "multiValueRemove": [Function],
                              "option": [Function],
                              "placeholder": [Function],
                              "singleValue": [Function],
                              "valueContainer": [Function],
                            },
                            "tabIndex": "0",
                            "tabSelectsValue": false,
                            "value": null,
                          }
                        }
                        setValue={[Function]}
                        theme={
                          Object {
                            "borderRadius": 4,
                            "colors": Object {
                              "danger": "#DE350B",
                              "dangerLight": "#FFBDAD",
                              "neutral0": "hsl(0, 0%, 100%)",
                              "neutral10": "hsl(0, 0%, 90%)",
                              "neutral20": "hsl(0, 0%, 80%)",
                              "neutral30": "hsl(0, 0%, 70%)",
                              "neutral40": "hsl(0, 0%, 60%)",
                              "neutral5": "hsl(0, 0%, 95%)",
                              "neutral50": "hsl(0, 0%, 50%)",
                              "neutral60": "hsl(0, 0%, 40%)",
                              "neutral70": "hsl(0, 0%, 30%)",
                              "neutral80": "hsl(0, 0%, 20%)",
                              "neutral90": "hsl(0, 0%, 10%)",
                              "primary": "#2684FF",
                              "primary25": "#DEEBFF",
                              "primary50": "#B2D4FF",
                              "primary75": "#4C9AFF",
                            },
                            "spacing": Object {
                              "baseUnit": 4,
                              "controlHeight": 38,
                              "menuGutter": 8,
                            },
                          }
                        }
                      >
                        <div
                          className=" emotion-25"
                          id="select_environment"
                          onKeyDown={[Function]}
                        >
                          <LiveRegion
                            ariaSelection={null}
                            clearValue={[Function]}
                            cx={[Function]}
                            focusableOptions={Array []}
                            focusedOption={null}
                            focusedValue={null}
                            getStyles={[Function]}
                            getValue={[Function]}
                            hasValue={false}
                            isFocused={false}
                            isMulti={false}
                            isRtl={false}
                            options={
                              Array [
                                Object {
                                  "label": "Other",
                                  "options": Array [
                                    Object {
                                      "label": "No environment",
                                      "uuid": "",
                                      "value": "no environment",
                                    },
                                  ],
                                },
                                Object {
                                  "label": "Test Environments",
                                  "options": Array [
                                    Object {
                                      "label": "foo",
                                      "uuid": "{blah}",
                                      "value": "bar",
                                    },
                                  ],
                                },
                              ]
                            }
                            selectOption={[Function]}
                            selectProps={
                              Object {
                                "aria-live": "assertive",
                                "backspaceRemovesValue": true,
                                "blurInputOnSelect": true,
                                "captureMenuScroll": false,
                                "closeMenuOnScroll": false,
                                "closeMenuOnSelect": true,
                                "components": Object {
                                  "ClearIndicator": [Function],
                                  "DropdownIndicator": [Function],
                                  "IndicatorSeparator": null,
                                  "LoadingIndicator": [Function],
                                  "MultiValueRemove": [Function],
                                },
                                "controlShouldRenderValue": true,
                                "createAnalyticsEvent": [Function],
                                "escapeClearsValue": false,
                                "filterOption": [Function],
                                "formatGroupLabel": [Function],
                                "getOptionLabel": [Function],
                                "getOptionValue": [Function],
                                "id": "select_environment",
                                "inputValue": "",
                                "instanceId": "select_environment",
                                "isClearable": false,
                                "isDisabled": false,
                                "isLoading": false,
                                "isMulti": false,
                                "isOptionDisabled": [Function],
                                "isRtl": false,
                                "isSearchable": true,
                                "loadingMessage": [Function],
                                "maxMenuHeight": 300,
                                "menuIsOpen": false,
                                "menuPlacement": "bottom",
                                "menuPosition": "absolute",
                                "menuShouldBlockScroll": false,
                                "menuShouldScrollIntoView": true,
                                "minMenuHeight": 140,
                                "name": "deploymentEnvironmentType",
                                "noOptionsMessage": [Function],
                                "onChange": [Function],
                                "onClickPreventDefault": true,
                                "onInputChange": [Function],
                                "onMenuClose": [Function],
                                "onMenuOpen": [Function],
                                "openMenuOnClick": true,
                                "openMenuOnFocus": false,
                                "options": Array [
                                  Object {
                                    "label": "Other",
                                    "options": Array [
                                      Object {
                                        "label": "No environment",
                                        "uuid": "",
                                        "value": "no environment",
                                      },
                                    ],
                                  },
                                  Object {
                                    "label": "Test Environments",
                                    "options": Array [
                                      Object {
                                        "label": "foo",
                                        "uuid": "{blah}",
                                        "value": "bar",
                                      },
                                    ],
                                  },
                                ],
                                "pageSize": 5,
                                "placeholder": "Select Environment",
                                "screenReaderStatus": [Function],
                                "styles": Object {
                                  "clearIndicator": [Function],
                                  "container": [Function],
                                  "control": [Function],
                                  "dropdownIndicator": [Function],
                                  "indicatorsContainer": [Function],
                                  "input": [Function],
                                  "loadingIndicator": [Function],
                                  "menu": [Function],
                                  "menuList": [Function],
                                  "multiValue": [Function],
                                  "multiValueLabel": [Function],
                                  "multiValueRemove": [Function],
                                  "option": [Function],
                                  "placeholder": [Function],
                                  "singleValue": [Function],
                                  "valueContainer": [Function],
                                },
                                "tabIndex": "0",
                                "tabSelectsValue": false,
                                "value": null,
                              }
                            }
                            selectValue={Array []}
                            setValue={[Function]}
                            theme={
                              Object {
                                "borderRadius": 4,
                                "colors": Object {
                                  "danger": "#DE350B",
                                  "dangerLight": "#FFBDAD",
                                  "neutral0": "hsl(0, 0%, 100%)",
                                  "neutral10": "hsl(0, 0%, 90%)",
                                  "neutral20": "hsl(0, 0%, 80%)",
                                  "neutral30": "hsl(0, 0%, 70%)",
                                  "neutral40": "hsl(0, 0%, 60%)",
                                  "neutral5": "hsl(0, 0%, 95%)",
                                  "neutral50": "hsl(0, 0%, 50%)",
                                  "neutral60": "hsl(0, 0%, 40%)",
                                  "neutral70": "hsl(0, 0%, 30%)",
                                  "neutral80": "hsl(0, 0%, 20%)",
                                  "neutral90": "hsl(0, 0%, 10%)",
                                  "primary": "#2684FF",
                                  "primary25": "#DEEBFF",
                                  "primary50": "#B2D4FF",
                                  "primary75": "#4C9AFF",
                                },
                                "spacing": Object {
                                  "baseUnit": 4,
                                  "controlHeight": 38,
                                  "menuGutter": 8,
                                },
                              }
                            }
                          >
                            <A11yText
                              aria-atomic="false"
                              aria-live="assertive"
                              aria-relevant="additions text"
                            >
                              <span
                                aria-atomic="false"
                                aria-live="assertive"
                                aria-relevant="additions text"
                                className="emotion-17"
                              />
                            </A11yText>
                          </LiveRegion>
                          <Control
                            clearValue={[Function]}
                            cx={[Function]}
                            getStyles={[Function]}
                            getValue={[Function]}
                            hasValue={false}
                            innerProps={
                              Object {
                                "onMouseDown": [Function],
                                "onTouchEnd": [Function],
                              }
                            }
                            innerRef={[Function]}
                            isDisabled={false}
                            isFocused={false}
                            isMulti={false}
                            isRtl={false}
                            menuIsOpen={false}
                            options={
                              Array [
                                Object {
                                  "label": "Other",
                                  "options": Array [
                                    Object {
                                      "label": "No environment",
                                      "uuid": "",
                                      "value": "no environment",
                                    },
                                  ],
                                },
                                Object {
                                  "label": "Test Environments",
                                  "options": Array [
                                    Object {
                                      "label": "foo",
                                      "uuid": "{blah}",
                                      "value": "bar",
                                    },
                                  ],
                                },
                              ]
                            }
                            selectOption={[Function]}
                            selectProps={
                              Object {
                                "aria-live": "assertive",
                                "backspaceRemovesValue": true,
                                "blurInputOnSelect": true,
                                "captureMenuScroll": false,
                                "closeMenuOnScroll": false,
                                "closeMenuOnSelect": true,
                                "components": Object {
                                  "ClearIndicator": [Function],
                                  "DropdownIndicator": [Function],
                                  "IndicatorSeparator": null,
                                  "LoadingIndicator": [Function],
                                  "MultiValueRemove": [Function],
                                },
                                "controlShouldRenderValue": true,
                                "createAnalyticsEvent": [Function],
                                "escapeClearsValue": false,
                                "filterOption": [Function],
                                "formatGroupLabel": [Function],
                                "getOptionLabel": [Function],
                                "getOptionValue": [Function],
                                "id": "select_environment",
                                "inputValue": "",
                                "instanceId": "select_environment",
                                "isClearable": false,
                                "isDisabled": false,
                                "isLoading": false,
                                "isMulti": false,
                                "isOptionDisabled": [Function],
                                "isRtl": false,
                                "isSearchable": true,
                                "loadingMessage": [Function],
                                "maxMenuHeight": 300,
                                "menuIsOpen": false,
                                "menuPlacement": "bottom",
                                "menuPosition": "absolute",
                                "menuShouldBlockScroll": false,
                                "menuShouldScrollIntoView": true,
                                "minMenuHeight": 140,
                                "name": "deploymentEnvironmentType",
                                "noOptionsMessage": [Function],
                                "onChange": [Function],
                                "onClickPreventDefault": true,
                                "onInputChange": [Function],
                                "onMenuClose": [Function],
                                "onMenuOpen": [Function],
                                "openMenuOnClick": true,
                                "openMenuOnFocus": false,
                                "options": Array [
                                  Object {
                                    "label": "Other",
                                    "options": Array [
                                      Object {
                                        "label": "No environment",
                                        "uuid": "",
                                        "value": "no environment",
                                      },
                                    ],
                                  },
                                  Object {
                                    "label": "Test Environments",
                                    "options": Array [
                                      Object {
                                        "label": "foo",
                                        "uuid": "{blah}",
                                        "value": "bar",
                                      },
                                    ],
                                  },
                                ],
                                "pageSize": 5,
                                "placeholder": "Select Environment",
                                "screenReaderStatus": [Function],
                                "styles": Object {
                                  "clearIndicator": [Function],
                                  "container": [Function],
                                  "control": [Function],
                                  "dropdownIndicator": [Function],
                                  "indicatorsContainer": [Function],
                                  "input": [Function],
                                  "loadingIndicator": [Function],
                                  "menu": [Function],
                                  "menuList": [Function],
                                  "multiValue": [Function],
                                  "multiValueLabel": [Function],
                                  "multiValueRemove": [Function],
                                  "option": [Function],
                                  "placeholder": [Function],
                                  "singleValue": [Function],
                                  "valueContainer": [Function],
                                },
                                "tabIndex": "0",
                                "tabSelectsValue": false,
                                "value": null,
                              }
                            }
                            setValue={[Function]}
                            theme={
                              Object {
                                "borderRadius": 4,
                                "colors": Object {
                                  "danger": "#DE350B",
                                  "dangerLight": "#FFBDAD",
                                  "neutral0": "hsl(0, 0%, 100%)",
                                  "neutral10": "hsl(0, 0%, 90%)",
                                  "neutral20": "hsl(0, 0%, 80%)",
                                  "neutral30": "hsl(0, 0%, 70%)",
                                  "neutral40": "hsl(0, 0%, 60%)",
                                  "neutral5": "hsl(0, 0%, 95%)",
                                  "neutral50": "hsl(0, 0%, 50%)",
                                  "neutral60": "hsl(0, 0%, 40%)",
                                  "neutral70": "hsl(0, 0%, 30%)",
                                  "neutral80": "hsl(0, 0%, 20%)",
                                  "neutral90": "hsl(0, 0%, 10%)",
                                  "primary": "#2684FF",
                                  "primary25": "#DEEBFF",
                                  "primary50": "#B2D4FF",
                                  "primary75": "#4C9AFF",
                                },
                                "spacing": Object {
                                  "baseUnit": 4,
                                  "controlHeight": 38,
                                  "menuGutter": 8,
                                },
                              }
                            }
                          >
                            <div
                              className=" emotion-24"
                              onMouseDown={[Function]}
                              onTouchEnd={[Function]}
                            >
                              <ValueContainer
                                clearValue={[Function]}
                                cx={[Function]}
                                getStyles={[Function]}
                                getValue={[Function]}
                                hasValue={false}
                                isDisabled={false}
                                isMulti={false}
                                isRtl={false}
                                options={
                                  Array [
                                    Object {
                                      "label": "Other",
                                      "options": Array [
                                        Object {
                                          "label": "No environment",
                                          "uuid": "",
                                          "value": "no environment",
                                        },
                                      ],
                                    },
                                    Object {
                                      "label": "Test Environments",
                                      "options": Array [
                                        Object {
                                          "label": "foo",
                                          "uuid": "{blah}",
                                          "value": "bar",
                                        },
                                      ],
                                    },
                                  ]
                                }
                                selectOption={[Function]}
                                selectProps={
                                  Object {
                                    "aria-live": "assertive",
                                    "backspaceRemovesValue": true,
                                    "blurInputOnSelect": true,
                                    "captureMenuScroll": false,
                                    "closeMenuOnScroll": false,
                                    "closeMenuOnSelect": true,
                                    "components": Object {
                                      "ClearIndicator": [Function],
                                      "DropdownIndicator": [Function],
                                      "IndicatorSeparator": null,
                                      "LoadingIndicator": [Function],
                                      "MultiValueRemove": [Function],
                                    },
                                    "controlShouldRenderValue": true,
                                    "createAnalyticsEvent": [Function],
                                    "escapeClearsValue": false,
                                    "filterOption": [Function],
                                    "formatGroupLabel": [Function],
                                    "getOptionLabel": [Function],
                                    "getOptionValue": [Function],
                                    "id": "select_environment",
                                    "inputValue": "",
                                    "instanceId": "select_environment",
                                    "isClearable": false,
                                    "isDisabled": false,
                                    "isLoading": false,
                                    "isMulti": false,
                                    "isOptionDisabled": [Function],
                                    "isRtl": false,
                                    "isSearchable": true,
                                    "loadingMessage": [Function],
                                    "maxMenuHeight": 300,
                                    "menuIsOpen": false,
                                    "menuPlacement": "bottom",
                                    "menuPosition": "absolute",
                                    "menuShouldBlockScroll": false,
                                    "menuShouldScrollIntoView": true,
                                    "minMenuHeight": 140,
                                    "name": "deploymentEnvironmentType",
                                    "noOptionsMessage": [Function],
                                    "onChange": [Function],
                                    "onClickPreventDefault": true,
                                    "onInputChange": [Function],
                                    "onMenuClose": [Function],
                                    "onMenuOpen": [Function],
                                    "openMenuOnClick": true,
                                    "openMenuOnFocus": false,
                                    "options": Array [
                                      Object {
                                        "label": "Other",
                                        "options": Array [
                                          Object {
                                            "label": "No environment",
                                            "uuid": "",
                                            "value": "no environment",
                                          },
                                        ],
                                      },
                                      Object {
                                        "label": "Test Environments",
                                        "options": Array [
                                          Object {
                                            "label": "foo",
                                            "uuid": "{blah}",
                                            "value": "bar",
                                          },
                                        ],
                                      },
                                    ],
                                    "pageSize": 5,
                                    "placeholder": "Select Environment",
                                    "screenReaderStatus": [Function],
                                    "styles": Object {
                                      "clearIndicator": [Function],
                                      "container": [Function],
                                      "control": [Function],
                                      "dropdownIndicator": [Function],
                                      "indicatorsContainer": [Function],
                                      "input": [Function],
                                      "loadingIndicator": [Function],
                                      "menu": [Function],
                                      "menuList": [Function],
                                      "multiValue": [Function],
                                      "multiValueLabel": [Function],
                                      "multiValueRemove": [Function],
                                      "option": [Function],
                                      "placeholder": [Function],
                                      "singleValue": [Function],
                                      "valueContainer": [Function],
                                    },
                                    "tabIndex": "0",
                                    "tabSelectsValue": false,
                                    "value": null,
                                  }
                                }
                                setValue={[Function]}
                                theme={
                                  Object {
                                    "borderRadius": 4,
                                    "colors": Object {
                                      "danger": "#DE350B",
                                      "dangerLight": "#FFBDAD",
                                      "neutral0": "hsl(0, 0%, 100%)",
                                      "neutral10": "hsl(0, 0%, 90%)",
                                      "neutral20": "hsl(0, 0%, 80%)",
                                      "neutral30": "hsl(0, 0%, 70%)",
                                      "neutral40": "hsl(0, 0%, 60%)",
                                      "neutral5": "hsl(0, 0%, 95%)",
                                      "neutral50": "hsl(0, 0%, 50%)",
                                      "neutral60": "hsl(0, 0%, 40%)",
                                      "neutral70": "hsl(0, 0%, 30%)",
                                      "neutral80": "hsl(0, 0%, 20%)",
                                      "neutral90": "hsl(0, 0%, 10%)",
                                      "primary": "#2684FF",
                                      "primary25": "#DEEBFF",
                                      "primary50": "#B2D4FF",
                                      "primary75": "#4C9AFF",
                                    },
                                    "spacing": Object {
                                      "baseUnit": 4,
                                      "controlHeight": 38,
                                      "menuGutter": 8,
                                    },
                                  }
                                }
                              >
                                <div
                                  className=" emotion-20"
                                >
                                  <Placeholder
                                    clearValue={[Function]}
                                    cx={[Function]}
                                    getStyles={[Function]}
                                    getValue={[Function]}
                                    hasValue={false}
                                    isDisabled={false}
                                    isFocused={false}
                                    isMulti={false}
                                    isRtl={false}
                                    key="placeholder"
                                    options={
                                      Array [
                                        Object {
                                          "label": "Other",
                                          "options": Array [
                                            Object {
                                              "label": "No environment",
                                              "uuid": "",
                                              "value": "no environment",
                                            },
                                          ],
                                        },
                                        Object {
                                          "label": "Test Environments",
                                          "options": Array [
                                            Object {
                                              "label": "foo",
                                              "uuid": "{blah}",
                                              "value": "bar",
                                            },
                                          ],
                                        },
                                      ]
                                    }
                                    selectOption={[Function]}
                                    selectProps={
                                      Object {
                                        "aria-live": "assertive",
                                        "backspaceRemovesValue": true,
                                        "blurInputOnSelect": true,
                                        "captureMenuScroll": false,
                                        "closeMenuOnScroll": false,
                                        "closeMenuOnSelect": true,
                                        "components": Object {
                                          "ClearIndicator": [Function],
                                          "DropdownIndicator": [Function],
                                          "IndicatorSeparator": null,
                                          "LoadingIndicator": [Function],
                                          "MultiValueRemove": [Function],
                                        },
                                        "controlShouldRenderValue": true,
                                        "createAnalyticsEvent": [Function],
                                        "escapeClearsValue": false,
                                        "filterOption": [Function],
                                        "formatGroupLabel": [Function],
                                        "getOptionLabel": [Function],
                                        "getOptionValue": [Function],
                                        "id": "select_environment",
                                        "inputValue": "",
                                        "instanceId": "select_environment",
                                        "isClearable": false,
                                        "isDisabled": false,
                                        "isLoading": false,
                                        "isMulti": false,
                                        "isOptionDisabled": [Function],
                                        "isRtl": false,
                                        "isSearchable": true,
                                        "loadingMessage": [Function],
                                        "maxMenuHeight": 300,
                                        "menuIsOpen": false,
                                        "menuPlacement": "bottom",
                                        "menuPosition": "absolute",
                                        "menuShouldBlockScroll": false,
                                        "menuShouldScrollIntoView": true,
                                        "minMenuHeight": 140,
                                        "name": "deploymentEnvironmentType",
                                        "noOptionsMessage": [Function],
                                        "onChange": [Function],
                                        "onClickPreventDefault": true,
                                        "onInputChange": [Function],
                                        "onMenuClose": [Function],
                                        "onMenuOpen": [Function],
                                        "openMenuOnClick": true,
                                        "openMenuOnFocus": false,
                                        "options": Array [
                                          Object {
                                            "label": "Other",
                                            "options": Array [
                                              Object {
                                                "label": "No environment",
                                                "uuid": "",
                                                "value": "no environment",
                                              },
                                            ],
                                          },
                                          Object {
                                            "label": "Test Environments",
                                            "options": Array [
                                              Object {
                                                "label": "foo",
                                                "uuid": "{blah}",
                                                "value": "bar",
                                              },
                                            ],
                                          },
                                        ],
                                        "pageSize": 5,
                                        "placeholder": "Select Environment",
                                        "screenReaderStatus": [Function],
                                        "styles": Object {
                                          "clearIndicator": [Function],
                                          "container": [Function],
                                          "control": [Function],
                                          "dropdownIndicator": [Function],
                                          "indicatorsContainer": [Function],
                                          "input": [Function],
                                          "loadingIndicator": [Function],
                                          "menu": [Function],
                                          "menuList": [Function],
                                          "multiValue": [Function],
                                          "multiValueLabel": [Function],
                                          "multiValueRemove": [Function],
                                          "option": [Function],
                                          "placeholder": [Function],
                                          "singleValue": [Function],
                                          "valueContainer": [Function],
                                        },
                                        "tabIndex": "0",
                                        "tabSelectsValue": false,
                                        "value": null,
                                      }
                                    }
                                    setValue={[Function]}
                                    theme={
                                      Object {
                                        "borderRadius": 4,
                                        "colors": Object {
                                          "danger": "#DE350B",
                                          "dangerLight": "#FFBDAD",
                                          "neutral0": "hsl(0, 0%, 100%)",
                                          "neutral10": "hsl(0, 0%, 90%)",
                                          "neutral20": "hsl(0, 0%, 80%)",
                                          "neutral30": "hsl(0, 0%, 70%)",
                                          "neutral40": "hsl(0, 0%, 60%)",
                                          "neutral5": "hsl(0, 0%, 95%)",
                                          "neutral50": "hsl(0, 0%, 50%)",
                                          "neutral60": "hsl(0, 0%, 40%)",
                                          "neutral70": "hsl(0, 0%, 30%)",
                                          "neutral80": "hsl(0, 0%, 20%)",
                                          "neutral90": "hsl(0, 0%, 10%)",
                                          "primary": "#2684FF",
                                          "primary25": "#DEEBFF",
                                          "primary50": "#B2D4FF",
                                          "primary75": "#4C9AFF",
                                        },
                                        "spacing": Object {
                                          "baseUnit": 4,
                                          "controlHeight": 38,
                                          "menuGutter": 8,
                                        },
                                      }
                                    }
                                  >
                                    <div
                                      className=" emotion-18"
                                    >
                                      Select Environment
                                    </div>
                                  </Placeholder>
                                  <Input
                                    aria-autocomplete="list"
                                    autoCapitalize="none"
                                    autoComplete="off"
                                    autoCorrect="off"
                                    clearValue={[Function]}
                                    cx={[Function]}
                                    getStyles={[Function]}
                                    getValue={[Function]}
                                    hasValue={false}
                                    id="react-select-select_environment-input"
                                    innerRef={[Function]}
                                    isDisabled={false}
                                    isHidden={false}
                                    isMulti={false}
                                    isRtl={false}
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    options={
                                      Array [
                                        Object {
                                          "label": "Other",
                                          "options": Array [
                                            Object {
                                              "label": "No environment",
                                              "uuid": "",
                                              "value": "no environment",
                                            },
                                          ],
                                        },
                                        Object {
                                          "label": "Test Environments",
                                          "options": Array [
                                            Object {
                                              "label": "foo",
                                              "uuid": "{blah}",
                                              "value": "bar",
                                            },
                                          ],
                                        },
                                      ]
                                    }
                                    selectOption={[Function]}
                                    selectProps={
                                      Object {
                                        "aria-live": "assertive",
                                        "backspaceRemovesValue": true,
                                        "blurInputOnSelect": true,
                                        "captureMenuScroll": false,
                                        "closeMenuOnScroll": false,
                                        "closeMenuOnSelect": true,
                                        "components": Object {
                                          "ClearIndicator": [Function],
                                          "DropdownIndicator": [Function],
                                          "IndicatorSeparator": null,
                                          "LoadingIndicator": [Function],
                                          "MultiValueRemove": [Function],
                                        },
                                        "controlShouldRenderValue": true,
                                        "createAnalyticsEvent": [Function],
                                        "escapeClearsValue": false,
                                        "filterOption": [Function],
                                        "formatGroupLabel": [Function],
                                        "getOptionLabel": [Function],
                                        "getOptionValue": [Function],
                                        "id": "select_environment",
                                        "inputValue": "",
                                        "instanceId": "select_environment",
                                        "isClearable": false,
                                        "isDisabled": false,
                                        "isLoading": false,
                                        "isMulti": false,
                                        "isOptionDisabled": [Function],
                                        "isRtl": false,
                                        "isSearchable": true,
                                        "loadingMessage": [Function],
                                        "maxMenuHeight": 300,
                                        "menuIsOpen": false,
                                        "menuPlacement": "bottom",
                                        "menuPosition": "absolute",
                                        "menuShouldBlockScroll": false,
                                        "menuShouldScrollIntoView": true,
                                        "minMenuHeight": 140,
                                        "name": "deploymentEnvironmentType",
                                        "noOptionsMessage": [Function],
                                        "onChange": [Function],
                                        "onClickPreventDefault": true,
                                        "onInputChange": [Function],
                                        "onMenuClose": [Function],
                                        "onMenuOpen": [Function],
                                        "openMenuOnClick": true,
                                        "openMenuOnFocus": false,
                                        "options": Array [
                                          Object {
                                            "label": "Other",
                                            "options": Array [
                                              Object {
                                                "label": "No environment",
                                                "uuid": "",
                                                "value": "no environment",
                                              },
                                            ],
                                          },
                                          Object {
                                            "label": "Test Environments",
                                            "options": Array [
                                              Object {
                                                "label": "foo",
                                                "uuid": "{blah}",
                                                "value": "bar",
                                              },
                                            ],
                                          },
                                        ],
                                        "pageSize": 5,
                                        "placeholder": "Select Environment",
                                        "screenReaderStatus": [Function],
                                        "styles": Object {
                                          "clearIndicator": [Function],
                                          "container": [Function],
                                          "control": [Function],
                                          "dropdownIndicator": [Function],
                                          "indicatorsContainer": [Function],
                                          "input": [Function],
                                          "loadingIndicator": [Function],
                                          "menu": [Function],
                                          "menuList": [Function],
                                          "multiValue": [Function],
                                          "multiValueLabel": [Function],
                                          "multiValueRemove": [Function],
                                          "option": [Function],
                                          "placeholder": [Function],
                                          "singleValue": [Function],
                                          "valueContainer": [Function],
                                        },
                                        "tabIndex": "0",
                                        "tabSelectsValue": false,
                                        "value": null,
                                      }
                                    }
                                    setValue={[Function]}
                                    spellCheck="false"
                                    tabIndex="0"
                                    theme={
                                      Object {
                                        "borderRadius": 4,
                                        "colors": Object {
                                          "danger": "#DE350B",
                                          "dangerLight": "#FFBDAD",
                                          "neutral0": "hsl(0, 0%, 100%)",
                                          "neutral10": "hsl(0, 0%, 90%)",
                                          "neutral20": "hsl(0, 0%, 80%)",
                                          "neutral30": "hsl(0, 0%, 70%)",
                                          "neutral40": "hsl(0, 0%, 60%)",
                                          "neutral5": "hsl(0, 0%, 95%)",
                                          "neutral50": "hsl(0, 0%, 50%)",
                                          "neutral60": "hsl(0, 0%, 40%)",
                                          "neutral70": "hsl(0, 0%, 30%)",
                                          "neutral80": "hsl(0, 0%, 20%)",
                                          "neutral90": "hsl(0, 0%, 10%)",
                                          "primary": "#2684FF",
                                          "primary25": "#DEEBFF",
                                          "primary50": "#B2D4FF",
                                          "primary75": "#4C9AFF",
                                        },
                                        "spacing": Object {
                                          "baseUnit": 4,
                                          "controlHeight": 38,
                                          "menuGutter": 8,
                                        },
                                      }
                                    }
                                    type="text"
                                    value=""
                                  >
                                    <div
                                      className="emotion-19"
                                    >
                                      <AutosizeInput
                                        aria-autocomplete="list"
                                        autoCapitalize="none"
                                        autoComplete="off"
                                        autoCorrect="off"
                                        className=""
                                        disabled={false}
                                        id="react-select-select_environment-input"
                                        injectStyles={true}
                                        inputRef={[Function]}
                                        inputStyle={
                                          Object {
                                            "background": 0,
                                            "border": 0,
                                            "color": "inherit",
                                            "fontSize": "inherit",
                                            "label": "input",
                                            "opacity": 1,
                                            "outline": 0,
                                            "padding": 0,
                                          }
                                        }
                                        minWidth={1}
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        spellCheck="false"
                                        tabIndex="0"
                                        type="text"
                                        value=""
                                      >
                                        <div
                                          className=""
                                          style={
                                            Object {
                                              "display": "inline-block",
                                            }
                                          }
                                        >
                                          <input
                                            aria-autocomplete="list"
                                            autoCapitalize="none"
                                            autoComplete="off"
                                            autoCorrect="off"
                                            disabled={false}
                                            id="react-select-select_environment-input"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            spellCheck="false"
                                            style={
                                              Object {
                                                "background": 0,
                                                "border": 0,
                                                "boxSizing": "content-box",
                                                "color": "inherit",
                                                "fontSize": "inherit",
                                                "label": "input",
                                                "opacity": 1,
                                                "outline": 0,
                                                "padding": 0,
                                                "width": "2px",
                                              }
                                            }
                                            tabIndex="0"
                                            type="text"
                                            value=""
                                          />
                                          <div
                                            style={
                                              Object {
                                                "height": 0,
                                                "left": 0,
                                                "overflow": "scroll",
                                                "position": "absolute",
                                                "top": 0,
                                                "visibility": "hidden",
                                                "whiteSpace": "pre",
                                              }
                                            }
                                          />
                                        </div>
                                      </AutosizeInput>
                                    </div>
                                  </Input>
                                </div>
                              </ValueContainer>
                              <IndicatorsContainer
                                clearValue={[Function]}
                                cx={[Function]}
                                getStyles={[Function]}
                                getValue={[Function]}
                                hasValue={false}
                                isDisabled={false}
                                isMulti={false}
                                isRtl={false}
                                options={
                                  Array [
                                    Object {
                                      "label": "Other",
                                      "options": Array [
                                        Object {
                                          "label": "No environment",
                                          "uuid": "",
                                          "value": "no environment",
                                        },
                                      ],
                                    },
                                    Object {
                                      "label": "Test Environments",
                                      "options": Array [
                                        Object {
                                          "label": "foo",
                                          "uuid": "{blah}",
                                          "value": "bar",
                                        },
                                      ],
                                    },
                                  ]
                                }
                                selectOption={[Function]}
                                selectProps={
                                  Object {
                                    "aria-live": "assertive",
                                    "backspaceRemovesValue": true,
                                    "blurInputOnSelect": true,
                                    "captureMenuScroll": false,
                                    "closeMenuOnScroll": false,
                                    "closeMenuOnSelect": true,
                                    "components": Object {
                                      "ClearIndicator": [Function],
                                      "DropdownIndicator": [Function],
                                      "IndicatorSeparator": null,
                                      "LoadingIndicator": [Function],
                                      "MultiValueRemove": [Function],
                                    },
                                    "controlShouldRenderValue": true,
                                    "createAnalyticsEvent": [Function],
                                    "escapeClearsValue": false,
                                    "filterOption": [Function],
                                    "formatGroupLabel": [Function],
                                    "getOptionLabel": [Function],
                                    "getOptionValue": [Function],
                                    "id": "select_environment",
                                    "inputValue": "",
                                    "instanceId": "select_environment",
                                    "isClearable": false,
                                    "isDisabled": false,
                                    "isLoading": false,
                                    "isMulti": false,
                                    "isOptionDisabled": [Function],
                                    "isRtl": false,
                                    "isSearchable": true,
                                    "loadingMessage": [Function],
                                    "maxMenuHeight": 300,
                                    "menuIsOpen": false,
                                    "menuPlacement": "bottom",
                                    "menuPosition": "absolute",
                                    "menuShouldBlockScroll": false,
                                    "menuShouldScrollIntoView": true,
                                    "minMenuHeight": 140,
                                    "name": "deploymentEnvironmentType",
                                    "noOptionsMessage": [Function],
                                    "onChange": [Function],
                                    "onClickPreventDefault": true,
                                    "onInputChange": [Function],
                                    "onMenuClose": [Function],
                                    "onMenuOpen": [Function],
                                    "openMenuOnClick": true,
                                    "openMenuOnFocus": false,
                                    "options": Array [
                                      Object {
                                        "label": "Other",
                                        "options": Array [
                                          Object {
                                            "label": "No environment",
                                            "uuid": "",
                                            "value": "no environment",
                                          },
                                        ],
                                      },
                                      Object {
                                        "label": "Test Environments",
                                        "options": Array [
                                          Object {
                                            "label": "foo",
                                            "uuid": "{blah}",
                                            "value": "bar",
                                          },
                                        ],
                                      },
                                    ],
                                    "pageSize": 5,
                                    "placeholder": "Select Environment",
                                    "screenReaderStatus": [Function],
                                    "styles": Object {
                                      "clearIndicator": [Function],
                                      "container": [Function],
                                      "control": [Function],
                                      "dropdownIndicator": [Function],
                                      "indicatorsContainer": [Function],
                                      "input": [Function],
                                      "loadingIndicator": [Function],
                                      "menu": [Function],
                                      "menuList": [Function],
                                      "multiValue": [Function],
                                      "multiValueLabel": [Function],
                                      "multiValueRemove": [Function],
                                      "option": [Function],
                                      "placeholder": [Function],
                                      "singleValue": [Function],
                                      "valueContainer": [Function],
                                    },
                                    "tabIndex": "0",
                                    "tabSelectsValue": false,
                                    "value": null,
                                  }
                                }
                                setValue={[Function]}
                                theme={
                                  Object {
                                    "borderRadius": 4,
                                    "colors": Object {
                                      "danger": "#DE350B",
                                      "dangerLight": "#FFBDAD",
                                      "neutral0": "hsl(0, 0%, 100%)",
                                      "neutral10": "hsl(0, 0%, 90%)",
                                      "neutral20": "hsl(0, 0%, 80%)",
                                      "neutral30": "hsl(0, 0%, 70%)",
                                      "neutral40": "hsl(0, 0%, 60%)",
                                      "neutral5": "hsl(0, 0%, 95%)",
                                      "neutral50": "hsl(0, 0%, 50%)",
                                      "neutral60": "hsl(0, 0%, 40%)",
                                      "neutral70": "hsl(0, 0%, 30%)",
                                      "neutral80": "hsl(0, 0%, 20%)",
                                      "neutral90": "hsl(0, 0%, 10%)",
                                      "primary": "#2684FF",
                                      "primary25": "#DEEBFF",
                                      "primary50": "#B2D4FF",
                                      "primary75": "#4C9AFF",
                                    },
                                    "spacing": Object {
                                      "baseUnit": 4,
                                      "controlHeight": 38,
                                      "menuGutter": 8,
                                    },
                                  }
                                }
                              >
                                <div
                                  className=" emotion-23"
                                >
                                  <DropdownIndicator
                                    clearValue={[Function]}
                                    cx={[Function]}
                                    getStyles={[Function]}
                                    getValue={[Function]}
                                    hasValue={false}
                                    innerProps={
                                      Object {
                                        "aria-hidden": "true",
                                        "onMouseDown": [Function],
                                        "onTouchEnd": [Function],
                                      }
                                    }
                                    isDisabled={false}
                                    isFocused={false}
                                    isMulti={false}
                                    isRtl={false}
                                    options={
                                      Array [
                                        Object {
                                          "label": "Other",
                                          "options": Array [
                                            Object {
                                              "label": "No environment",
                                              "uuid": "",
                                              "value": "no environment",
                                            },
                                          ],
                                        },
                                        Object {
                                          "label": "Test Environments",
                                          "options": Array [
                                            Object {
                                              "label": "foo",
                                              "uuid": "{blah}",
                                              "value": "bar",
                                            },
                                          ],
                                        },
                                      ]
                                    }
                                    selectOption={[Function]}
                                    selectProps={
                                      Object {
                                        "aria-live": "assertive",
                                        "backspaceRemovesValue": true,
                                        "blurInputOnSelect": true,
                                        "captureMenuScroll": false,
                                        "closeMenuOnScroll": false,
                                        "closeMenuOnSelect": true,
                                        "components": Object {
                                          "ClearIndicator": [Function],
                                          "DropdownIndicator": [Function],
                                          "IndicatorSeparator": null,
                                          "LoadingIndicator": [Function],
                                          "MultiValueRemove": [Function],
                                        },
                                        "controlShouldRenderValue": true,
                                        "createAnalyticsEvent": [Function],
                                        "escapeClearsValue": false,
                                        "filterOption": [Function],
                                        "formatGroupLabel": [Function],
                                        "getOptionLabel": [Function],
                                        "getOptionValue": [Function],
                                        "id": "select_environment",
                                        "inputValue": "",
                                        "instanceId": "select_environment",
                                        "isClearable": false,
                                        "isDisabled": false,
                                        "isLoading": false,
                                        "isMulti": false,
                                        "isOptionDisabled": [Function],
                                        "isRtl": false,
                                        "isSearchable": true,
                                        "loadingMessage": [Function],
                                        "maxMenuHeight": 300,
                                        "menuIsOpen": false,
                                        "menuPlacement": "bottom",
                                        "menuPosition": "absolute",
                                        "menuShouldBlockScroll": false,
                                        "menuShouldScrollIntoView": true,
                                        "minMenuHeight": 140,
                                        "name": "deploymentEnvironmentType",
                                        "noOptionsMessage": [Function],
                                        "onChange": [Function],
                                        "onClickPreventDefault": true,
                                        "onInputChange": [Function],
                                        "onMenuClose": [Function],
                                        "onMenuOpen": [Function],
                                        "openMenuOnClick": true,
                                        "openMenuOnFocus": false,
                                        "options": Array [
                                          Object {
                                            "label": "Other",
                                            "options": Array [
                                              Object {
                                                "label": "No environment",
                                                "uuid": "",
                                                "value": "no environment",
                                              },
                                            ],
                                          },
                                          Object {
                                            "label": "Test Environments",
                                            "options": Array [
                                              Object {
                                                "label": "foo",
                                                "uuid": "{blah}",
                                                "value": "bar",
                                              },
                                            ],
                                          },
                                        ],
                                        "pageSize": 5,
                                        "placeholder": "Select Environment",
                                        "screenReaderStatus": [Function],
                                        "styles": Object {
                                          "clearIndicator": [Function],
                                          "container": [Function],
                                          "control": [Function],
                                          "dropdownIndicator": [Function],
                                          "indicatorsContainer": [Function],
                                          "input": [Function],
                                          "loadingIndicator": [Function],
                                          "menu": [Function],
                                          "menuList": [Function],
                                          "multiValue": [Function],
                                          "multiValueLabel": [Function],
                                          "multiValueRemove": [Function],
                                          "option": [Function],
                                          "placeholder": [Function],
                                          "singleValue": [Function],
                                          "valueContainer": [Function],
                                        },
                                        "tabIndex": "0",
                                        "tabSelectsValue": false,
                                        "value": null,
                                      }
                                    }
                                    setValue={[Function]}
                                    theme={
                                      Object {
                                        "borderRadius": 4,
                                        "colors": Object {
                                          "danger": "#DE350B",
                                          "dangerLight": "#FFBDAD",
                                          "neutral0": "hsl(0, 0%, 100%)",
                                          "neutral10": "hsl(0, 0%, 90%)",
                                          "neutral20": "hsl(0, 0%, 80%)",
                                          "neutral30": "hsl(0, 0%, 70%)",
                                          "neutral40": "hsl(0, 0%, 60%)",
                                          "neutral5": "hsl(0, 0%, 95%)",
                                          "neutral50": "hsl(0, 0%, 50%)",
                                          "neutral60": "hsl(0, 0%, 40%)",
                                          "neutral70": "hsl(0, 0%, 30%)",
                                          "neutral80": "hsl(0, 0%, 20%)",
                                          "neutral90": "hsl(0, 0%, 10%)",
                                          "primary": "#2684FF",
                                          "primary25": "#DEEBFF",
                                          "primary50": "#B2D4FF",
                                          "primary75": "#4C9AFF",
                                        },
                                        "spacing": Object {
                                          "baseUnit": 4,
                                          "controlHeight": 38,
                                          "menuGutter": 8,
                                        },
                                      }
                                    }
                                  >
                                    <DropdownIndicator
                                      clearValue={[Function]}
                                      cx={[Function]}
                                      getStyles={[Function]}
                                      getValue={[Function]}
                                      hasValue={false}
                                      innerProps={
                                        Object {
                                          "aria-hidden": "true",
                                          "onMouseDown": [Function],
                                          "onTouchEnd": [Function],
                                        }
                                      }
                                      isDisabled={false}
                                      isFocused={false}
                                      isMulti={false}
                                      isRtl={false}
                                      options={
                                        Array [
                                          Object {
                                            "label": "Other",
                                            "options": Array [
                                              Object {
                                                "label": "No environment",
                                                "uuid": "",
                                                "value": "no environment",
                                              },
                                            ],
                                          },
                                          Object {
                                            "label": "Test Environments",
                                            "options": Array [
                                              Object {
                                                "label": "foo",
                                                "uuid": "{blah}",
                                                "value": "bar",
                                              },
                                            ],
                                          },
                                        ]
                                      }
                                      selectOption={[Function]}
                                      selectProps={
                                        Object {
                                          "aria-live": "assertive",
                                          "backspaceRemovesValue": true,
                                          "blurInputOnSelect": true,
                                          "captureMenuScroll": false,
                                          "closeMenuOnScroll": false,
                                          "closeMenuOnSelect": true,
                                          "components": Object {
                                            "ClearIndicator": [Function],
                                            "DropdownIndicator": [Function],
                                            "IndicatorSeparator": null,
                                            "LoadingIndicator": [Function],
                                            "MultiValueRemove": [Function],
                                          },
                                          "controlShouldRenderValue": true,
                                          "createAnalyticsEvent": [Function],
                                          "escapeClearsValue": false,
                                          "filterOption": [Function],
                                          "formatGroupLabel": [Function],
                                          "getOptionLabel": [Function],
                                          "getOptionValue": [Function],
                                          "id": "select_environment",
                                          "inputValue": "",
                                          "instanceId": "select_environment",
                                          "isClearable": false,
                                          "isDisabled": false,
                                          "isLoading": false,
                                          "isMulti": false,
                                          "isOptionDisabled": [Function],
                                          "isRtl": false,
                                          "isSearchable": true,
                                          "loadingMessage": [Function],
                                          "maxMenuHeight": 300,
                                          "menuIsOpen": false,
                                          "menuPlacement": "bottom",
                                          "menuPosition": "absolute",
                                          "menuShouldBlockScroll": false,
                                          "menuShouldScrollIntoView": true,
                                          "minMenuHeight": 140,
                                          "name": "deploymentEnvironmentType",
                                          "noOptionsMessage": [Function],
                                          "onChange": [Function],
                                          "onClickPreventDefault": true,
                                          "onInputChange": [Function],
                                          "onMenuClose": [Function],
                                          "onMenuOpen": [Function],
                                          "openMenuOnClick": true,
                                          "openMenuOnFocus": false,
                                          "options": Array [
                                            Object {
                                              "label": "Other",
                                              "options": Array [
                                                Object {
                                                  "label": "No environment",
                                                  "uuid": "",
                                                  "value": "no environment",
                                                },
                                              ],
                                            },
                                            Object {
                                              "label": "Test Environments",
                                              "options": Array [
                                                Object {
                                                  "label": "foo",
                                                  "uuid": "{blah}",
                                                  "value": "bar",
                                                },
                                              ],
                                            },
                                          ],
                                          "pageSize": 5,
                                          "placeholder": "Select Environment",
                                          "screenReaderStatus": [Function],
                                          "styles": Object {
                                            "clearIndicator": [Function],
                                            "container": [Function],
                                            "control": [Function],
                                            "dropdownIndicator": [Function],
                                            "indicatorsContainer": [Function],
                                            "input": [Function],
                                            "loadingIndicator": [Function],
                                            "menu": [Function],
                                            "menuList": [Function],
                                            "multiValue": [Function],
                                            "multiValueLabel": [Function],
                                            "multiValueRemove": [Function],
                                            "option": [Function],
                                            "placeholder": [Function],
                                            "singleValue": [Function],
                                            "valueContainer": [Function],
                                          },
                                          "tabIndex": "0",
                                          "tabSelectsValue": false,
                                          "value": null,
                                        }
                                      }
                                      setValue={[Function]}
                                      theme={
                                        Object {
                                          "borderRadius": 4,
                                          "colors": Object {
                                            "danger": "#DE350B",
                                            "dangerLight": "#FFBDAD",
                                            "neutral0": "hsl(0, 0%, 100%)",
                                            "neutral10": "hsl(0, 0%, 90%)",
                                            "neutral20": "hsl(0, 0%, 80%)",
                                            "neutral30": "hsl(0, 0%, 70%)",
                                            "neutral40": "hsl(0, 0%, 60%)",
                                            "neutral5": "hsl(0, 0%, 95%)",
                                            "neutral50": "hsl(0, 0%, 50%)",
                                            "neutral60": "hsl(0, 0%, 40%)",
                                            "neutral70": "hsl(0, 0%, 30%)",
                                            "neutral80": "hsl(0, 0%, 20%)",
                                            "neutral90": "hsl(0, 0%, 10%)",
                                            "primary": "#2684FF",
                                            "primary25": "#DEEBFF",
                                            "primary50": "#B2D4FF",
                                            "primary75": "#4C9AFF",
                                          },
                                          "spacing": Object {
                                            "baseUnit": 4,
                                            "controlHeight": 38,
                                            "menuGutter": 8,
                                          },
                                        }
                                      }
                                    >
                                      <div
                                        aria-hidden="true"
                                        className=" emotion-22"
                                        onMouseDown={[Function]}
                                        onTouchEnd={[Function]}
                                      >
                                        <ChevronDownIcon
                                          label="open"
                                        >
                                          <Memo(Icon)
                                            dangerouslySetGlyph="<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><path d=\\"M8.292 10.293a1.009 1.009 0 000 1.419l2.939 2.965c.218.215.5.322.779.322s.556-.107.769-.322l2.93-2.955a1.01 1.01 0 000-1.419.987.987 0 00-1.406 0l-2.298 2.317-2.307-2.327a.99.99 0 00-1.406 0z\\" fill=\\"currentColor\\" fill-rule=\\"evenodd\\"/></svg>"
                                            label="open"
                                          >
                                            <span
                                              aria-label="open"
                                              className="emotion-21"
                                              dangerouslySetInnerHTML={
                                                Object {
                                                  "__html": "<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><path d=\\"M8.292 10.293a1.009 1.009 0 000 1.419l2.939 2.965c.218.215.5.322.779.322s.556-.107.769-.322l2.93-2.955a1.01 1.01 0 000-1.419.987.987 0 00-1.406 0l-2.298 2.317-2.307-2.327a.99.99 0 00-1.406 0z\\" fill=\\"currentColor\\" fill-rule=\\"evenodd\\"/></svg>",
                                                }
                                              }
                                              role="img"
                                              style={
                                                Object {
                                                  "--icon-primary-color": "currentColor",
                                                  "--icon-secondary-color": "var(--background-default, #FFFFFF)",
                                                }
                                              }
                                            />
                                          </Memo(Icon)>
                                        </ChevronDownIcon>
                                      </div>
                                    </DropdownIndicator>
                                  </DropdownIndicator>
                                </div>
                              </IndicatorsContainer>
                            </div>
                          </Control>
                          <input
                            name="deploymentEnvironmentType"
                            type="hidden"
                            value=""
                          />
                        </div>
                      </SelectContainer>
                    </Select>
                  </StateManager>
                </AtlaskitSelect>
              </WithAnalyticsEvents(AtlaskitSelect)>
            </AnalyticsContext>
          </WithAnalyticsContext(WithAnalyticsEvents(AtlaskitSelect))>
        </div>
      </styled.div>
      <styled.div>
        <div
          className="c7"
        >
          <styled.div>
            <div
              className="c8"
            >
              Test Environments
            </div>
          </styled.div>
          <styled.div>
            <div
              className="c9"
            />
          </styled.div>
          <styled.div>
            <div
              className="c10"
            >
              <Memo(CopyButton)
                name="deploymentEnvironmentUuid"
              >
                <Tooltip
                  content="Copy"
                  position="right"
                >
                  <div
                    onBlur={[Function]}
                    onClick={[Function]}
                    onFocus={[Function]}
                    onMouseDown={[Function]}
                    onMouseOut={[Function]}
                    onMouseOver={[Function]}
                    role="presentation"
                  >
                    <styled.div
                      onClick={[Function]}
                    >
                      <div
                        className="c2"
                        onClick={[Function]}
                      >
                        <styled.div>
                          <div
                            className="c3"
                          >
                            <CopyIcon
                              label="Copy deploymentEnvironmentUuid"
                              size="small"
                            >
                              <Memo(Icon)
                                dangerouslySetGlyph="<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>"
                                label="Copy deploymentEnvironmentUuid"
                                size="small"
                              >
                                <span
                                  aria-label="Copy deploymentEnvironmentUuid"
                                  className="emotion-3"
                                  dangerouslySetInnerHTML={
                                    Object {
                                      "__html": "<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" role=\\"presentation\\"><g fill=\\"currentColor\\"><path d=\\"M10 19h8V8h-8v11zM8 7.992C8 6.892 8.902 6 10.009 6h7.982C19.101 6 20 6.893 20 7.992v11.016c0 1.1-.902 1.992-2.009 1.992H10.01A2.001 2.001 0 018 19.008V7.992z\\"/><path d=\\"M5 16V4.992C5 3.892 5.902 3 7.009 3H15v13H5zm2 0h8V5H7v11z\\"/></g></svg>",
                                    }
                                  }
                                  role="img"
                                  style={
                                    Object {
                                      "--icon-primary-color": "currentColor",
                                      "--icon-secondary-color": "var(--background-default, #FFFFFF)",
                                    }
                                  }
                                />
                              </Memo(Icon)>
                            </CopyIcon>
                          </div>
                        </styled.div>
                      </div>
                    </styled.div>
                  </div>
                </Tooltip>
              </Memo(CopyButton)>
            </div>
          </styled.div>
        </div>
      </styled.div>
    </div>
  </styled.div>
</Memo(OpenIDConnectConfiguration)>
`;
