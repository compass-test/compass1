{
  "components": {
    "responses": {
      "401": {
        "description": "Unauthorized"
      },
      "403": {
        "description": "Forbidden"
      },
      "404": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        },
        "description": "Not Found"
      },
      "429": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        },
        "description": "Too Many Requests"
      }
    },
    "schemas": {
      "ARNotificationDto": {
        "additionalProperties": false,
        "properties": {
          "entitlementId": {
            "type": "string"
          },
          "eventId": {
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "type": {
            "enum": [
              "INVOICE_UNCOLLECTIBLE"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "AccountModificationDto": {
        "properties": {
          "invoiceGroupId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AdhocInvoice": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "stripeInvoice": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AdhocInvoiceCreationInput": {
        "additionalProperties": false,
        "properties": {
          "invoiceGroup": {
            "type": "string"
          }
        },
        "required": [
          "invoiceGroup"
        ],
        "type": "object"
      },
      "AdminUpdatePromotionDetailsRequest": {
        "additionalProperties": false,
        "description": "AdminUpdatePromotionRequest",
        "properties": {
          "applicationReason": {
            "$ref": "#/components/schemas/ApplicationReasonRequestDto"
          },
          "benefits": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DiscountDto"
                },
                {
                  "$ref": "#/components/schemas/OverRideDto"
                }
              ]
            },
            "type": "array"
          },
          "eligibilityRules": {
            "$ref": "#/components/schemas/EligibilityRuleDto"
          },
          "eligiblePromotionWindow": {
            "$ref": "#/components/schemas/EligiblePromotionWindowRequest"
          },
          "metadata": {
            "additionalProperties": {
              "description": "valid metadata or null",
              "nullable": true,
              "type": "string"
            },
            "description": "valid metadata or null",
            "nullable": true,
            "type": "object"
          },
          "status": {
            "enum": [
              "DRAFTED",
              "ACTIVE",
              "EXPIRED",
              "CANCELLED",
              "WITHDRAWN",
              "INACTIVE"
            ],
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "enum": [
              "TRIAL_EXTENSION",
              "LIST_PRICE",
              "LOYALTY_DISCOUNT",
              "LIST_PRICE_ADJUSTMENT",
              "PROMO_CODE",
              "DISCRETIONARY_DISCOUNT",
              "PARTNER_DISCOUNT"
            ],
            "type": "string"
          },
          "version": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "benefits",
          "eligiblePromotionWindow",
          "title",
          "type"
        ],
        "type": "object"
      },
      "AllDetailsForProcessingInfoDto": {
        "properties": {
          "accountModification": {
            "$ref": "#/components/schemas/AccountModificationDto"
          },
          "entitlement": {
            "$ref": "#/components/schemas/OrderEntitlementRefDto"
          },
          "saleTransitionDetails": {
            "$ref": "#/components/schemas/SaleTransitionDetailsDto"
          },
          "status": {
            "enum": [
              "PROCESSING",
              "SUCCESS",
              "FAIL"
            ],
            "type": "string"
          },
          "transitionTime": {
            "enum": [
              "IMMEDIATE",
              "NEXT_CYCLE",
              "SCHEDULED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "AllDetailsOrderItemResponseDto": {
        "properties": {
          "backdateTimestamp": {
            "format": "int64",
            "type": "integer"
          },
          "billingAnchorTime": {
            "format": "int64",
            "type": "integer"
          },
          "createdDate": {
            "format": "int64",
            "type": "integer"
          },
          "invoiceGroupId": {
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "offeringId": {
            "type": "string"
          },
          "optedUsageOptions": {
            "$ref": "#/components/schemas/OptedUsageOptionDto"
          },
          "orderId": {
            "type": "string"
          },
          "orderItemId": {
            "type": "string"
          },
          "originalOrderItemId": {
            "description": "points to orderItemId which is executed in SYSTEM_ORDER",
            "type": "string"
          },
          "parentEntitlementId": {
            "type": "string"
          },
          "processingInfo": {
            "$ref": "#/components/schemas/AllDetailsForProcessingInfoDto"
          },
          "promotionIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "promotions": {
            "items": {
              "$ref": "#/components/schemas/PromotionDto"
            },
            "type": "array"
          },
          "rewindToOrderItemId": {
            "type": "string"
          },
          "transactionAccountId": {
            "type": "string"
          },
          "type": {
            "enum": [
              "CREATION_ORDER",
              "AMENDMENT_ORDER",
              "CANCELLATION_ORDER",
              "SYSTEM_CANCELLATION_ORDER",
              "SYSTEM_AMENDMENT_ORDER",
              "REACTIVATION_ORDER",
              "ACCOUNT_MODIFICATION_ORDER",
              "REWIND_ORDER"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "AndRuleConditionDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleConditionDto"
          },
          {
            "properties": {
              "eligibleConditions": {
                "items": {
                  "$ref": "#/components/schemas/EligibleConditionDto"
                },
                "maxItems": 2147483647,
                "minItems": 1,
                "type": "array"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "eligibleConditions",
          "operatorType"
        ],
        "type": "object"
      },
      "ApiError": {
        "additionalProperties": false,
        "properties": {
          "errorDetails": {
            "$ref": "#/components/schemas/ErrorDetails"
          },
          "errorKey": {
            "enum": [
              "RESOURCE_NOT_MODIFIED",
              "BAD_REQUEST",
              "REQUEST_VALIDATION_ERROR",
              "PAYMENT_REQUIRED",
              "RESOURCE_ACCESS_FORBIDDEN",
              "RESOURCE_NOT_FOUND",
              "RESOURCE_VERSION_NOT_MATCHED",
              "CONFLICT",
              "INTERNAL_SERVER_ERROR",
              "SERVICE_UNAVAILABLE",
              "NOT_IMPLEMENTED",
              "TOO_MANY_REQUESTS"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiGatewayErrorResponse": {
        "additionalProperties": false,
        "properties": {
          "error": {
            "items": {
              "$ref": "#/components/schemas/ErrorCode"
            },
            "type": "array"
          },
          "message": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApplicableApplicationReasonDto": {
        "additionalProperties": false,
        "description": "application Reason is null for override promotions",
        "nullable": true,
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApplicableBenefitDto": {
        "additionalProperties": false,
        "properties": {
          "duration": {
            "enum": [
              "FOREVER",
              "ONCE",
              "REPEATING"
            ],
            "type": "string"
          },
          "iterations": {
            "description": "iterations is required only for REPEATING Duration",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "value": {
            "description": "Value needs to be whole number",
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ApplicableCustomisedValueDto": {
        "additionalProperties": false,
        "description": "valid custom value params or null",
        "nullable": true,
        "properties": {
          "applicationReason": {
            "$ref": "#/components/schemas/ApplicableApplicationReasonDto"
          },
          "benefits": {
            "items": {
              "$ref": "#/components/schemas/ApplicableBenefitDto"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApplicablePromotionFiltersDto": {
        "additionalProperties": false,
        "description": "valid filterParams or null",
        "nullable": true,
        "properties": {
          "currency": {
            "description": "valid currency or null",
            "enum": [
              "USD"
            ],
            "nullable": true,
            "type": "string"
          },
          "cycleInterval": {
            "description": "valid cycleInterval or null",
            "enum": [
              "DAY",
              "WEEK",
              "MONTH",
              "YEAR"
            ],
            "nullable": true,
            "type": "string"
          },
          "partnerTier": {
            "description": "valid partnerTier or null",
            "enum": [
              "SILVER",
              "PLATINUM",
              "GOLD",
              "ACCESS"
            ],
            "nullable": true,
            "type": "string"
          },
          "partnerType": {
            "description": "valid partnerType or null",
            "enum": [
              "SOLUTION_PARTNER",
              "GLOBAL_ALLIANCE_PARTNER",
              "CORPORATE_RESELLER",
              "AGGREGATOR"
            ],
            "nullable": true,
            "type": "string"
          },
          "pricingType": {
            "description": "valid pricingType or null",
            "enum": [
              "FREE",
              "LIMITED_FREE",
              "PAID"
            ],
            "nullable": true,
            "type": "string"
          },
          "products": {
            "description": "valid products or null",
            "items": {
              "enum": [
                "STATUSPAGE"
              ],
              "type": "string"
            },
            "nullable": true,
            "type": "array",
            "uniqueItems": true
          },
          "saleTransitionType": {
            "description": "valid saleTransitionType or null",
            "enum": [
              "NEW",
              "UPGRADE",
              "DOWNGRADE",
              "RENEWAL"
            ],
            "nullable": true,
            "type": "string"
          },
          "unit": {
            "description": "valid unit or null",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApplicablePromotionRequestV2": {
        "additionalProperties": false,
        "description": "GetApplicablePromotion",
        "properties": {
          "filterParams": {
            "$ref": "#/components/schemas/ApplicablePromotionFiltersDto"
          },
          "promotions": {
            "items": {
              "$ref": "#/components/schemas/PromotionDefinitionDto"
            },
            "type": "array"
          }
        },
        "required": [
          "promotions"
        ],
        "type": "object"
      },
      "ApplicablePromotionResponse": {
        "additionalProperties": false,
        "properties": {
          "applicablePromotions": {
            "description": "valid applicable promotion set or empty",
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "notApplicablePromotions": {
            "deprecated": true,
            "description": "valid not applicable promotion set or empty",
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "notApplicablePromotionsWithReason": {
            "additionalProperties": {
              "$ref": "#/components/schemas/NotApplicablePromotionResponse"
            },
            "description": "valid not applicable promotion map with error or empty",
            "nullable": true,
            "type": "object"
          },
          "notFoundPromotions": {
            "description": "valid not found promotion set or empty",
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "type": "object"
      },
      "ApplicationContext": {
        "additionalProperties": false,
        "description": "application context can be null as it has default value",
        "nullable": true,
        "properties": {
          "applicationType": {
            "description": "application Type has default FRESH_PROMO value",
            "enum": [
              "FRESH_PROMO",
              "CONTINUE_PROMO"
            ],
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApplicationReason": {
        "additionalProperties": false,
        "description": "application reason object for a promotion",
        "nullable": true,
        "properties": {
          "id": {
            "description": "application reason id for a promotion",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "ApplicationReasonDto": {
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApplicationReasonRequestDto": {
        "additionalProperties": false,
        "description": "valid applicationReason or null",
        "nullable": true,
        "properties": {
          "customisable": {
            "$ref": "#/components/schemas/CustomisableApplicationReasonRequestDto"
          },
          "id": {
            "description": "Valid id required for other promotion type except TRIAL_EXTENSION",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApplicationReasonResponseDto": {
        "additionalProperties": false,
        "description": "valid applicationReason or null",
        "nullable": true,
        "properties": {
          "customisable": {
            "$ref": "#/components/schemas/CustomisableApplicationReasonResponseDto"
          },
          "id": {
            "type": "string"
          },
          "readableName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApplicationReasonResponseSetLimiterDto": {
        "additionalProperties": false,
        "properties": {
          "anyOf": {
            "items": {
              "$ref": "#/components/schemas/ApplicationReason"
            },
            "type": "array",
            "uniqueItems": true
          },
          "type": {
            "enum": [
              "RANGE",
              "SET"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "AvailablePromotionRequest": {
        "additionalProperties": false,
        "description": "GetAvailablePromotion",
        "properties": {
          "currency": {
            "description": "valid currency or null",
            "enum": [
              "USD"
            ],
            "nullable": true,
            "type": "string"
          },
          "cycleInterval": {
            "description": "valid cycleInterval or null",
            "enum": [
              "DAY",
              "WEEK",
              "MONTH",
              "YEAR"
            ],
            "nullable": true,
            "type": "string"
          },
          "partnerTier": {
            "description": "valid partnerTier or null",
            "enum": [
              "SILVER",
              "PLATINUM",
              "GOLD",
              "ACCESS"
            ],
            "nullable": true,
            "type": "string"
          },
          "partnerType": {
            "description": "valid partnerType or null",
            "enum": [
              "SOLUTION_PARTNER",
              "GLOBAL_ALLIANCE_PARTNER",
              "CORPORATE_RESELLER",
              "AGGREGATOR"
            ],
            "nullable": true,
            "type": "string"
          },
          "pricingType": {
            "description": "valid pricingType or null",
            "enum": [
              "FREE",
              "LIMITED_FREE",
              "PAID"
            ],
            "nullable": true,
            "type": "string"
          },
          "products": {
            "description": "valid products or null",
            "items": {
              "enum": [
                "STATUSPAGE"
              ],
              "type": "string"
            },
            "nullable": true,
            "type": "array",
            "uniqueItems": true
          },
          "saleTransitionType": {
            "description": "valid saleTransitionType or null",
            "enum": [
              "NEW",
              "UPGRADE",
              "DOWNGRADE",
              "RENEWAL"
            ],
            "nullable": true,
            "type": "string"
          },
          "status": {
            "description": "valid promotion status or null",
            "items": {
              "enum": [
                "DRAFTED",
                "ACTIVE",
                "EXPIRED",
                "CANCELLED",
                "WITHDRAWN",
                "INACTIVE"
              ],
              "type": "string"
            },
            "nullable": true,
            "type": "array",
            "uniqueItems": true
          },
          "unit": {
            "description": "valid unit or null",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AvailablePromotionResponse": {
        "additionalProperties": false,
        "properties": {
          "availablePromotion": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "BaseResponse": {
        "additionalProperties": false,
        "type": "object"
      },
      "Benefit": {
        "additionalProperties": false,
        "description": "benefits list for a promotion",
        "properties": {
          "duration": {
            "description": "duration, the promotion to be applied",
            "enum": [
              "FOREVER",
              "ONCE",
              "REPEATING"
            ],
            "nullable": true,
            "type": "string"
          },
          "iterations": {
            "description": "the number of iterations to be applied",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "value": {
            "description": "percent discount of the promotion",
            "format": "float",
            "nullable": true,
            "type": "number"
          }
        },
        "type": "object"
      },
      "BenefitDto": {
        "discriminator": {
          "mapping": {
            "DISCOUNT": "#/components/schemas/DiscountDto",
            "OVERRIDE": "#/components/schemas/OverRideDto"
          },
          "propertyName": "benefitType"
        },
        "properties": {
          "benefitType": {
            "enum": [
              "DISCOUNT",
              "OVERRIDE"
            ],
            "type": "string"
          }
        },
        "required": [
          "benefitType"
        ],
        "type": "object"
      },
      "BillAdjustmentDto": {
        "properties": {
          "amount": {
            "format": "int64",
            "type": "integer"
          },
          "percent": {
            "format": "double",
            "type": "number"
          },
          "promotionId": {
            "type": "string"
          },
          "reasonCode": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "BillEstimateItemResponseDto": {
        "properties": {
          "adjustments": {
            "items": {
              "$ref": "#/components/schemas/BillAdjustmentDto"
            },
            "type": "array"
          },
          "chargeQuantity": {
            "$ref": "#/components/schemas/ChargeQuantityDto"
          },
          "offeringId": {
            "type": "string"
          },
          "period": {
            "$ref": "#/components/schemas/BillPeriodDto"
          },
          "pricingPlanId": {
            "type": "string"
          },
          "subtotal": {
            "format": "int64",
            "type": "integer"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BillPeriodDto": {
        "properties": {
          "end": {
            "format": "int64",
            "type": "integer"
          },
          "start": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BillToParty": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "postalAddress": {
            "$ref": "#/components/schemas/PostalAddress"
          },
          "taxId": {
            "description": "If the BillTo is not a legal entity the tax ID should be empty",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "name",
          "postalAddress"
        ],
        "type": "object"
      },
      "BillingClockRequest": {
        "additionalProperties": false,
        "properties": {
          "frozenTime": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BillingClockResponseDto": {
        "additionalProperties": false,
        "properties": {
          "frozenTime": {
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "BooleanQuery": {
        "additionalProperties": false,
        "description": "Boolean query for and/or like conditions",
        "nullable": true,
        "properties": {
          "filter": {
            "items": {
              "$ref": "#/components/schemas/SingleQuery"
            },
            "type": "array"
          },
          "minimum_should_match": {
            "format": "int32",
            "type": "integer"
          },
          "must": {
            "items": {
              "$ref": "#/components/schemas/SingleQuery"
            },
            "type": "array"
          },
          "must_not": {
            "items": {
              "$ref": "#/components/schemas/SingleQuery"
            },
            "type": "array"
          },
          "should": {
            "items": {
              "$ref": "#/components/schemas/SingleQuery"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BulkGetOrderResponseDto": {
        "properties": {
          "nextId": {
            "type": "string"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/OrderGetResponseDto"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BulkSubscriptionResponseDto": {
        "additionalProperties": false,
        "properties": {
          "_ccpInternal": {
            "$ref": "#/components/schemas/CcpInternalResponseDto"
          },
          "billingAnchorTimestamp": {
            "description": "valid billingAnchorTimestamp or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "cancelAtTheEndOfPeriod": {
            "description": "cancelAtTheEndOfPeriod",
            "nullable": true,
            "type": "boolean"
          },
          "chargeQuantities": {
            "description": "valid chargeQuantities with pricingPlanId or null",
            "items": {
              "$ref": "#/components/schemas/ChargeQuantity"
            },
            "nullable": true,
            "type": "array"
          },
          "createdTimestamp": {
            "description": "valid createdTimestamp or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "currentBillingEndTimestamp": {
            "description": "valid currentBillingEndTimestamp or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "currentBillingStartTimestamp": {
            "description": "valid currentBillingStartTimestamp or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "currentListPrice": {
            "description": "valid currentListPrice or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "endTimestamp": {
            "description": "valid endTimestamp or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "entitlementId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "invoiceGroupId": {
            "type": "string"
          },
          "invoiceImmediately": {
            "description": "valid invoiceImmediately or null",
            "nullable": true,
            "type": "boolean"
          },
          "lastPaidOfferingId": {
            "type": "string"
          },
          "nextBillingTimestamp": {
            "description": "valid nextBillingTimestamp or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "offeringId": {
            "type": "string"
          },
          "orderItemId": {
            "type": "string"
          },
          "previousListPrice": {
            "description": "valid previousListPrice or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "pricingPlanId": {
            "description": "valid pricingPlanId with chargeQuantities or null",
            "nullable": true,
            "type": "string"
          },
          "promotionIds": {
            "description": "valid promotionIds or null",
            "items": {
              "description": "valid promotionIds or null",
              "nullable": true,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "promotionInstances": {
            "description": "a list of promotions applied to the subscription",
            "items": {
              "$ref": "#/components/schemas/PromotionInstance"
            },
            "nullable": true,
            "type": "array"
          },
          "schedule": {
            "$ref": "#/components/schemas/BulkSubscriptionScheduleResponseDto"
          },
          "startTimestamp": {
            "description": "valid startTimestamp or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "enum": [
              "PROCESSING",
              "ACTIVE",
              "CANCELLED"
            ],
            "type": "string"
          },
          "transactionAccountId": {
            "type": "string"
          },
          "trialLengthDays": {
            "description": "valid trialLengthDays or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "versionInfo": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "BulkSubscriptionScheduleResponseDto": {
        "additionalProperties": false,
        "description": "subscription schedule or null",
        "nullable": true,
        "properties": {
          "chargeQuantities": {
            "items": {
              "$ref": "#/components/schemas/ChargeQuantity"
            },
            "type": "array"
          },
          "latestInvoice": {
            "type": "string"
          },
          "offeringId": {
            "type": "string"
          },
          "pricingPlanId": {
            "type": "string"
          },
          "promotionIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "promotionInstances": {
            "description": "a list of promotions applied to the subscription",
            "items": {
              "$ref": "#/components/schemas/PromotionInstance"
            },
            "nullable": true,
            "type": "array"
          },
          "startDate": {
            "format": "int64",
            "type": "integer"
          },
          "systemOrderId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CardDetails": {
        "additionalProperties": false,
        "properties": {
          "brand": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "expMonth": {
            "format": "int64",
            "type": "integer"
          },
          "expYear": {
            "format": "int64",
            "type": "integer"
          },
          "funding": {
            "type": "string"
          },
          "last4": {
            "type": "string"
          }
        },
        "required": [
          "expMonth",
          "expYear",
          "funding",
          "last4"
        ],
        "type": "object"
      },
      "CcpInternalResponseDto": {
        "additionalProperties": false,
        "description": "internal data present or null",
        "nullable": true,
        "properties": {
          "stripeScheduleId": {
            "description": "valid stripeScheduleId or null",
            "nullable": true,
            "type": "string"
          },
          "stripeSubscriptionId": {
            "description": "valid stripeSubscriptionId or null",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChargeQuantity": {
        "additionalProperties": false,
        "description": "valid chargeQuantities with pricingPlanId or null",
        "nullable": true,
        "properties": {
          "chargeElement": {
            "type": "string"
          },
          "lastUpdatedAt": {
            "format": "int64",
            "type": "integer"
          },
          "quantity": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "chargeElement",
          "quantity"
        ],
        "type": "object"
      },
      "ChargeQuantityDto": {
        "properties": {
          "chargeElement": {
            "type": "string"
          },
          "quantity": {
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "chargeElement"
        ],
        "type": "object"
      },
      "ChargingDetailsDto": {
        "properties": {
          "chargeQuantities": {
            "items": {
              "$ref": "#/components/schemas/ChargeQuantityDto"
            },
            "type": "array"
          },
          "pricingPlanId": {
            "description": "Blank/Empty String will be treated as null",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Context": {
        "additionalProperties": false,
        "properties": {
          "authMechanism": {
            "type": "string"
          },
          "clientAsapIssuer": {
            "type": "string"
          },
          "initiator": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "subjectType": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CountQueryRequest": {
        "additionalProperties": false,
        "properties": {
          "class": {
            "description": "CCP primitive you want to search for",
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/Payload"
          }
        },
        "required": [
          "class",
          "payload"
        ],
        "type": "object"
      },
      "CreateCouponRequest": {
        "additionalProperties": false,
        "description": "CreateCouponRequest",
        "properties": {
          "code": {
            "maxLength": 15,
            "minLength": 3,
            "pattern": "[a-zA-Z0-9]*",
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "type": "object"
      },
      "CreateEntitlementRequest": {
        "additionalProperties": false,
        "properties": {
          "enableAbuseProneFeatures": {
            "type": "boolean"
          },
          "entitlementId": {
            "description": "valid entitlement id or null",
            "nullable": true,
            "type": "string"
          },
          "featureOverrides": {
            "additionalProperties": {
              "description": "feature override map (nullable field)",
              "nullable": true,
              "type": "string"
            },
            "description": "feature override map (nullable field)",
            "nullable": true,
            "type": "object"
          },
          "featureVariables": {
            "additionalProperties": {
              "description": "feature variables map (nullable field)",
              "nullable": true,
              "type": "string"
            },
            "description": "feature variables map (nullable field)",
            "nullable": true,
            "type": "object"
          },
          "metadata": {
            "additionalProperties": {
              "description": "metadata (nullable field)",
              "nullable": true,
              "type": "string"
            },
            "description": "metadata (nullable field)",
            "nullable": true,
            "type": "object"
          },
          "offeringKey": {
            "type": "string"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "parentId": {
            "description": "valid entitlement id or null",
            "nullable": true,
            "type": "string"
          },
          "subscriptionId": {
            "description": "valid subscription id or null",
            "nullable": true,
            "type": "string"
          },
          "transactionAccountId": {
            "type": "string"
          }
        },
        "required": [
          "offeringKey"
        ],
        "type": "object"
      },
      "CreateInvoiceGroupInput": {
        "additionalProperties": false,
        "properties": {
          "currency": {
            "enum": [
              "USD"
            ],
            "type": "string"
          },
          "defaultPaymentMethod": {
            "description": "if not specified, it will use the default payment-method for the currency",
            "nullable": true,
            "type": "string"
          },
          "memo": {
            "maxLength": 500,
            "minLength": 0,
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "An identifier that would help customers/partners segregate invoices.",
            "type": "string"
          },
          "purchaseOrder": {
            "$ref": "#/components/schemas/PurchaseOrderInput"
          },
          "recipients": {
            "description": "List of recipient email addresses",
            "items": {
              "description": "List of recipient email addresses",
              "type": "string"
            },
            "type": "array"
          },
          "shipToParty": {
            "description": "Ship-to-party id. if not specified, it will be the same as the bill-to party",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "currency",
          "name"
        ],
        "type": "object"
      },
      "CreatePromotionRequestV2": {
        "additionalProperties": false,
        "description": "CreatePromotionRequestV2",
        "properties": {
          "applicationReason": {
            "$ref": "#/components/schemas/ApplicationReasonRequestDto"
          },
          "benefits": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DiscountDto"
                },
                {
                  "$ref": "#/components/schemas/OverRideDto"
                }
              ]
            },
            "type": "array"
          },
          "eligibilityRules": {
            "$ref": "#/components/schemas/EligibilityRuleDto"
          },
          "eligiblePromotionWindow": {
            "$ref": "#/components/schemas/EligiblePromotionWindowRequest"
          },
          "metadata": {
            "additionalProperties": {
              "description": "valid metadata or null",
              "nullable": true,
              "type": "string"
            },
            "description": "valid metadata or null",
            "nullable": true,
            "type": "object"
          },
          "promotionId": {
            "description": "valid promotionId or null",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "description": "valid promotion status or null",
            "enum": [
              "DRAFTED",
              "ACTIVE",
              "EXPIRED",
              "CANCELLED",
              "WITHDRAWN",
              "INACTIVE"
            ],
            "nullable": true,
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "enum": [
              "TRIAL_EXTENSION",
              "LIST_PRICE",
              "LOYALTY_DISCOUNT",
              "LIST_PRICE_ADJUSTMENT",
              "PROMO_CODE",
              "DISCRETIONARY_DISCOUNT",
              "PARTNER_DISCOUNT"
            ],
            "type": "string"
          }
        },
        "required": [
          "benefits",
          "eligiblePromotionWindow",
          "title",
          "type"
        ],
        "type": "object"
      },
      "CreatePromotionResponseV2": {
        "additionalProperties": false,
        "properties": {
          "promotionId": {
            "type": "string"
          },
          "status": {
            "enum": [
              "DRAFTED",
              "ACTIVE",
              "EXPIRED",
              "CANCELLED",
              "WITHDRAWN",
              "INACTIVE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreditCard": {
        "additionalProperties": false,
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentMethodDto"
          },
          {
            "properties": {
              "card": {
                "$ref": "#/components/schemas/CardDetails"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "currency",
          "default",
          "id",
          "type"
        ],
        "type": "object"
      },
      "CreditNoteDto": {
        "additionalProperties": false,
        "properties": {
          "arn": {
            "description": "The acquirer reference number which is used for tracking a refund",
            "nullable": true,
            "type": "string"
          },
          "createdAt": {
            "description": "Timestamp in Epoch milliseconds",
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "invoice": {
            "type": "string"
          },
          "items": {
            "description": "Only present in full-item-refund credit note",
            "items": {
              "$ref": "#/components/schemas/CreditNoteItemDto"
            },
            "type": "array"
          },
          "memo": {
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "number": {
            "type": "string"
          },
          "purchaseOrderNumber": {
            "type": "string"
          },
          "reason": {
            "enum": [
              "refund_wrong_order_repurchase",
              "refund_cancelled_purchase",
              "refund_tax",
              "refund_atlassian_error",
              "refund_order_form_pending_signature",
              "refund_fraud",
              "refund_customer_service_concession",
              "refund_product_eol_or_ma",
              "refund_partial_adjustment",
              "refund_write_off",
              "covid_19",
              "refund_cb0_30",
              "refund_cb31_90",
              "refund_for_rewind",
              "duplicate",
              "fraudulent",
              "order_change",
              "product_unsatisfactory",
              "tax_only_refund"
            ],
            "type": "string"
          },
          "rechargeInvoiceId": {
            "description": "The id of the recharge invoice that will be produced on a tax-only-refund credit note",
            "nullable": true,
            "type": "string"
          },
          "refundId": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "description": "PENDING when saved, OPEN when sent to stripe, PAID when refund sent to payment method",
            "enum": [
              "PENDING",
              "OPEN",
              "PAID",
              "FAILED"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "full-item-refund",
              "tax-only-refund"
            ],
            "type": "string"
          }
        },
        "required": [
          "createdAt",
          "id",
          "invoice",
          "memo",
          "number",
          "reason",
          "status",
          "type"
        ],
        "type": "object"
      },
      "CreditNoteInput": {
        "additionalProperties": false,
        "properties": {
          "invoice": {
            "type": "string"
          },
          "items": {
            "description": "Only included in full-item-refund credit note, must be empty for tax-only-refund",
            "items": {
              "$ref": "#/components/schemas/CreditNoteItemInput"
            },
            "type": "array"
          },
          "memo": {
            "maxLength": 5000,
            "minLength": 1,
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "reason": {
            "enum": [
              "refund_wrong_order_repurchase",
              "refund_cancelled_purchase",
              "refund_tax",
              "refund_atlassian_error",
              "refund_order_form_pending_signature",
              "refund_fraud",
              "refund_customer_service_concession",
              "refund_product_eol_or_ma",
              "refund_partial_adjustment",
              "refund_write_off",
              "covid_19",
              "refund_cb0_30",
              "refund_cb31_90",
              "refund_for_rewind",
              "duplicate",
              "fraudulent",
              "order_change",
              "product_unsatisfactory",
              "tax_only_refund"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "full-item-refund",
              "tax-only-refund"
            ],
            "type": "string"
          }
        },
        "required": [
          "invoice",
          "memo",
          "reason",
          "type"
        ],
        "type": "object"
      },
      "CreditNoteItem": {
        "additionalProperties": false,
        "properties": {
          "entitlementId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "invoiceItems": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subtotal": {
            "type": "number"
          },
          "tax": {
            "type": "number"
          },
          "taxPercent": {
            "type": "number"
          },
          "total": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "CreditNoteItemDto": {
        "additionalProperties": false,
        "description": "Only present in full-item-refund credit note",
        "properties": {
          "entitlementId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreditNoteItemInput": {
        "additionalProperties": false,
        "description": "Only included in full-item-refund credit note, must be empty for tax-only-refund",
        "properties": {
          "entitlementId": {
            "type": "string"
          }
        },
        "required": [
          "entitlementId"
        ],
        "type": "object"
      },
      "CurrencyEntry": {
        "additionalProperties": false,
        "properties": {
          "currency": {
            "enum": [
              "USD"
            ],
            "type": "string"
          },
          "customerBalance": {
            "type": "number"
          },
          "defaultPaymentMethod": {
            "type": "string"
          },
          "stripeCustomer": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomPromotionValueDto": {
        "properties": {
          "applicationReason": {
            "$ref": "#/components/schemas/ApplicationReasonDto"
          },
          "benefits": {
            "items": {
              "$ref": "#/components/schemas/PromotionBenefitDto"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CustomisableApplicationReasonRequestDto": {
        "additionalProperties": false,
        "description": "Valid customisable application reason or null",
        "nullable": true,
        "properties": {
          "id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringSetLimiterDto"
              }
            ]
          }
        },
        "type": "object"
      },
      "CustomisableApplicationReasonResponseDto": {
        "additionalProperties": false,
        "description": "valid customisable application reason or null",
        "nullable": true,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ApplicationReasonResponseSetLimiterDto"
          }
        },
        "type": "object"
      },
      "CustomisedValues": {
        "additionalProperties": false,
        "description": "valid customisedValues or null",
        "nullable": true,
        "properties": {
          "applicationReason": {
            "$ref": "#/components/schemas/ApplicationReason"
          },
          "benefits": {
            "description": "benefits list for a promotion",
            "items": {
              "$ref": "#/components/schemas/Benefit"
            },
            "type": "array"
          }
        },
        "required": [
          "benefits"
        ],
        "type": "object"
      },
      "CycleInput": {
        "additionalProperties": false,
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "interval": {
            "enum": [
              "DAY",
              "WEEK",
              "MONTH",
              "YEAR"
            ],
            "type": "string"
          },
          "name": {
            "description": "Name of the primary cycle. Should be one of MONTHLY or ANNUAL",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "CycleResponse": {
        "additionalProperties": false,
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "interval": {
            "enum": [
              "DAY",
              "WEEK",
              "MONTH",
              "YEAR"
            ],
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "interval",
          "name"
        ],
        "type": "object"
      },
      "DecimalLimiterDto": {
        "discriminator": {
          "mapping": {
            "RANGE": "#/components/schemas/DecimalRangeLimiterDto",
            "SET": "#/components/schemas/DecimalSetLimiterDto"
          },
          "propertyName": "type"
        },
        "properties": {
          "type": {
            "enum": [
              "RANGE",
              "SET"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "DecimalRangeLimiterDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DecimalLimiterDto"
          },
          {
            "properties": {
              "lowerBound": {
                "description": "valid lowerBound or null",
                "format": "float",
                "nullable": true,
                "type": "number"
              },
              "upperBound": {
                "description": "valid upperBound or null",
                "format": "float",
                "nullable": true,
                "type": "number"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "type"
        ],
        "type": "object"
      },
      "DecimalSetLimiterDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DecimalLimiterDto"
          },
          {
            "properties": {
              "anyOf": {
                "items": {
                  "format": "float",
                  "type": "number"
                },
                "type": "array",
                "uniqueItems": true
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "anyOf",
          "type"
        ],
        "type": "object"
      },
      "DefaultPricingPlanResponse": {
        "additionalProperties": false,
        "properties": {
          "currency": {
            "enum": [
              "USD",
              "JPY"
            ],
            "type": "string"
          },
          "cycle": {
            "$ref": "#/components/schemas/CycleResponse"
          },
          "key": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "currency",
          "cycle",
          "key",
          "type"
        ],
        "type": "object"
      },
      "Deferred": {
        "additionalProperties": false,
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentMethodDto"
          },
          {
            "properties": {
              "terms": {
                "$ref": "#/components/schemas/Terms"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "currency",
          "default",
          "id",
          "type"
        ],
        "type": "object"
      },
      "DeferredInput": {
        "additionalProperties": false,
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentMethodInput"
          },
          {
            "properties": {
              "terms": {
                "$ref": "#/components/schemas/Terms"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "currency",
          "terms"
        ],
        "type": "object"
      },
      "DependsOnOfferingInput": {
        "additionalProperties": false,
        "properties": {
          "keys": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "keys"
        ],
        "type": "object"
      },
      "DiscountDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BenefitDto"
          },
          {
            "properties": {
              "customisable": {
                "$ref": "#/components/schemas/PromotionBenefitCustomisableDto"
              },
              "duration": {
                "enum": [
                  "FOREVER",
                  "ONCE",
                  "REPEATING"
                ],
                "type": "string"
              },
              "iterations": {
                "description": "valid iteration when duration is 'REPEATING' or null",
                "format": "int32",
                "minimum": 1,
                "nullable": true,
                "type": "integer"
              },
              "subBenefitType": {
                "enum": [
                  "PERCENTAGE"
                ],
                "type": "string"
              },
              "value": {
                "format": "float",
                "type": "number"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "benefitType",
          "duration",
          "subBenefitType",
          "value"
        ],
        "type": "object"
      },
      "DunningStatus": {
        "additionalProperties": false,
        "properties": {
          "attempt": {
            "enum": [
              "ONE",
              "TWO",
              "THREE",
              "FOUR",
              "FIVE"
            ],
            "type": "string"
          },
          "attemptCount": {
            "format": "int32",
            "type": "integer"
          },
          "declineCode": {
            "type": "string"
          },
          "errorCode": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "nextPaymentAttemptDate": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EligibilityRuleDto": {
        "additionalProperties": false,
        "description": "valid eligibilityRules or null",
        "nullable": true,
        "properties": {
          "ruleCondition": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AndRuleConditionDto"
              },
              {
                "$ref": "#/components/schemas/OrRuleConditionDto"
              }
            ]
          }
        },
        "required": [
          "ruleCondition"
        ],
        "type": "object"
      },
      "EligibleConditionDto": {
        "additionalProperties": false,
        "properties": {
          "currency": {
            "description": "valid currency set or  null",
            "items": {
              "enum": [
                "USD"
              ],
              "type": "string"
            },
            "maxItems": 2147483647,
            "minItems": 1,
            "nullable": true,
            "type": "array",
            "uniqueItems": true
          },
          "cycleInterval": {
            "description": "valid cycleInterval set or  null",
            "items": {
              "enum": [
                "DAY",
                "WEEK",
                "MONTH",
                "YEAR"
              ],
              "type": "string"
            },
            "maxItems": 2147483647,
            "minItems": 1,
            "nullable": true,
            "type": "array",
            "uniqueItems": true
          },
          "partnerTier": {
            "description": "valid partnerTier set or  null",
            "items": {
              "enum": [
                "SILVER",
                "PLATINUM",
                "GOLD",
                "ACCESS"
              ],
              "type": "string"
            },
            "maxItems": 2147483647,
            "minItems": 1,
            "nullable": true,
            "type": "array",
            "uniqueItems": true
          },
          "partnerType": {
            "description": "valid partnerType set or  null",
            "items": {
              "enum": [
                "SOLUTION_PARTNER",
                "GLOBAL_ALLIANCE_PARTNER",
                "CORPORATE_RESELLER",
                "AGGREGATOR"
              ],
              "type": "string"
            },
            "maxItems": 2147483647,
            "minItems": 1,
            "nullable": true,
            "type": "array",
            "uniqueItems": true
          },
          "pricingType": {
            "description": "valid pricingType set or  null",
            "items": {
              "enum": [
                "FREE",
                "LIMITED_FREE",
                "PAID"
              ],
              "type": "string"
            },
            "maxItems": 2147483647,
            "minItems": 1,
            "nullable": true,
            "type": "array",
            "uniqueItems": true
          },
          "productKey": {
            "description": "valid productKey set or  null",
            "items": {
              "type": "string"
            },
            "maxItems": 2147483647,
            "minItems": 1,
            "nullable": true,
            "type": "array",
            "uniqueItems": true
          },
          "products": {
            "description": "valid products set or  null",
            "items": {
              "enum": [
                "STATUSPAGE"
              ],
              "type": "string"
            },
            "maxItems": 2147483647,
            "minItems": 1,
            "nullable": true,
            "type": "array",
            "uniqueItems": true
          },
          "ruleCondition": {
            "$ref": "#/components/schemas/RuleConditionDto"
          },
          "saleTransitionType": {
            "description": "valid saleTransitionType set or  null",
            "items": {
              "enum": [
                "NEW",
                "UPGRADE",
                "DOWNGRADE",
                "RENEWAL"
              ],
              "type": "string"
            },
            "maxItems": 2147483647,
            "minItems": 1,
            "nullable": true,
            "type": "array",
            "uniqueItems": true
          },
          "unit": {
            "$ref": "#/components/schemas/IntegerComparatorDto"
          }
        },
        "type": "object"
      },
      "EligiblePromotionWindowRequest": {
        "additionalProperties": false,
        "description": "Time should be in epoch millis",
        "properties": {
          "endTime": {
            "description": "valid endTime or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "startTime": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "startTime"
        ],
        "type": "object"
      },
      "EligiblePromotionWindowResponse": {
        "additionalProperties": false,
        "description": "Time is in epoch millis",
        "properties": {
          "endTime": {
            "format": "int64",
            "type": "integer"
          },
          "startTime": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EntitlementDetails": {
        "additionalProperties": false,
        "properties": {
          "changeReason": {
            "type": "string"
          },
          "childrenIds": {
            "description": "list of children ids (nullable)",
            "items": {
              "description": "list of children ids (nullable)",
              "nullable": true,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "createdAt": {
            "format": "int64",
            "type": "integer"
          },
          "enableAbuseProneFeatures": {
            "type": "boolean"
          },
          "entitlementId": {
            "type": "string"
          },
          "entitlementTemplate": {
            "$ref": "#/components/schemas/EntitlementTemplate"
          },
          "featureOverrides": {
            "additionalProperties": {
              "description": "feature override map (nullable field)",
              "nullable": true,
              "type": "string"
            },
            "description": "feature override map (nullable field)",
            "nullable": true,
            "type": "object"
          },
          "featureVariables": {
            "additionalProperties": {
              "description": "feature variables map (nullable field)",
              "nullable": true,
              "type": "string"
            },
            "description": "feature variables map (nullable field)",
            "nullable": true,
            "type": "object"
          },
          "metadata": {
            "additionalProperties": {
              "description": "metadata (nullable field)",
              "nullable": true,
              "type": "string"
            },
            "description": "metadata (nullable field)",
            "nullable": true,
            "type": "object"
          },
          "offeringKey": {
            "type": "string"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "parentEntitlementId": {
            "nullable": true,
            "type": "string"
          },
          "parentId": {
            "nullable": true,
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "type": "string"
          },
          "subscription": {
            "$ref": "#/components/schemas/SubscriptionInEntitlementDetails"
          },
          "transactionAccountId": {
            "type": "string"
          },
          "updatedAt": {
            "format": "int64",
            "type": "integer"
          },
          "version": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EntitlementErrorResponse": {
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "status": {
            "format": "int32",
            "type": "integer"
          },
          "timestamp": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EntitlementHistoryDto": {
        "properties": {
          "currentOfferingLevel": {
            "format": "int32",
            "type": "integer"
          },
          "glpForCurrentPlan": {
            "format": "int64",
            "type": "integer"
          },
          "glpForLastPaidPlan": {
            "format": "int64",
            "type": "integer"
          },
          "lastOfferingLevel": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EntitlementResponse": {
        "additionalProperties": false,
        "properties": {
          "changeReason": {
            "type": "string"
          },
          "childrenIds": {
            "description": "list of children ids (nullable)",
            "items": {
              "description": "list of children ids (nullable)",
              "nullable": true,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "createdAt": {
            "format": "int64",
            "type": "integer"
          },
          "enableAbuseProneFeatures": {
            "type": "boolean"
          },
          "entitlementId": {
            "description": "valid entitlement id or null",
            "nullable": true,
            "type": "string"
          },
          "entitlementTemplate": {
            "$ref": "#/components/schemas/EntitlementTemplate"
          },
          "featureOverrides": {
            "additionalProperties": {
              "description": "feature override map (nullable field)",
              "nullable": true,
              "type": "string"
            },
            "description": "feature override map (nullable field)",
            "nullable": true,
            "type": "object"
          },
          "featureVariables": {
            "additionalProperties": {
              "description": "feature variables map (nullable field)",
              "nullable": true,
              "type": "string"
            },
            "description": "feature variables map (nullable field)",
            "nullable": true,
            "type": "object"
          },
          "metadata": {
            "additionalProperties": {
              "description": "metadata (nullable field)",
              "nullable": true,
              "type": "string"
            },
            "description": "metadata (nullable field)",
            "nullable": true,
            "type": "object"
          },
          "offeringKey": {
            "type": "string"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "parentId": {
            "description": "valid parent id or null",
            "nullable": true,
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "type": "string"
          },
          "subscriptionId": {
            "description": "valid subscription id or null",
            "nullable": true,
            "type": "string"
          },
          "transactionAccountId": {
            "type": "string"
          },
          "updatedAt": {
            "format": "int64",
            "type": "integer"
          },
          "version": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EntitlementTemplate": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "key": {
            "type": "string"
          },
          "version": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EntitlementTemplateInput": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "key": {
            "type": "string"
          }
        },
        "required": [
          "data",
          "key"
        ],
        "type": "object"
      },
      "EntitlementTemplateResponse": {
        "additionalProperties": false,
        "properties": {
          "ari": {
            "type": "string"
          },
          "data": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "key": {
            "type": "string"
          },
          "latest": {
            "type": "boolean"
          },
          "offeringKey": {
            "type": "string"
          },
          "updatedAt": {
            "format": "int64",
            "type": "integer"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "ari",
          "key",
          "offeringKey"
        ],
        "type": "object"
      },
      "EntitlementTemplateUpdateInput": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ErrorCode": {
        "additionalProperties": false,
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer"
          },
          "errorMessage": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorDetails": {
        "additionalProperties": false,
        "oneOf": [
          {
            "$ref": "#/components/schemas/GenericErrorDetails"
          },
          {
            "$ref": "#/components/schemas/ValidationErrorDetails"
          }
        ],
        "type": "object"
      },
      "GenerateSyntheticPlansInput": {
        "additionalProperties": false,
        "properties": {
          "originalPricingPlanKey": {
            "description": "Commercial pricing plan key for which synthetic plan needs to be generated",
            "type": "string"
          },
          "syntheticPricingPlanKey": {
            "description": "Unique UUID to identify the newly generated synthetic pricing plan",
            "type": "string"
          }
        },
        "required": [
          "originalPricingPlanKey",
          "syntheticPricingPlanKey"
        ],
        "type": "object"
      },
      "GenericErrorDetails": {
        "additionalProperties": false,
        "properties": {
          "reason": {
            "type": "string"
          }
        },
        "required": [
          "reason"
        ],
        "type": "object"
      },
      "GetPromotionByIdResponseV2": {
        "additionalProperties": false,
        "properties": {
          "applicationReason": {
            "$ref": "#/components/schemas/ApplicationReasonResponseDto"
          },
          "benefits": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DiscountDto"
                },
                {
                  "$ref": "#/components/schemas/OverRideDto"
                }
              ]
            },
            "type": "array"
          },
          "eligibilityRules": {
            "$ref": "#/components/schemas/EligibilityRuleDto"
          },
          "eligiblePromotionWindow": {
            "$ref": "#/components/schemas/EligiblePromotionWindowResponse"
          },
          "metadata": {
            "additionalProperties": {
              "description": "valid metadata or null",
              "nullable": true,
              "type": "string"
            },
            "description": "valid metadata or null",
            "nullable": true,
            "type": "object"
          },
          "promotionId": {
            "type": "string"
          },
          "purpose": {
            "$ref": "#/components/schemas/PromotionPurposeResponse"
          },
          "status": {
            "enum": [
              "DRAFTED",
              "ACTIVE",
              "EXPIRED",
              "CANCELLED",
              "WITHDRAWN",
              "INACTIVE"
            ],
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "enum": [
              "TRIAL_EXTENSION",
              "LIST_PRICE",
              "LOYALTY_DISCOUNT",
              "LIST_PRICE_ADJUSTMENT",
              "PROMO_CODE",
              "DISCRETIONARY_DISCOUNT",
              "PARTNER_DISCOUNT"
            ],
            "type": "string"
          },
          "version": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GlpDetails": {
        "additionalProperties": false,
        "properties": {
          "glpForLastPaidPlan": {
            "format": "int64",
            "type": "integer"
          },
          "lastPaidOffering": {
            "type": "string"
          }
        },
        "required": [
          "glpForLastPaidPlan",
          "lastPaidOffering"
        ],
        "type": "object"
      },
      "HighLevelQueryRequest": {
        "additionalProperties": false,
        "properties": {
          "class": {
            "description": "CCP primitive you want to search for",
            "type": "string"
          },
          "excludes": {
            "description": "Exclude list to exclude the objects in result",
            "items": {
              "description": "Exclude list to exclude the objects in result",
              "nullable": true,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "expand": {
            "description": "Expand list to get the nested primitives",
            "items": {
              "description": "Expand list to get the nested primitives",
              "nullable": true,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "includes": {
            "description": "Include list to include the objects in result",
            "items": {
              "description": "Include list to include the objects in result",
              "nullable": true,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "pageSize": {
            "description": "Page size",
            "format": "int32",
            "maximum": 100,
            "nullable": true,
            "type": "integer"
          },
          "payload": {
            "$ref": "#/components/schemas/Payload"
          },
          "startId": {
            "description": "Start id for pagination, search will start from this id",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "class",
          "payload"
        ],
        "type": "object"
      },
      "IntegerComparatorDto": {
        "additionalProperties": false,
        "description": "valid unit or  null",
        "nullable": true,
        "properties": {
          "equals": {
            "description": "valid value or  null",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "range": {
            "$ref": "#/components/schemas/RangeDto"
          }
        },
        "type": "object"
      },
      "IntegerLimiterDto": {
        "description": "valid iteration when duration is 'REPEATING' or null",
        "discriminator": {
          "mapping": {
            "RANGE": "#/components/schemas/IntegerRangeLimiterDto",
            "SET": "#/components/schemas/IntegerSetLimiterDto"
          },
          "propertyName": "type"
        },
        "nullable": true,
        "properties": {
          "type": {
            "enum": [
              "RANGE",
              "SET"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "IntegerRangeLimiterDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IntegerLimiterDto"
          },
          {
            "properties": {
              "lowerBound": {
                "description": "valid lowerBound or null",
                "format": "int32",
                "nullable": true,
                "type": "integer"
              },
              "upperBound": {
                "description": "valid upperBound or null",
                "format": "int32",
                "nullable": true,
                "type": "integer"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "type"
        ],
        "type": "object"
      },
      "IntegerSetLimiterDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IntegerLimiterDto"
          },
          {
            "properties": {
              "anyOf": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "maxItems": 2147483647,
                "minItems": 1,
                "type": "array",
                "uniqueItems": true
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "anyOf",
          "type"
        ],
        "type": "object"
      },
      "InvoiceDto": {
        "additionalProperties": false,
        "properties": {
          "appliedBalance": {
            "description": "The customer balance applied on this invoice. If negative, the invoice total was reduced by this amount. If positive, the amount due was increased by this amount.",
            "type": "number"
          },
          "billTo": {
            "$ref": "#/components/schemas/BillToParty"
          },
          "createdAt": {
            "description": "Timestamp in Epoch milliseconds",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "enum": [
              "USD"
            ],
            "type": "string"
          },
          "dueAt": {
            "description": "Timestamp in Epoch milliseconds",
            "format": "int64",
            "type": "integer"
          },
          "dunningStatus": {
            "$ref": "#/components/schemas/DunningStatus"
          },
          "finalizedAt": {
            "description": "Timestamp in Epoch milliseconds",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "invoiceGroup": {
            "type": "string"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/InvoiceItem"
            },
            "type": "array"
          },
          "memo": {
            "nullable": true,
            "type": "string"
          },
          "number": {
            "type": "string"
          },
          "paidAt": {
            "description": "Timestamp in Epoch milliseconds",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "paymentMethod": {
            "description": "if not specified, it will use the payment method from invoice group",
            "nullable": true,
            "type": "string"
          },
          "purchaseOrderNumber": {
            "type": "string"
          },
          "shipTo": {
            "$ref": "#/components/schemas/ShipToPartyDto"
          },
          "status": {
            "enum": [
              "DRAFT",
              "OPEN",
              "PAID",
              "DEFERRED_PAID",
              "PAYMENT_DEFERRED",
              "UNCOLLECTIBLE",
              "VOID"
            ],
            "type": "string"
          },
          "subtotal": {
            "type": "number"
          },
          "tax": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "uncollectibleAt": {
            "description": "Timestamp in Epoch milliseconds",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "InvoiceGroupDto": {
        "additionalProperties": false,
        "properties": {
          "createdAt": {
            "description": "Timestamp in Epoch milliseconds",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "enum": [
              "USD"
            ],
            "type": "string"
          },
          "defaultPaymentMethod": {
            "description": "if not specified it will use the transaction account payment method",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "memo": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "An identifier that would help customers/partners segregate invoices.",
            "nullable": true,
            "type": "string"
          },
          "purchaseOrder": {
            "$ref": "#/components/schemas/PurchaseOrder"
          },
          "recipients": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "shipToParty": {
            "$ref": "#/components/schemas/ShipToPartyDto"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "createdAt",
          "currency",
          "id",
          "version"
        ],
        "type": "object"
      },
      "InvoiceItem": {
        "additionalProperties": false,
        "properties": {
          "adjustments": {
            "items": {
              "$ref": "#/components/schemas/InvoiceItemAdjustment"
            },
            "type": "array"
          },
          "currency": {
            "enum": [
              "USD"
            ],
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "entitlementId": {
            "type": "string"
          },
          "entitlementNumber": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "invoiceRequest": {
            "type": "string"
          },
          "invoiceRequestItem": {
            "format": "int32",
            "type": "integer"
          },
          "offeringKey": {
            "type": "string"
          },
          "orderItemId": {
            "type": "string"
          },
          "period": {
            "$ref": "#/components/schemas/Period"
          },
          "planObj": {
            "$ref": "#/components/schemas/Plan"
          },
          "quantity": {
            "format": "int64",
            "type": "integer"
          },
          "subscriptionObj": {
            "$ref": "#/components/schemas/Subscription"
          },
          "subtotal": {
            "type": "number"
          },
          "tax": {
            "type": "number"
          },
          "taxPercent": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "unitAmount": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "InvoiceItemAdjustment": {
        "additionalProperties": false,
        "properties": {
          "amount": {
            "type": "number"
          },
          "percent": {
            "type": "number"
          },
          "promotionId": {
            "type": "string"
          },
          "reason": {
            "deprecated": true,
            "type": "string"
          },
          "reasonCode": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "amount",
          "reason",
          "type"
        ],
        "type": "object"
      },
      "InvoiceRequest": {
        "additionalProperties": false,
        "properties": {
          "additionalNotes": {
            "type": "string"
          },
          "createdAt": {
            "description": "Timestamp in Epoch milliseconds",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "enum": [
              "USD"
            ],
            "type": "string"
          },
          "headerTaxId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "invoiceGroup": {
            "type": "string"
          },
          "invoiceImmediately": {
            "type": "boolean"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/InvoiceRequestItem"
            },
            "type": "array"
          },
          "number": {
            "type": "string"
          },
          "orderItemId": {
            "type": "string"
          },
          "reInvoice": {
            "type": "boolean"
          },
          "status": {
            "enum": [
              "OPEN",
              "INVOICED"
            ],
            "type": "string"
          },
          "stripeInvoiceItemId": {
            "type": "string"
          },
          "subtotal": {
            "type": "integer"
          },
          "tax": {
            "type": "integer"
          },
          "taxAmountLabel": {
            "type": "string"
          },
          "taxIdLabel": {
            "type": "string"
          },
          "taxed": {
            "type": "boolean"
          },
          "total": {
            "type": "integer"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "version"
        ],
        "type": "object"
      },
      "InvoiceRequestInput": {
        "additionalProperties": false,
        "properties": {
          "currency": {
            "enum": [
              "USD"
            ],
            "type": "string"
          },
          "invoiceGroup": {
            "type": "string"
          },
          "invoiceImmediately": {
            "type": "boolean"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/InvoiceRequestItemInput"
            },
            "type": "array"
          },
          "orderItemId": {
            "type": "string"
          },
          "subtotal": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "InvoiceRequestItem": {
        "additionalProperties": false,
        "properties": {
          "adjustments": {
            "items": {
              "$ref": "#/components/schemas/InvoiceRequestItemAdjustment"
            },
            "type": "array"
          },
          "currency": {
            "enum": [
              "USD"
            ],
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "entitlementId": {
            "type": "string"
          },
          "entitlementNumber": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "offeringKey": {
            "type": "string"
          },
          "period": {
            "$ref": "#/components/schemas/Period"
          },
          "planObj": {
            "$ref": "#/components/schemas/Plan"
          },
          "quantity": {
            "format": "int64",
            "type": "integer"
          },
          "subscriptionObj": {
            "$ref": "#/components/schemas/Subscription"
          },
          "subtotal": {
            "type": "integer"
          },
          "tax": {
            "type": "integer"
          },
          "taxPercent": {
            "type": "number"
          },
          "total": {
            "type": "integer"
          },
          "unitAmount": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "InvoiceRequestItemAdjustment": {
        "additionalProperties": false,
        "properties": {
          "amount": {
            "type": "integer"
          },
          "percent": {
            "type": "number"
          },
          "promotionId": {
            "type": "string"
          },
          "reason": {
            "deprecated": true,
            "type": "string"
          },
          "reasonCode": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "InvoiceRequestItemAdjustmentInput": {
        "additionalProperties": false,
        "properties": {
          "amount": {
            "type": "integer"
          },
          "percent": {
            "maximum": 100,
            "type": "number"
          },
          "promotionId": {
            "type": "string"
          },
          "reason": {
            "deprecated": true,
            "description": "Use reasonCode",
            "type": "string"
          },
          "reasonCode": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "InvoiceRequestItemInput": {
        "additionalProperties": false,
        "properties": {
          "adjustments": {
            "items": {
              "$ref": "#/components/schemas/InvoiceRequestItemAdjustmentInput"
            },
            "maxItems": 5,
            "minItems": 0,
            "type": "array"
          },
          "currency": {
            "enum": [
              "USD"
            ],
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "entitlementId": {
            "type": "string"
          },
          "offeringKey": {
            "type": "string"
          },
          "period": {
            "$ref": "#/components/schemas/Period"
          },
          "planObj": {
            "$ref": "#/components/schemas/PlanInput"
          },
          "quantity": {
            "format": "int64",
            "type": "integer"
          },
          "subscriptionObj": {
            "$ref": "#/components/schemas/SubscriptionInput"
          },
          "subtotal": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          },
          "unitAmount": {
            "type": "integer"
          }
        },
        "required": [
          "currency",
          "description",
          "entitlementId",
          "offeringKey",
          "period",
          "planObj",
          "subscriptionObj",
          "subtotal",
          "unitAmount"
        ],
        "type": "object"
      },
      "InvoiceRequestListDto": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/InvoiceRequest"
            },
            "type": "array"
          },
          "lastEvaluatedKey": {
            "description": "Use the lastEvaluatedKey in your next pageRequest to continue paging from where the PagedList finished. If there weren't enough records left to search in order to fill up the PagedList completely, the value of lastEvaluatedKey will be null, therefore you dont have to continue paging.",
            "type": "string"
          },
          "nextInvoiceTimeAt": {
            "description": "Approximate timestamp value,in Epoch milliseconds, on which any pending invoice items will be added to an invoice.",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "InvoiceToParty": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "postalAddress": {
            "$ref": "#/components/schemas/SyncPostalAddressDto"
          },
          "priceEligibility": {
            "additionalProperties": {
              "type": "boolean"
            },
            "type": "object"
          },
          "taxId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ItemValidationErrorResponseDto": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/OrderItemValidationErrorResponseDto"
            },
            "type": "array"
          },
          "itemId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "JsonPatch": {
        "additionalProperties": false,
        "type": "object"
      },
      "MemoInput": {
        "additionalProperties": false,
        "properties": {
          "memo": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MigratePaymentMethodInput": {
        "additionalProperties": false,
        "properties": {
          "migrationStripeAccount": {
            "description": "Stripe account of the payment method to migrate from",
            "enum": [
              "STATUS_PAGE",
              "HAMS_NL",
              "HAMS_US"
            ],
            "type": "string"
          },
          "stripeCustomerId": {
            "description": "Stripe customer id of the payment method to migrate",
            "type": "string"
          },
          "stripePaymentMethodId": {
            "description": "Stripe payment method id to migrate",
            "type": "string"
          }
        },
        "required": [
          "migrationStripeAccount",
          "stripeCustomerId",
          "stripePaymentMethodId"
        ],
        "type": "object"
      },
      "NotApplicablePromotionResponse": {
        "additionalProperties": false,
        "description": "valid not applicable promotion map with error or empty",
        "nullable": true,
        "properties": {
          "errors": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "OfferingDefaultPricingPlansInput": {
        "additionalProperties": false,
        "properties": {
          "keys": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "keys"
        ],
        "type": "object"
      },
      "OfferingDetailsResponse": {
        "additionalProperties": false,
        "properties": {
          "ari": {
            "type": "string"
          },
          "defaultPricingPlans": {
            "items": {
              "$ref": "#/components/schemas/DefaultPricingPlanResponse"
            },
            "type": "array"
          },
          "dependsOnOfferings": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "entitlementTemplate": {
            "$ref": "#/components/schemas/EntitlementTemplateResponse"
          },
          "hostingType": {
            "enum": [
              "CLOUD"
            ],
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "level": {
            "description": "The hierarchy level of an offering for offering transitions purposes including upgrades and downgrades within a group of offerings.",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "offeringGroup": {
            "$ref": "#/components/schemas/OfferingGroupResponse"
          },
          "pricingPlansCount": {
            "format": "int32",
            "type": "integer"
          },
          "pricingType": {
            "enum": [
              "FREE",
              "LIMITED_FREE",
              "PAID"
            ],
            "type": "string"
          },
          "productKey": {
            "type": "string"
          },
          "sku": {
            "description": "Stock Keeping Unit",
            "type": "string"
          },
          "slugs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "status": {
            "enum": [
              "DRAFT",
              "ACTIVE",
              "DEACTIVATED",
              "DELETED"
            ],
            "type": "string"
          },
          "trial": {
            "$ref": "#/components/schemas/TrialResponse"
          },
          "type": {
            "enum": [
              "PARENT",
              "CHILD"
            ],
            "type": "string"
          },
          "updatedAt": {
            "format": "int64",
            "type": "integer"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "ari",
          "hostingType",
          "key",
          "name",
          "pricingType",
          "productKey",
          "sku",
          "status",
          "type"
        ],
        "type": "object"
      },
      "OfferingErrorResponse": {
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "errors": {
            "items": {
              "$ref": "#/components/schemas/Result"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "status": {
            "format": "int32",
            "type": "integer"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "OfferingGroupInput": {
        "additionalProperties": false,
        "properties": {
          "key": {
            "description": "External reference id in UUID format",
            "type": "string"
          },
          "level": {
            "description": "Set the hierarchy level of an offering group for transitions purposes.",
            "format": "int32",
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "productKey": {
            "description": "The product this group will belong to",
            "type": "string"
          },
          "slug": {
            "description": "Human readable id used for policy creation",
            "type": "string"
          }
        },
        "required": [
          "key",
          "name",
          "productKey",
          "slug"
        ],
        "type": "object"
      },
      "OfferingGroupResponse": {
        "additionalProperties": false,
        "nullable": true,
        "properties": {
          "key": {
            "type": "string"
          },
          "level": {
            "description": "The hierarchy level of an offering group for offering transitions purposes",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "productKey": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "name",
          "productKey",
          "slug"
        ],
        "type": "object"
      },
      "OfferingGroupUpdateInput": {
        "additionalProperties": false,
        "properties": {
          "level": {
            "description": "Update the hierarchy level of an offering group for offering transitions purposes including upgrades and downgrades.",
            "format": "int32",
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "name": {
            "description": "Update the name of the offering group.",
            "type": "string"
          },
          "slug": {
            "description": "Update the human readable id used for policy creation.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "slug"
        ],
        "type": "object"
      },
      "OfferingInput": {
        "additionalProperties": false,
        "properties": {
          "dependsOnOfferings": {
            "description": "Set a list of offering keys or slugs in which this offering will depend upon. A case where this can be used is for add-ons that depend on a parent offering.",
            "items": {
              "description": "Set a list of offering keys or slugs in which this offering will depend upon. A case where this can be used is for add-ons that depend on a parent offering.",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "key": {
            "description": "A unique uuid identifier of the offering",
            "type": "string"
          },
          "level": {
            "description": "Set the hierarchy level of an offering for offering transitions purposes including upgrades and downgrades within a group of offerings.",
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          },
          "name": {
            "description": "The name of the offering. Eg Public Business, Private Trial",
            "type": "string"
          },
          "offeringGroup": {
            "description": "An offering group in which this offering belongs to.",
            "type": "string"
          },
          "pricingType": {
            "description": "Set the pricingType of offering",
            "enum": [
              "FREE",
              "LIMITED_FREE",
              "PAID"
            ],
            "type": "string"
          },
          "product": {
            "description": "The key of the product, for which this offering is intended",
            "type": "string"
          },
          "sku": {
            "description": "Stock Keeping Unit",
            "type": "string"
          },
          "slugs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "trial": {
            "$ref": "#/components/schemas/TrialInput"
          },
          "type": {
            "description": "Set the type of offering",
            "enum": [
              "PARENT",
              "CHILD"
            ],
            "type": "string"
          }
        },
        "required": [
          "key",
          "level",
          "name",
          "product",
          "sku"
        ],
        "type": "object"
      },
      "OfferingResponse": {
        "additionalProperties": false,
        "properties": {
          "ari": {
            "type": "string"
          },
          "hostingType": {
            "enum": [
              "CLOUD"
            ],
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "level": {
            "description": "The hierarchy level of an offering for offering transitions purposes including upgrades and downgrades within a group of offerings.",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "pricingType": {
            "enum": [
              "FREE",
              "LIMITED_FREE",
              "PAID"
            ],
            "type": "string"
          },
          "productKey": {
            "type": "string"
          },
          "sku": {
            "description": "Stock Keeping Unit",
            "type": "string"
          },
          "slugs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "status": {
            "enum": [
              "DRAFT",
              "ACTIVE",
              "DEACTIVATED",
              "DELETED"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "PARENT",
              "CHILD"
            ],
            "type": "string"
          },
          "updatedAt": {
            "format": "int64",
            "type": "integer"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "ari",
          "hostingType",
          "key",
          "name",
          "pricingType",
          "productKey",
          "sku",
          "status",
          "type"
        ],
        "type": "object"
      },
      "OfferingSlugsInput": {
        "additionalProperties": false,
        "properties": {
          "slugs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "slugs"
        ],
        "type": "object"
      },
      "OfferingUpdateInput": {
        "additionalProperties": false,
        "properties": {
          "level": {
            "description": "Set the hierarchy level of an offering for offering transitions purposes including upgrades and downgrades within a group of offerings.",
            "format": "int32",
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "offeringGroup": {
            "description": "An offering group in which this offering belongs to.",
            "nullable": true,
            "type": "string"
          },
          "pricingType": {
            "description": "Set the pricingType of offering",
            "enum": [
              "FREE",
              "LIMITED_FREE",
              "PAID"
            ],
            "type": "string"
          },
          "type": {
            "description": "Set the type of offering",
            "enum": [
              "PARENT",
              "CHILD"
            ],
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "OptedUsageOptionDto": {
        "properties": {
          "chargingDetails": {
            "$ref": "#/components/schemas/ChargingDetailsDto"
          },
          "purchaseMetadata": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "trial": {
            "$ref": "#/components/schemas/TrialIntentDto"
          }
        },
        "type": "object"
      },
      "OrRuleConditionDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuleConditionDto"
          }
        ],
        "required": [
          "operatorType"
        ],
        "type": "object"
      },
      "Order": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "itemId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrderAccountModificationItemDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderItemRequestDto"
          },
          {
            "properties": {
              "accountModification": {
                "$ref": "#/components/schemas/AccountModificationDto"
              },
              "entitlement": {
                "$ref": "#/components/schemas/OrderEntitlementRefDto"
              },
              "testParameters": {
                "$ref": "#/components/schemas/TestParametersDto"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "accountModification",
          "entitlement",
          "itemId",
          "type"
        ],
        "type": "object"
      },
      "OrderAmendmentItemDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderItemRequestDto"
          },
          {
            "properties": {
              "entitlement": {
                "$ref": "#/components/schemas/OrderEntitlementRefDto"
              },
              "isImmediate": {
                "nullable": true,
                "type": "boolean"
              },
              "offeringId": {
                "type": "string"
              },
              "promotions": {
                "items": {
                  "$ref": "#/components/schemas/PromotionDto"
                },
                "maxItems": 1,
                "minItems": 0,
                "type": "array"
              },
              "testParameters": {
                "$ref": "#/components/schemas/TestParametersDto"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "entitlement",
          "itemId",
          "type"
        ],
        "type": "object"
      },
      "OrderBillEstimateItemResponseDto": {
        "properties": {
          "currency": {
            "type": "string"
          },
          "entitlementId": {
            "type": "string"
          },
          "itemId": {
            "type": "string"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/BillEstimateItemResponseDto"
            },
            "type": "array"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "OrderBillEstimateRequestDto": {
        "properties": {
          "invoiceGroupId": {
            "type": "string"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/OrderItemRequestDto"
            },
            "type": "array"
          },
          "orderIntentId": {
            "type": "string"
          },
          "status": {
            "enum": [
              "APPROVED",
              "ACTIVE"
            ],
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "OrderBillEstimateResponseDto": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/OrderBillEstimateItemResponseDto"
            },
            "type": "array"
          },
          "orderIntentId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrderCancellationItemDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderItemRequestDto"
          },
          {
            "properties": {
              "entitlement": {
                "$ref": "#/components/schemas/OrderEntitlementRefDto"
              },
              "isImmediate": {
                "nullable": true,
                "type": "boolean"
              },
              "testParameters": {
                "$ref": "#/components/schemas/TestParametersDto"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "entitlement",
          "itemId",
          "type"
        ],
        "type": "object"
      },
      "OrderCreationItemDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderItemRequestDto"
          },
          {
            "properties": {
              "billingAnchorTime": {
                "description": "Required to create a back dated subscription",
                "format": "int64",
                "type": "integer"
              },
              "entitlementHistory": {
                "$ref": "#/components/schemas/EntitlementHistoryDto"
              },
              "offeringId": {
                "type": "string"
              },
              "parentEntitlementId": {
                "type": "string"
              },
              "promotions": {
                "items": {
                  "$ref": "#/components/schemas/PromotionDto"
                },
                "maxItems": 1,
                "minItems": 0,
                "type": "array"
              },
              "subscriptionStartTime": {
                "description": "Required to create a back dated subscription",
                "format": "int64",
                "type": "integer"
              },
              "testParameters": {
                "$ref": "#/components/schemas/TestParametersDto"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "itemId",
          "type"
        ],
        "type": "object"
      },
      "OrderEntitlementRefDto": {
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "version"
        ],
        "type": "object"
      },
      "OrderGetResponseDto": {
        "properties": {
          "createdDate": {
            "format": "int64",
            "type": "integer"
          },
          "invoiceGroupId": {
            "type": "string"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/OrderItemGetResponseDto"
            },
            "type": "array"
          },
          "metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "orderId": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "transactionAccountId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrderItemGetResponseDto": {
        "properties": {
          "backdateTimestamp": {
            "format": "int64",
            "type": "integer"
          },
          "billingAnchorTime": {
            "format": "int64",
            "type": "integer"
          },
          "isImmediate": {
            "nullable": true,
            "type": "boolean"
          },
          "offeringId": {
            "type": "string"
          },
          "optedUsageOptions": {
            "$ref": "#/components/schemas/OptedUsageOptionDto"
          },
          "orderItemId": {
            "type": "string"
          },
          "originalOrderItemId": {
            "description": "points to orderItemId which is executed in SYSTEM_ORDER",
            "type": "string"
          },
          "parentEntitlementId": {
            "type": "string"
          },
          "processingInfo": {
            "$ref": "#/components/schemas/ProcessingInfo"
          },
          "promotionIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "promotions": {
            "items": {
              "$ref": "#/components/schemas/PromotionDto"
            },
            "type": "array"
          },
          "rewindToOrderItemId": {
            "type": "string"
          },
          "subscriptionStartTime": {
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "enum": [
              "CREATION_ORDER",
              "AMENDMENT_ORDER",
              "CANCELLATION_ORDER",
              "SYSTEM_CANCELLATION_ORDER",
              "SYSTEM_AMENDMENT_ORDER",
              "REACTIVATION_ORDER",
              "ACCOUNT_MODIFICATION_ORDER",
              "REWIND_ORDER"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrderItemRequestDto": {
        "discriminator": {
          "mapping": {
            "ACCOUNT_MODIFICATION_ORDER": "#/components/schemas/OrderAccountModificationItemDto",
            "AMENDMENT_ORDER": "#/components/schemas/OrderAmendmentItemDto",
            "CANCELLATION_ORDER": "#/components/schemas/OrderCancellationItemDto",
            "CREATION_ORDER": "#/components/schemas/OrderCreationItemDto",
            "REACTIVATION_ORDER": "#/components/schemas/OrderReactivationItemDto",
            "REWIND_ORDER": "#/components/schemas/OrderRewindItemDto",
            "SYSTEM_AMENDMENT_ORDER": "#/components/schemas/SystemOrderAmendmentItemDto",
            "SYSTEM_CANCELLATION_ORDER": "#/components/schemas/SystemOrderCancellationItemDto"
          },
          "propertyName": "type"
        },
        "properties": {
          "itemId": {
            "type": "string"
          },
          "optedUsageOptions": {
            "$ref": "#/components/schemas/OptedUsageOptionDto"
          },
          "promotionIds": {
            "description": "Blank/Empty Strings will be treated as null",
            "items": {
              "description": "Blank/Empty Strings will be treated as null",
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "CREATION_ORDER",
              "AMENDMENT_ORDER",
              "CANCELLATION_ORDER",
              "SYSTEM_CANCELLATION_ORDER",
              "SYSTEM_AMENDMENT_ORDER",
              "REACTIVATION_ORDER",
              "ACCOUNT_MODIFICATION_ORDER",
              "REWIND_ORDER"
            ],
            "type": "string"
          }
        },
        "required": [
          "itemId",
          "type"
        ],
        "type": "object"
      },
      "OrderItemResponseDto": {
        "properties": {
          "itemId": {
            "type": "string"
          },
          "orderItemId": {
            "type": "string"
          }
        },
        "required": [
          "itemId",
          "orderItemId"
        ],
        "type": "object"
      },
      "OrderItemValidationErrorResponseDto": {
        "properties": {
          "errorCode": {
            "type": "string"
          },
          "errorName": {
            "type": "string"
          },
          "field": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrderReactivationItemDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderItemRequestDto"
          },
          {
            "properties": {
              "entitlement": {
                "$ref": "#/components/schemas/OrderEntitlementRefDto"
              },
              "offeringId": {
                "type": "string"
              },
              "promotions": {
                "items": {
                  "$ref": "#/components/schemas/PromotionDto"
                },
                "maxItems": 1,
                "minItems": 0,
                "type": "array"
              },
              "testParameters": {
                "$ref": "#/components/schemas/TestParametersDto"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "entitlement",
          "itemId",
          "type"
        ],
        "type": "object"
      },
      "OrderRequestDto": {
        "properties": {
          "invoiceGroupId": {
            "type": "string"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/OrderItemRequestDto"
            },
            "type": "array"
          },
          "metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "orderId": {
            "type": "string"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "OrderResponseDto": {
        "properties": {
          "invoiceGroupId": {
            "type": "string"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/OrderItemResponseDto"
            },
            "type": "array"
          },
          "metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "orderId": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "transactionAccountId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrderRewindItemDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderItemRequestDto"
          },
          {
            "properties": {
              "backdateTimestamp": {
                "format": "int64",
                "type": "integer"
              },
              "billingAnchorTime": {
                "format": "int64",
                "type": "integer"
              },
              "entitlement": {
                "$ref": "#/components/schemas/OrderEntitlementRefDto"
              },
              "offeringId": {
                "type": "string"
              },
              "promotions": {
                "items": {
                  "$ref": "#/components/schemas/PromotionDto"
                },
                "maxItems": 1,
                "minItems": 0,
                "type": "array"
              },
              "rewindToOrderItemId": {
                "type": "string"
              },
              "testParameters": {
                "$ref": "#/components/schemas/TestParametersDto"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "entitlement",
          "itemId",
          "rewindToOrderItemId",
          "type"
        ],
        "type": "object"
      },
      "OrderServiceValidationErrorResponse": {
        "properties": {
          "code": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/ItemValidationErrorResponseDto"
            },
            "type": "array"
          },
          "status": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Outcome": {
        "additionalProperties": false,
        "properties": {
          "field": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "OverRideDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BenefitDto"
          },
          {
            "properties": {
              "customisable": {
                "$ref": "#/components/schemas/PromotionBenefitCustomisableDto"
              },
              "duration": {
                "enum": [
                  "FOREVER",
                  "ONCE",
                  "REPEATING"
                ],
                "type": "string"
              },
              "iterations": {
                "description": "valid iteration when duration is 'REPEATING' or null ",
                "format": "int32",
                "minimum": 1,
                "nullable": true,
                "type": "integer"
              },
              "subBenefitType": {
                "enum": [
                  "TRIAL"
                ],
                "type": "string"
              },
              "value": {
                "format": "float",
                "type": "number"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "benefitType",
          "duration",
          "subBenefitType",
          "value"
        ],
        "type": "object"
      },
      "PageRequest": {
        "additionalProperties": false,
        "properties": {
          "pageSize": {
            "default": 20,
            "example": 20,
            "format": "int32",
            "maximum": 1000,
            "minimum": 0,
            "type": "integer"
          },
          "startId": {
            "description": "Use the value of lastEvaluatedKey returned in a PagedList in this parameter to continue paging from where the PagedList finished. If there weren't enough records left to search in order to fill up the previous PagedList completely, the value of lastEvaluatedKey will be null, therefore you dont have to continue paging.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagedListInvoiceDto": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/InvoiceDto"
            },
            "type": "array"
          },
          "lastEvaluatedKey": {
            "description": "Use the lastEvaluatedKey in your next pageRequest to continue paging from where the PagedList finished. If there weren't enough records left to search in order to fill up the PagedList completely, the value of lastEvaluatedKey will be null, therefore you dont have to continue paging.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagedListInvoiceGroupDto": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/InvoiceGroupDto"
            },
            "type": "array"
          },
          "lastEvaluatedKey": {
            "description": "Use the lastEvaluatedKey in your next pageRequest to continue paging from where the PagedList finished. If there weren't enough records left to search in order to fill up the PagedList completely, the value of lastEvaluatedKey will be null, therefore you dont have to continue paging.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagedListPaymentMethodDto": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreditCard"
                },
                {
                  "$ref": "#/components/schemas/Deferred"
                }
              ]
            },
            "type": "array"
          },
          "lastEvaluatedKey": {
            "description": "Use the lastEvaluatedKey in your next pageRequest to continue paging from where the PagedList finished. If there weren't enough records left to search in order to fill up the PagedList completely, the value of lastEvaluatedKey will be null, therefore you dont have to continue paging.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagedListShipToPartyDto": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ShipToPartyDto"
            },
            "type": "array"
          },
          "lastEvaluatedKey": {
            "description": "Use the lastEvaluatedKey in your next pageRequest to continue paging from where the PagedList finished. If there weren't enough records left to search in order to fill up the PagedList completely, the value of lastEvaluatedKey will be null, therefore you dont have to continue paging.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagedListSyncCreditNoteDto": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/SyncCreditNoteDto"
            },
            "type": "array"
          },
          "lastEvaluatedKey": {
            "description": "Use the lastEvaluatedKey in your next pageRequest to continue paging from where the PagedList finished. If there weren't enough records left to search in order to fill up the PagedList completely, the value of lastEvaluatedKey will be null, therefore you dont have to continue paging.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagedListSyncInvoiceDto": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/SyncInvoiceDto"
            },
            "type": "array"
          },
          "lastEvaluatedKey": {
            "description": "Use the lastEvaluatedKey in your next pageRequest to continue paging from where the PagedList finished. If there weren't enough records left to search in order to fill up the PagedList completely, the value of lastEvaluatedKey will be null, therefore you dont have to continue paging.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagedListSyncInvoiceGroupDto": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/SyncInvoiceGroupDto"
            },
            "type": "array"
          },
          "lastEvaluatedKey": {
            "description": "Use the lastEvaluatedKey in your next pageRequest to continue paging from where the PagedList finished. If there weren't enough records left to search in order to fill up the PagedList completely, the value of lastEvaluatedKey will be null, therefore you dont have to continue paging.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagedListSyncPaymentMethodDto": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/SyncPaymentMethodDto"
            },
            "type": "array"
          },
          "lastEvaluatedKey": {
            "description": "Use the lastEvaluatedKey in your next pageRequest to continue paging from where the PagedList finished. If there weren't enough records left to search in order to fill up the PagedList completely, the value of lastEvaluatedKey will be null, therefore you dont have to continue paging.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagedListSyncShipToPartyDto": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/SyncShipToPartyDto"
            },
            "type": "array"
          },
          "lastEvaluatedKey": {
            "description": "Use the lastEvaluatedKey in your next pageRequest to continue paging from where the PagedList finished. If there weren't enough records left to search in order to fill up the PagedList completely, the value of lastEvaluatedKey will be null, therefore you dont have to continue paging.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagedListSyncTransactionAccountDto": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/SyncTransactionAccountDto"
            },
            "type": "array"
          },
          "lastEvaluatedKey": {
            "description": "Use the lastEvaluatedKey in your next pageRequest to continue paging from where the PagedList finished. If there weren't enough records left to search in order to fill up the PagedList completely, the value of lastEvaluatedKey will be null, therefore you dont have to continue paging.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PaginatedOrderItemResponseDto": {
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "orderItems": {
            "items": {
              "$ref": "#/components/schemas/AllDetailsOrderItemResponseDto"
            },
            "type": "array"
          },
          "startId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PaginatedResponseEntitlementTemplateResponse": {
        "additionalProperties": false,
        "properties": {
          "nextId": {
            "type": "string"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/EntitlementTemplateResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "values"
        ],
        "type": "object"
      },
      "PaginatedResponseGeneric": {
        "additionalProperties": false,
        "properties": {
          "nextId": {
            "description": "The next id to start the next search from",
            "type": "object"
          },
          "results": {
            "description": "Actual search results for the input query",
            "items": {
              "description": "Actual search results for the input query",
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PaginatedResponseGenericBulkSubscriptionResponseDtoString": {
        "additionalProperties": false,
        "properties": {
          "nextId": {
            "type": "string"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/BulkSubscriptionResponseDto"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PaginatedResponseGenericEntitlementResponseString": {
        "additionalProperties": false,
        "properties": {
          "nextId": {
            "type": "string"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/EntitlementResponse"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PaginatedResponseOfferingGroupResponse": {
        "additionalProperties": false,
        "properties": {
          "nextId": {
            "type": "string"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/OfferingGroupResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "values"
        ],
        "type": "object"
      },
      "PaginatedResponseOfferingResponse": {
        "additionalProperties": false,
        "properties": {
          "nextId": {
            "type": "string"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/OfferingResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "values"
        ],
        "type": "object"
      },
      "PaginatedResponsePolicyResponse": {
        "additionalProperties": false,
        "properties": {
          "nextId": {
            "type": "string"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/PolicyResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "values"
        ],
        "type": "object"
      },
      "PaginatedResponsePricingPlanResponse": {
        "additionalProperties": false,
        "properties": {
          "nextId": {
            "type": "string"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/PricingPlanResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "values"
        ],
        "type": "object"
      },
      "PaginatedResponseProductResponse": {
        "additionalProperties": false,
        "properties": {
          "nextId": {
            "type": "string"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/ProductResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "values"
        ],
        "type": "object"
      },
      "PartnerStatus": {
        "additionalProperties": false,
        "properties": {
          "discountTier": {
            "type": "string"
          },
          "programLevelGlobal": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Payload": {
        "additionalProperties": false,
        "description": "Search payload containing search query",
        "properties": {
          "from": {
            "format": "int32",
            "type": "integer"
          },
          "query": {
            "$ref": "#/components/schemas/Query"
          },
          "size": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "query"
        ],
        "type": "object"
      },
      "PaymentMethodDto": {
        "additionalProperties": false,
        "discriminator": {
          "mapping": {
            "CARD": "#/components/schemas/CreditCard",
            "DEFERRED": "#/components/schemas/Deferred"
          },
          "propertyName": "type"
        },
        "properties": {
          "currency": {
            "description": "We currently only support USD",
            "enum": [
              "USD"
            ],
            "example": "USD",
            "type": "string"
          },
          "default": {
            "description": "Deferred type is not allowed as default",
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "type": {
            "description": "Payment types would be either CreditCard or Deferred",
            "enum": [
              "CARD",
              "DEFERRED"
            ],
            "example": "CARD",
            "type": "string"
          }
        },
        "required": [
          "currency",
          "default",
          "id",
          "type"
        ],
        "type": "object"
      },
      "PaymentMethodInput": {
        "additionalProperties": false,
        "discriminator": {
          "mapping": {
            "DEFERRED": "#/components/schemas/DeferredInput"
          },
          "propertyName": "type"
        },
        "example": {
          "currency": "USD",
          "terms": {
            "invoiceDueDays": 30
          },
          "type": "DEFERRED"
        },
        "properties": {
          "currency": {
            "enum": [
              "USD"
            ],
            "example": "USD",
            "type": "string"
          },
          "type": {
            "enum": [
              "DEFERRED"
            ],
            "type": "string"
          }
        },
        "required": [
          "currency"
        ],
        "type": "object"
      },
      "Period": {
        "additionalProperties": false,
        "properties": {
          "endAt": {
            "description": "Timestamp in Epoch milliseconds",
            "format": "int64",
            "type": "integer"
          },
          "startAt": {
            "description": "Timestamp in Epoch milliseconds",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "endAt",
          "startAt"
        ],
        "type": "object"
      },
      "Plan": {
        "additionalProperties": false,
        "properties": {
          "hostingType": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "sku": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlanInput": {
        "additionalProperties": false,
        "properties": {
          "hostingType": {
            "description": "Hosting type. Possible values: cloud",
            "type": "string"
          },
          "id": {
            "description": "Plan ID",
            "type": "string"
          },
          "sku": {
            "description": "Standard keeping unit",
            "type": "string"
          },
          "type": {
            "description": "Plan type. All possible values of price eligibility: commercial, academic, opensource, etc.",
            "type": "string"
          }
        },
        "required": [
          "hostingType",
          "id",
          "sku",
          "type"
        ],
        "type": "object"
      },
      "PolicyInput": {
        "additionalProperties": false,
        "properties": {
          "condition": {
            "description": "A string containing Spring SpEL notation to be evaluated by the policy engine",
            "example": "#from.offering.level > 100 && #to.group.slug == 'private'",
            "type": "string"
          },
          "description": {
            "description": "A description about this policy",
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "policyType": {
            "description": "Policy to be applied when the condition evaluates to true",
            "enum": [
              "ALLOWED",
              "NOT_ALLOWED"
            ],
            "type": "string"
          },
          "productKey": {
            "type": "string"
          }
        },
        "required": [
          "condition",
          "key",
          "policyType",
          "productKey"
        ],
        "type": "object"
      },
      "PolicyResponse": {
        "additionalProperties": false,
        "properties": {
          "condition": {
            "description": "A string containing Spring SpEL notation to be evaluated by the policy engine",
            "example": "#from.offering.level > 100 && #to.group.slug == 'private'",
            "type": "string"
          },
          "description": {
            "description": "A description about this policy",
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "policyType": {
            "description": "Policy to be applied when the condition evaluates to true",
            "enum": [
              "ALLOWED",
              "NOT_ALLOWED"
            ],
            "type": "string"
          },
          "productKey": {
            "type": "string"
          }
        },
        "required": [
          "condition",
          "key",
          "policyType",
          "productKey"
        ],
        "type": "object"
      },
      "PostalAddress": {
        "additionalProperties": false,
        "properties": {
          "city": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "country": {
            "description": "This field should follow ISO 3166-1 Alpha 2",
            "type": "string"
          },
          "line1": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "line2": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "postcode": {
            "maxLength": 11,
            "minLength": 0,
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        },
        "required": [
          "country"
        ],
        "type": "object"
      },
      "PricingPlanInput": {
        "additionalProperties": false,
        "properties": {
          "currency": {
            "enum": [
              "USD",
              "JPY"
            ],
            "type": "string"
          },
          "derivedPricingPlanKeys": {
            "additionalProperties": {
              "description": "Synthetic pricing plan keys",
              "type": "string"
            },
            "description": "Synthetic pricing plan keys",
            "type": "object"
          },
          "description": {
            "description": "Description of the pricing plan",
            "type": "string"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/PricingPlanItemInput"
            },
            "type": "array"
          },
          "key": {
            "description": "Unique UUID to identify this pricing plan",
            "type": "string"
          },
          "offering": {
            "description": "The uuid of offering for which this pricing plan is intended",
            "type": "string"
          },
          "primaryCycle": {
            "$ref": "#/components/schemas/CycleInput"
          },
          "sku": {
            "description": "Stock Keeping Unit",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "currency",
          "derivedPricingPlanKeys",
          "items",
          "key",
          "offering",
          "primaryCycle"
        ],
        "type": "object"
      },
      "PricingPlanItemInput": {
        "additionalProperties": false,
        "properties": {
          "chargeElement": {
            "type": "string"
          },
          "chargeType": {
            "enum": [
              "METERED",
              "LICENSED",
              "AUTO_SCALING"
            ],
            "type": "string"
          },
          "cycle": {
            "$ref": "#/components/schemas/CycleInput"
          },
          "prorateOnUsageChange": {
            "enum": [
              "CREATE_PRORATIONS",
              "NONE",
              "ALWAYS_INVOICE"
            ],
            "type": "string"
          },
          "tiers": {
            "items": {
              "$ref": "#/components/schemas/PricingPlanTierInput"
            },
            "type": "array"
          },
          "tiersMode": {
            "enum": [
              "GRADUATED",
              "VOLUME"
            ],
            "type": "string"
          },
          "usageUpdateCadence": {
            "$ref": "#/components/schemas/UsageUpdateCadenceInput"
          }
        },
        "required": [
          "chargeElement",
          "chargeType",
          "cycle",
          "tiers",
          "tiersMode"
        ],
        "type": "object"
      },
      "PricingPlanItemResponse": {
        "additionalProperties": false,
        "properties": {
          "chargeElement": {
            "type": "string"
          },
          "chargeType": {
            "enum": [
              "METERED",
              "LICENSED",
              "AUTO_SCALING"
            ],
            "type": "string"
          },
          "cycle": {
            "$ref": "#/components/schemas/CycleResponse"
          },
          "prorateOnUsageChange": {
            "enum": [
              "CREATE_PRORATIONS",
              "NONE",
              "ALWAYS_INVOICE"
            ],
            "type": "string"
          },
          "tiers": {
            "items": {
              "$ref": "#/components/schemas/PricingPlanTierResponse"
            },
            "type": "array"
          },
          "tiersMode": {
            "enum": [
              "GRADUATED",
              "VOLUME"
            ],
            "type": "string"
          },
          "usageUpdateCadence": {
            "$ref": "#/components/schemas/UsageUpdateCadenceResponse"
          }
        },
        "required": [
          "chargeElement",
          "chargeType",
          "cycle",
          "tiers",
          "tiersMode"
        ],
        "type": "object"
      },
      "PricingPlanRelationshipResponse": {
        "additionalProperties": false,
        "properties": {
          "fromPricingPlanKey": {
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "toPricingPlanKey": {
            "type": "string"
          },
          "type": {
            "enum": [
              "ADVANTAGE_PRICING",
              "NEXT_PRICING",
              "SYNTHETIC_GENERATED",
              "CURRENCY_GENERATED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "PricingPlanResponse": {
        "additionalProperties": false,
        "properties": {
          "activatedWithReason": {
            "enum": [
              "DEFAULT_PRICING",
              "ADVANTAGE_PRICING"
            ],
            "type": "string"
          },
          "ari": {
            "type": "string"
          },
          "currency": {
            "enum": [
              "USD",
              "JPY"
            ],
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/PricingPlanItemResponse"
            },
            "type": "array"
          },
          "key": {
            "type": "string"
          },
          "maxNewQuoteDate": {
            "format": "int64",
            "type": "integer"
          },
          "offeringKey": {
            "type": "string"
          },
          "offeringName": {
            "type": "string"
          },
          "originalPricingPlanKey": {
            "description": "Original pricing plan key",
            "type": "string"
          },
          "primaryCycle": {
            "$ref": "#/components/schemas/CycleResponse"
          },
          "relationships": {
            "items": {
              "$ref": "#/components/schemas/PricingPlanRelationshipResponse"
            },
            "type": "array",
            "uniqueItems": true
          },
          "sku": {
            "description": "Stock Keeping Unit",
            "type": "string"
          },
          "status": {
            "enum": [
              "DRAFT",
              "ACTIVE",
              "AT_NOTICE",
              "EXPIRED"
            ],
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "updatedAt": {
            "format": "int64",
            "type": "integer"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "ari",
          "currency",
          "description",
          "items",
          "key",
          "offeringKey",
          "offeringName",
          "primaryCycle",
          "sku",
          "status",
          "type"
        ],
        "type": "object"
      },
      "PricingPlanTierInput": {
        "additionalProperties": false,
        "properties": {
          "ceiling": {
            "format": "int64",
            "type": "integer"
          },
          "flatAmount": {
            "format": "int64",
            "type": "integer"
          },
          "floor": {
            "format": "int64",
            "type": "integer"
          },
          "unitAmount": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "floor"
        ],
        "type": "object"
      },
      "PricingPlanTierResponse": {
        "additionalProperties": false,
        "properties": {
          "amount": {
            "format": "int64",
            "type": "integer"
          },
          "ceiling": {
            "format": "int64",
            "type": "integer"
          },
          "flatAmount": {
            "description": "Flat amount represents the charge for the block",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "floor": {
            "format": "int64",
            "type": "integer"
          },
          "policy": {
            "enum": [
              "BLOCK",
              "PER_UNIT"
            ],
            "type": "string"
          },
          "unitAmount": {
            "description": "Unit amount represents the charge per unit",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "amount",
          "floor",
          "policy"
        ],
        "type": "object"
      },
      "ProcessingInfo": {
        "properties": {
          "accountModification": {
            "$ref": "#/components/schemas/AccountModificationDto"
          },
          "entitlement": {
            "$ref": "#/components/schemas/OrderEntitlementRefDto"
          },
          "saleTransitionDetails": {
            "$ref": "#/components/schemas/SaleTransitionDetailsDto"
          },
          "saleTransitionType": {
            "enum": [
              "NEW",
              "NA",
              "DOWNGRADE",
              "UPGRADE",
              "RENEW"
            ],
            "type": "string"
          },
          "status": {
            "enum": [
              "PROCESSING",
              "SUCCESS",
              "FAIL"
            ],
            "type": "string"
          },
          "transitionTime": {
            "enum": [
              "IMMEDIATE",
              "NEXT_CYCLE",
              "SCHEDULED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductInput": {
        "additionalProperties": false,
        "properties": {
          "chargeElements": {
            "description": "List of elements on which the product would be charged. Eg unit, user, minutes",
            "items": {
              "description": "List of elements on which the product would be charged. Eg unit, user, minutes",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "key": {
            "description": "A unique uuid as identifier of the product",
            "type": "string"
          },
          "name": {
            "description": "Name of the product. Eg statupage",
            "type": "string"
          },
          "uncollectibleAction": {
            "$ref": "#/components/schemas/UncollectibleActionInput"
          }
        },
        "required": [
          "key",
          "name"
        ],
        "type": "object"
      },
      "ProductResponse": {
        "additionalProperties": false,
        "properties": {
          "ari": {
            "type": "string"
          },
          "chargeElements": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "offerings": {
            "items": {
              "$ref": "#/components/schemas/OfferingResponse"
            },
            "type": "array"
          },
          "uncollectibleAction": {
            "$ref": "#/components/schemas/UncollectibleActionResponse"
          },
          "updatedAt": {
            "format": "int64",
            "type": "integer"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "ari",
          "key",
          "name"
        ],
        "type": "object"
      },
      "ProductUpdateInput": {
        "additionalProperties": false,
        "properties": {
          "chargeElements": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "name": {
            "type": "string"
          },
          "uncollectibleAction": {
            "$ref": "#/components/schemas/UncollectibleActionInput"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "Promotion": {
        "additionalProperties": false,
        "description": "valid promotions or null",
        "nullable": true,
        "properties": {
          "customisedValues": {
            "$ref": "#/components/schemas/CustomisedValues"
          },
          "promotionId": {
            "description": "valid promotionId or null",
            "nullable": true,
            "type": "string"
          },
          "promotionInstanceId": {
            "description": "valid promotionInstanceId or null",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PromotionBenefitCustomisableDto": {
        "additionalProperties": false,
        "description": "valid customisable promotion benefit or null ",
        "nullable": true,
        "properties": {
          "duration": {
            "items": {
              "enum": [
                "FOREVER",
                "ONCE",
                "REPEATING"
              ],
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "iterations": {
            "$ref": "#/components/schemas/IntegerLimiterDto"
          },
          "value": {
            "$ref": "#/components/schemas/DecimalLimiterDto"
          }
        },
        "required": [
          "duration",
          "value"
        ],
        "type": "object"
      },
      "PromotionBenefitDto": {
        "properties": {
          "duration": {
            "enum": [
              "FOREVER",
              "ONCE",
              "REPEATING"
            ],
            "type": "string"
          },
          "iterations": {
            "format": "int32",
            "type": "integer"
          },
          "value": {
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "PromotionDefinition": {
        "additionalProperties": false,
        "description": "the actual details of the promotion",
        "nullable": true,
        "properties": {
          "customisedValues": {
            "$ref": "#/components/schemas/CustomisedValues"
          },
          "promotionId": {
            "description": "the id of applied promotion",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PromotionDefinitionDto": {
        "properties": {
          "customisedValues": {
            "$ref": "#/components/schemas/CustomPromotionValueDto"
          },
          "promotionId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PromotionDto": {
        "properties": {
          "promotionDefinition": {
            "$ref": "#/components/schemas/PromotionDefinitionDto"
          },
          "promotionInstanceId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PromotionErrorResponse": {
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PromotionInstance": {
        "additionalProperties": false,
        "description": "valid promotionInstances or null",
        "nullable": true,
        "properties": {
          "promotionDefinition": {
            "$ref": "#/components/schemas/PromotionDefinition"
          },
          "promotionInstanceId": {
            "description": "the instanceId for an applied promotion",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PromotionPurposeResponse": {
        "additionalProperties": false,
        "properties": {
          "invoiceNote": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "reasonCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PurchaseOrder": {
        "additionalProperties": false,
        "properties": {
          "number": {
            "type": "string"
          },
          "oneTimeUse": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PurchaseOrderInput": {
        "additionalProperties": false,
        "properties": {
          "number": {
            "type": "string"
          },
          "oneTimeUse": {
            "default": true,
            "description": "Whether this PO number should be deleted once it's applied to an invoice",
            "type": "boolean"
          }
        },
        "required": [
          "number"
        ],
        "type": "object"
      },
      "Query": {
        "additionalProperties": false,
        "description": "Search query",
        "properties": {
          "bool": {
            "$ref": "#/components/schemas/BooleanQuery"
          },
          "exists": {
            "additionalProperties": {
              "description": "Exists query",
              "nullable": true,
              "type": "string"
            },
            "description": "Exists query",
            "nullable": true,
            "type": "object",
            "writeOnly": true
          },
          "match": {
            "additionalProperties": {
              "description": "Match query",
              "nullable": true,
              "type": "string"
            },
            "description": "Match query",
            "nullable": true,
            "type": "object",
            "writeOnly": true
          },
          "range": {
            "additionalProperties": {
              "$ref": "#/components/schemas/RangeQuery"
            },
            "description": "Range based query",
            "nullable": true,
            "type": "object",
            "writeOnly": true
          },
          "term": {
            "additionalProperties": {
              "description": "Term query for exact search operations",
              "nullable": true,
              "type": "string"
            },
            "description": "Term query for exact search operations",
            "nullable": true,
            "type": "object",
            "writeOnly": true
          },
          "wildcard": {
            "additionalProperties": {
              "description": "Wildcard query",
              "nullable": true,
              "type": "string"
            },
            "description": "Wildcard query",
            "nullable": true,
            "type": "object",
            "writeOnly": true
          }
        },
        "type": "object"
      },
      "RangeDto": {
        "additionalProperties": false,
        "description": "valid range or  null",
        "nullable": true,
        "properties": {
          "lowerBound": {
            "description": "valid lowerBound or  null",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "upperBound": {
            "description": "valid upperBound or  null",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RangeQuery": {
        "additionalProperties": false,
        "description": "Range based query",
        "nullable": true,
        "properties": {
          "boost": {
            "format": "float",
            "type": "number"
          },
          "format": {
            "type": "string"
          },
          "gt": {
            "type": "string"
          },
          "gte": {
            "type": "string"
          },
          "lt": {
            "type": "string"
          },
          "lte": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RecipientsDto": {
        "additionalProperties": false,
        "properties": {
          "recipients": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "recipients"
        ],
        "type": "object"
      },
      "RecipientsInput": {
        "additionalProperties": false,
        "properties": {
          "recipients": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ReleaseEntitlementLockDto": {
        "properties": {
          "lockKey": {
            "type": "string"
          },
          "lockOwners": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "lockKey"
        ],
        "type": "object"
      },
      "ReleaseEntitlementLockResponseDto": {
        "properties": {
          "deleteLockStatus": {
            "type": "boolean"
          },
          "failureReleaseLockForOrderItems": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "successReleaseLockForOrderItems": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Result": {
        "additionalProperties": false,
        "properties": {
          "arguments": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RewindOrderRequestDto": {
        "properties": {
          "invoiceGroupId": {
            "type": "string"
          },
          "item": {
            "$ref": "#/components/schemas/OrderRewindItemDto"
          },
          "transactionAccountId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RewindToDetailsResponseDto": {
        "properties": {
          "rewindOrderRequest": {
            "$ref": "#/components/schemas/RewindOrderRequestDto"
          }
        },
        "type": "object"
      },
      "RoleAssignment": {
        "additionalProperties": false,
        "properties": {
          "resourceAri": {
            "example": "ari:cloud:commerce::transaction-account/txa-id-123",
            "type": "string"
          },
          "role": {
            "enum": [
              "transaction-account/billing-admin"
            ],
            "example": "transaction-account/billing-admin",
            "type": "string"
          },
          "userId": {
            "example": "billing-admin-id-123",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RoleAssignments": {
        "additionalProperties": false,
        "properties": {
          "assignments": {
            "items": {
              "$ref": "#/components/schemas/RoleAssignment"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RuleConditionDto": {
        "discriminator": {
          "mapping": {
            "AND": "#/components/schemas/AndRuleConditionDto",
            "OR": "#/components/schemas/OrRuleConditionDto"
          },
          "propertyName": "operatorType"
        },
        "properties": {
          "operatorType": {
            "enum": [
              "OR",
              "AND"
            ],
            "type": "string"
          }
        },
        "required": [
          "operatorType"
        ],
        "type": "object"
      },
      "SaleTransitionDetailsDto": {
        "properties": {
          "currentOfferingLevel": {
            "format": "int32",
            "type": "integer"
          },
          "glpForCurrentPlan": {
            "format": "int64",
            "type": "integer"
          },
          "glpForLastPaidPlan": {
            "format": "int64",
            "type": "integer"
          },
          "glpForNextPlan": {
            "format": "int64",
            "type": "integer"
          },
          "lastPaidOfferingLevel": {
            "format": "int32",
            "type": "integer"
          },
          "nextOfferingLevel": {
            "format": "int32",
            "type": "integer"
          },
          "saleTransitionType": {
            "enum": [
              "NEW",
              "NA",
              "DOWNGRADE",
              "UPGRADE",
              "RENEW"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "SetupConfirmPayment": {
        "additionalProperties": false,
        "properties": {
          "ccpInvoiceId": {
            "example": "f6a73fd4-28ab-472a-a744-be7b7507b21e",
            "type": "string"
          },
          "ccpPaymentMethodId": {
            "example": "2531af32-f9bb-4103-b970-25f57d90b14f",
            "type": "string"
          },
          "paymentIntentClientSecret": {
            "example": "pi_1HeDQ8HxhvApkIk7jjgE1G0P_secret_wNH5bFK1Ixk3fMNkMdcD8jJef",
            "type": "string"
          },
          "paymentIntentId": {
            "example": "pi_1HeDQ8HxhvApkIk7jjgE1G0P",
            "type": "string"
          },
          "publicKey": {
            "example": "pk_test_Kc26rjR9aHz38KDp5z4KB3Iavndat1IA9a0ePtc02",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SetupIntent": {
        "additionalProperties": false,
        "properties": {
          "clientSecret": {
            "type": "string"
          },
          "paymentMethodId": {
            "type": "string"
          },
          "publicKey": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SetupIntentInput": {
        "additionalProperties": false,
        "properties": {
          "defaultForInvoiceGroup": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ShipToPartyDto": {
        "additionalProperties": false,
        "properties": {
          "createdAt": {
            "description": "Timestamp in Epoch milliseconds",
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "postalAddress": {
            "$ref": "#/components/schemas/PostalAddress"
          },
          "taxId": {
            "type": "string"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name",
          "postalAddress",
          "version"
        ],
        "type": "object"
      },
      "ShipToPartyInput": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "postalAddress": {
            "$ref": "#/components/schemas/PostalAddress"
          },
          "taxId": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "name",
          "postalAddress"
        ],
        "type": "object"
      },
      "SignUpInput": {
        "additionalProperties": false,
        "properties": {
          "to": {
            "$ref": "#/components/schemas/TransitionResourceInput"
          }
        },
        "required": [
          "to"
        ],
        "type": "object"
      },
      "SingleQuery": {
        "additionalProperties": false,
        "properties": {
          "exists": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "match": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "range": {
            "additionalProperties": {
              "$ref": "#/components/schemas/RangeQuery"
            },
            "type": "object"
          },
          "term": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "wildcard": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "StringLimiterDto": {
        "discriminator": {
          "mapping": {
            "SET": "#/components/schemas/StringSetLimiterDto"
          },
          "propertyName": "type"
        },
        "properties": {
          "type": {
            "enum": [
              "RANGE",
              "SET"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "StringSetLimiterDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StringLimiterDto"
          },
          {
            "properties": {
              "anyOf": {
                "items": {
                  "type": "string"
                },
                "maxItems": 2147483647,
                "minItems": 1,
                "type": "array",
                "uniqueItems": true
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "anyOf",
          "type"
        ],
        "type": "object"
      },
      "Subscription": {
        "additionalProperties": false,
        "properties": {
          "chargeType": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "itemId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SubscriptionAccountDetailsDto": {
        "properties": {
          "invoiceGroupId": {
            "type": "string"
          },
          "transactionAccountId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SubscriptionCancelRequestDto": {
        "additionalProperties": false,
        "properties": {
          "metadata": {
            "additionalProperties": {
              "description": "valid metadata or null",
              "nullable": true,
              "type": "string"
            },
            "description": "valid metadata or null",
            "nullable": true,
            "type": "object"
          },
          "orderItemId": {
            "description": "valid orderItemId or null",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "SubscriptionChargeDetailsDto": {
        "properties": {
          "chargeQuantities": {
            "items": {
              "$ref": "#/components/schemas/SubscriptionChargeQuantityDto"
            },
            "type": "array"
          },
          "offeringId": {
            "type": "string"
          },
          "pricingPlanId": {
            "type": "string"
          },
          "promotionInstances": {
            "items": {
              "$ref": "#/components/schemas/SubscriptionPromotionInstanceDto"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SubscriptionChargeQuantityDto": {
        "properties": {
          "chargeElement": {
            "type": "string"
          },
          "lastUpdateAt": {
            "format": "int64",
            "type": "integer"
          },
          "quantity": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "chargeElement",
          "quantity"
        ],
        "type": "object"
      },
      "SubscriptionCreateRequestDto": {
        "additionalProperties": false,
        "properties": {
          "billingAnchorTimestamp": {
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "chargeQuantities": {
            "description": "valid chargeQuantities with pricingPlanId or null",
            "items": {
              "$ref": "#/components/schemas/ChargeQuantity"
            },
            "nullable": true,
            "type": "array"
          },
          "endTimestamp": {
            "description": "valid endTimestamp or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "entitlementId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "invoiceGroupId": {
            "type": "string"
          },
          "invoiceImmediately": {
            "description": "valid invoiceImmediately or null",
            "nullable": true,
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "description": "valid metadata or null",
              "nullable": true,
              "type": "string"
            },
            "description": "valid metadata or null",
            "nullable": true,
            "type": "object"
          },
          "offeringId": {
            "type": "string"
          },
          "orderItemId": {
            "type": "string"
          },
          "pricingPlanId": {
            "description": "valid pricingPlanId with chargeQuantities or null",
            "nullable": true,
            "type": "string"
          },
          "promotionIds": {
            "deprecated": true,
            "description": "valid promotionIds or null",
            "items": {
              "description": "valid promotionIds or null",
              "nullable": true,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "promotions": {
            "description": "valid promotions or null",
            "items": {
              "$ref": "#/components/schemas/Promotion"
            },
            "nullable": true,
            "type": "array"
          },
          "skipTrial": {
            "description": "valid skipTrial or null",
            "nullable": true,
            "type": "boolean"
          },
          "startTimestamp": {
            "description": "valid startTimestamp or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "test": {
            "$ref": "#/components/schemas/TestFeatures"
          },
          "transactionAccountId": {
            "type": "string"
          }
        },
        "required": [
          "entitlementId",
          "invoiceGroupId",
          "offeringId",
          "orderItemId",
          "transactionAccountId"
        ],
        "type": "object"
      },
      "SubscriptionErrorResponse": {
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SubscriptionGLPDetailsDto": {
        "properties": {
          "currentOffering": {
            "type": "string"
          },
          "glpForCurrentPlan": {
            "format": "int64",
            "type": "integer"
          },
          "glpForLastPaidPlan": {
            "format": "int64",
            "type": "integer"
          },
          "glpForNextPlan": {
            "format": "int64",
            "type": "integer"
          },
          "lastPaidOffering": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SubscriptionInEntitlementDetails": {
        "additionalProperties": false,
        "properties": {
          "billingAnchorTimestamp": {
            "format": "int64",
            "type": "integer"
          },
          "chargeQuantities": {
            "items": {
              "$ref": "#/components/schemas/ChargeQuantity"
            },
            "type": "array"
          },
          "endTimestamp": {
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "invoiceGroupId": {
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "nextBillingTimestamp": {
            "format": "int64",
            "type": "integer"
          },
          "pricingPlanId": {
            "type": "string"
          },
          "promotionIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "promotionInstances": {
            "items": {
              "$ref": "#/components/schemas/PromotionInstance"
            },
            "type": "array"
          },
          "scheduledChanges": {
            "$ref": "#/components/schemas/SubscriptionSchedule"
          },
          "startTimestamp": {
            "format": "int64",
            "type": "integer"
          },
          "status": {
            "enum": [
              "PROCESSING",
              "GENERATED",
              "PAID",
              "UNPAID",
              "ACTIVE",
              "CANCELLED"
            ],
            "type": "string"
          }
        },
        "required": [
          "chargeQuantities",
          "invoiceGroupId",
          "promotionIds"
        ],
        "type": "object"
      },
      "SubscriptionInput": {
        "additionalProperties": false,
        "properties": {
          "chargeType": {
            "description": "Charge type. Possible values: METERED, LICENSED",
            "type": "string"
          },
          "id": {
            "description": "Subscription ID (SEN in HAMS).",
            "type": "string"
          },
          "itemId": {
            "type": "string"
          }
        },
        "required": [
          "chargeType",
          "id",
          "itemId"
        ],
        "type": "object"
      },
      "SubscriptionListPriceRequestDto": {
        "additionalProperties": false,
        "properties": {
          "chargeQuantities": {
            "description": "valid chargeQuantities or null",
            "items": {
              "$ref": "#/components/schemas/ChargeQuantity"
            },
            "nullable": true,
            "type": "array"
          },
          "key": {
            "type": "string"
          },
          "offeringId": {
            "type": "string"
          },
          "pricingPlanId": {
            "description": "valid pricingPlanId or null",
            "nullable": true,
            "type": "string"
          },
          "subscriptionId": {
            "description": "valid subscriptionId or null",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "offeringId"
        ],
        "type": "object"
      },
      "SubscriptionListPriceResponseDto": {
        "additionalProperties": false,
        "properties": {
          "currentOffering": {
            "description": "valid currentOffering or null",
            "nullable": true,
            "type": "string"
          },
          "glpForCurrentPlan": {
            "description": "valid glpForCurrentPlan or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "glpForLastPaidPlan": {
            "description": "valid glpForLastPaidPlan or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "glpForNextPlan": {
            "description": "valid glpForNextPlan or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "lastPaidOffering": {
            "description": "valid lastPaidOffering or null",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "SubscriptionNotificationDto": {
        "additionalProperties": false,
        "properties": {
          "accountDetails": {
            "$ref": "#/components/schemas/SubscriptionAccountDetailsDto"
          },
          "chargeDetails": {
            "$ref": "#/components/schemas/SubscriptionChargeDetailsDto"
          },
          "entitlementId": {
            "type": "string"
          },
          "eventId": {
            "type": "string"
          },
          "glpDetails": {
            "$ref": "#/components/schemas/SubscriptionGLPDetailsDto"
          },
          "metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "orderItemId": {
            "type": "string"
          },
          "originalOrderItemId": {
            "type": "string"
          },
          "subscriptionId": {
            "type": "string"
          },
          "type": {
            "enum": [
              "SUBSCRIPTION_END_EVENT",
              "SUBSCRIPTION_UPDATE_EVENT",
              "SUBSCRIPTION_TRIAL_TO_PAID_EVENT",
              "SUBSCRIPTION_SCHEDULE_ACTIVATION_EVENT"
            ],
            "type": "string"
          },
          "version": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "orderItemId",
          "type"
        ],
        "type": "object"
      },
      "SubscriptionPatchRequestDto": {
        "additionalProperties": false,
        "properties": {
          "billingAnchorTimestamp": {
            "description": "valid billingAnchorTimestamp or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "chargeQuantities": {
            "description": "valid chargeQuantities with pricingPlanId or null",
            "items": {
              "$ref": "#/components/schemas/ChargeQuantity"
            },
            "nullable": true,
            "type": "array"
          },
          "endTimestamp": {
            "description": "valid endTimestamp or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "entitlementId": {
            "description": "valid entitlementId or null",
            "nullable": true,
            "type": "string"
          },
          "invoiceGroupId": {
            "description": "valid invoiceGroupId or null",
            "nullable": true,
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "description": "valid metadata or null",
              "nullable": true,
              "type": "string"
            },
            "description": "valid metadata or null",
            "nullable": true,
            "type": "object"
          },
          "offeringId": {
            "description": "valid offeringId or null",
            "nullable": true,
            "type": "string"
          },
          "orderItemId": {
            "type": "string"
          },
          "pricingPlanId": {
            "description": "valid pricingPlanId with chargeQuantities or null",
            "nullable": true,
            "type": "string"
          },
          "promotionIds": {
            "deprecated": true,
            "description": "valid promotionIds or null",
            "items": {
              "description": "valid promotionIds or null",
              "nullable": true,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "promotions": {
            "description": "valid promotions or null",
            "items": {
              "$ref": "#/components/schemas/Promotion"
            },
            "nullable": true,
            "type": "array"
          },
          "skipTrial": {
            "description": "valid skipTrial or null",
            "nullable": true,
            "type": "boolean"
          },
          "transactionAccountId": {
            "description": "valid transactionAccountId or null",
            "nullable": true,
            "type": "string"
          },
          "version": {
            "description": "valid version or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "orderItemId"
        ],
        "type": "object"
      },
      "SubscriptionPromotionInstanceDto": {
        "properties": {
          "promotionDefinition": {
            "$ref": "#/components/schemas/PromotionDefinitionDto"
          },
          "promotionInstanceId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SubscriptionReactivateRequestDto": {
        "additionalProperties": false,
        "properties": {
          "billingAnchorTimestamp": {
            "description": "valid billingAnchorTimestamp or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "chargeQuantities": {
            "description": "valid chargeQuantities with pricingPlanId or null",
            "items": {
              "$ref": "#/components/schemas/ChargeQuantity"
            },
            "nullable": true,
            "type": "array"
          },
          "endTimestamp": {
            "description": "valid endTimestamp or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "invoiceGroupId": {
            "type": "string"
          },
          "invoiceImmediately": {
            "description": "valid invoiceImmediately or null",
            "nullable": true,
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "description": "valid metadata or null",
              "nullable": true,
              "type": "string"
            },
            "description": "valid metadata or null",
            "nullable": true,
            "type": "object"
          },
          "offeringId": {
            "type": "string"
          },
          "orderItemId": {
            "type": "string"
          },
          "pricingPlanId": {
            "description": "valid pricingPlanId with chargeQuantities or null",
            "nullable": true,
            "type": "string"
          },
          "promotionIds": {
            "deprecated": true,
            "description": "valid promotionIds or null",
            "items": {
              "description": "valid promotionIds or null",
              "nullable": true,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "promotions": {
            "description": "valid promotions or null",
            "items": {
              "$ref": "#/components/schemas/Promotion"
            },
            "nullable": true,
            "type": "array"
          },
          "skipTrial": {
            "description": "valid skipTrial or null",
            "nullable": true,
            "type": "boolean"
          },
          "transactionAccountId": {
            "type": "string"
          },
          "version": {
            "description": "valid version or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "invoiceGroupId",
          "offeringId",
          "orderItemId",
          "transactionAccountId"
        ],
        "type": "object"
      },
      "SubscriptionRemoveScheduleRequestDto": {
        "additionalProperties": false,
        "properties": {
          "orderItemId": {
            "description": "valid orderItemId or null",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "SubscriptionResetRequestDto": {
        "additionalProperties": false,
        "properties": {
          "billFromTimestamp": {
            "description": "valid billFromTimestamp or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "billingAnchorTimestamp": {
            "description": "valid billingAnchorTimestamp or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "chargeQuantities": {
            "items": {
              "$ref": "#/components/schemas/ChargeQuantity"
            },
            "type": "array"
          },
          "glpDetails": {
            "$ref": "#/components/schemas/GlpDetails"
          },
          "offeringId": {
            "type": "string"
          },
          "orderItemId": {
            "type": "string"
          },
          "pricingPlanId": {
            "type": "string"
          },
          "promotionIds": {
            "deprecated": true,
            "description": "valid promotionIds or null",
            "items": {
              "description": "valid promotionIds or null",
              "nullable": true,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "promotions": {
            "description": "valid promotions or null",
            "items": {
              "$ref": "#/components/schemas/Promotion"
            },
            "nullable": true,
            "type": "array"
          },
          "version": {
            "description": "valid version or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "chargeQuantities",
          "glpDetails",
          "offeringId",
          "orderItemId",
          "pricingPlanId"
        ],
        "type": "object"
      },
      "SubscriptionResponseDto": {
        "additionalProperties": false,
        "properties": {
          "billingAnchorTimestamp": {
            "description": "valid billingAnchorTimestamp or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "chargeQuantities": {
            "description": "valid chargeQuantities with pricingPlanId or null",
            "items": {
              "$ref": "#/components/schemas/ChargeQuantity"
            },
            "nullable": true,
            "type": "array"
          },
          "currentBillingStartTimestamp": {
            "description": "valid currentBillingStartTimestamp or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "endTimestamp": {
            "description": "valid endTimestamp or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "entitlementId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "invoiceGroupId": {
            "type": "string"
          },
          "isEditable": {
            "description": "valid isEditable or null",
            "nullable": true,
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "description": "valid metadata or null",
              "nullable": true,
              "type": "string"
            },
            "description": "valid metadata or null",
            "nullable": true,
            "type": "object"
          },
          "nextBillingTimestamp": {
            "description": "valid nextBillingTimestamp or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "offeringId": {
            "type": "string"
          },
          "orderItemId": {
            "type": "string"
          },
          "pricingPlanId": {
            "description": "valid pricingPlanId with chargeQuantities or null",
            "nullable": true,
            "type": "string"
          },
          "promotionIds": {
            "description": "valid promotionIds or null",
            "items": {
              "description": "valid promotionIds or null",
              "nullable": true,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "promotionInstances": {
            "description": "valid list of promotions applied to the subscription or null",
            "items": {
              "$ref": "#/components/schemas/PromotionInstance"
            },
            "nullable": true,
            "type": "array"
          },
          "scheduledChanges": {
            "$ref": "#/components/schemas/SubscriptionScheduleResponseDto"
          },
          "startTimestamp": {
            "description": "valid startTimestamp or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "enum": [
              "PROCESSING",
              "ACTIVE",
              "CANCELLED"
            ],
            "type": "string"
          },
          "transactionAccountId": {
            "type": "string"
          },
          "trial": {
            "$ref": "#/components/schemas/Trial"
          },
          "version": {
            "description": "valid version or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "entitlementId",
          "invoiceGroupId",
          "orderItemId",
          "transactionAccountId"
        ],
        "type": "object"
      },
      "SubscriptionSchedule": {
        "additionalProperties": false,
        "properties": {
          "chargeQuantities": {
            "items": {
              "$ref": "#/components/schemas/ChargeQuantity"
            },
            "type": "array"
          },
          "nextChangeTimestamp": {
            "format": "int64",
            "type": "integer"
          },
          "offeringId": {
            "type": "string"
          },
          "pricingPlanId": {
            "type": "string"
          },
          "promotionIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "promotionInstances": {
            "items": {
              "$ref": "#/components/schemas/PromotionInstance"
            },
            "type": "array"
          },
          "subscriptionScheduleAction": {
            "enum": [
              "UPDATE",
              "CANCEL"
            ],
            "type": "string"
          }
        },
        "required": [
          "chargeQuantities",
          "promotionIds"
        ],
        "type": "object"
      },
      "SubscriptionSchedulePatchDto": {
        "additionalProperties": false,
        "properties": {
          "chargeQuantities": {
            "description": "valid chargeQuantities with pricingPlanId or null",
            "items": {
              "$ref": "#/components/schemas/ChargeQuantity"
            },
            "nullable": true,
            "type": "array"
          },
          "offeringId": {
            "description": "valid orderItemId or null",
            "nullable": true,
            "type": "string"
          },
          "orderItemId": {
            "type": "string"
          },
          "pricingPlanId": {
            "description": "valid pricingPlanId with chargeQuantities or null",
            "nullable": true,
            "type": "string"
          },
          "promotionIds": {
            "description": "valid promotionIds or null",
            "items": {
              "description": "valid promotionIds or null",
              "nullable": true,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "promotions": {
            "description": "valid promotions or null",
            "items": {
              "$ref": "#/components/schemas/Promotion"
            },
            "nullable": true,
            "type": "array"
          },
          "skipTrial": {
            "description": "valid skipTrial or null",
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "orderItemId"
        ],
        "type": "object"
      },
      "SubscriptionScheduleResponseDto": {
        "additionalProperties": false,
        "description": "valid schedule or null",
        "nullable": true,
        "properties": {
          "chargeQuantities": {
            "description": "valid chargeQuantities or null",
            "items": {
              "$ref": "#/components/schemas/ChargeQuantity"
            },
            "nullable": true,
            "type": "array"
          },
          "nextChangeTimestamp": {
            "description": "valid nextChangeTimestamp or null",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "offeringId": {
            "description": "valid offeringId or null",
            "nullable": true,
            "type": "string"
          },
          "orderItemId": {
            "type": "string"
          },
          "pricingPlanId": {
            "description": "valid pricingPlanId or null",
            "nullable": true,
            "type": "string"
          },
          "promotionIds": {
            "description": "valid promotionIds or null",
            "items": {
              "description": "valid promotionIds or null",
              "nullable": true,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "promotionInstances": {
            "description": "valid promotionInstances or null",
            "items": {
              "$ref": "#/components/schemas/PromotionInstance"
            },
            "nullable": true,
            "type": "array"
          },
          "subscriptionScheduleAction": {
            "enum": [
              "UPDATE",
              "CANCEL"
            ],
            "type": "string"
          }
        },
        "required": [
          "orderItemId"
        ],
        "type": "object"
      },
      "SyncCreditNoteDto": {
        "additionalProperties": false,
        "properties": {
          "additionalNotes": {
            "type": "string"
          },
          "arn": {
            "type": "string"
          },
          "chargeId": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "creditNoteItems": {
            "items": {
              "$ref": "#/components/schemas/CreditNoteItem"
            },
            "type": "array"
          },
          "currency": {
            "enum": [
              "USD"
            ],
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "invoice": {
            "type": "string"
          },
          "memo": {
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "number": {
            "type": "string"
          },
          "purchaseOrderNumber": {
            "type": "string"
          },
          "reason": {
            "enum": [
              "refund_wrong_order_repurchase",
              "refund_cancelled_purchase",
              "refund_tax",
              "refund_atlassian_error",
              "refund_order_form_pending_signature",
              "refund_fraud",
              "refund_customer_service_concession",
              "refund_product_eol_or_ma",
              "refund_partial_adjustment",
              "refund_write_off",
              "covid_19",
              "refund_cb0_30",
              "refund_cb31_90",
              "refund_for_rewind",
              "duplicate",
              "fraudulent",
              "order_change",
              "product_unsatisfactory",
              "tax_only_refund"
            ],
            "type": "string"
          },
          "rechargeInvoiceId": {
            "type": "string"
          },
          "refundId": {
            "type": "string"
          },
          "status": {
            "enum": [
              "PENDING",
              "OPEN",
              "PAID",
              "FAILED"
            ],
            "type": "string"
          },
          "stripeCreditNoteId": {
            "type": "string"
          },
          "transactionAccountId": {
            "type": "string"
          },
          "type": {
            "enum": [
              "full-item-refund",
              "tax-only-refund"
            ],
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "version"
        ],
        "type": "object"
      },
      "SyncInvoiceDto": {
        "additionalProperties": false,
        "properties": {
          "additionalNotes": {
            "type": "string"
          },
          "billToParty": {
            "$ref": "#/components/schemas/InvoiceToParty"
          },
          "chargeId": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "enum": [
              "USD"
            ],
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "dueDate": {
            "format": "date-time",
            "type": "string"
          },
          "dunningHistory": {
            "items": {
              "$ref": "#/components/schemas/DunningStatus"
            },
            "type": "array"
          },
          "finalizedDate": {
            "format": "date-time",
            "type": "string"
          },
          "headerTaxId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "invoiceGroup": {
            "type": "string"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/InvoiceItem"
            },
            "type": "array"
          },
          "memo": {
            "type": "string"
          },
          "number": {
            "type": "string"
          },
          "paidDate": {
            "format": "date-time",
            "type": "string"
          },
          "paymentMethod": {
            "type": "string"
          },
          "purchaseOrderNumber": {
            "type": "string"
          },
          "reInvoiced": {
            "type": "boolean"
          },
          "shipToParty": {
            "$ref": "#/components/schemas/InvoiceToParty"
          },
          "status": {
            "enum": [
              "DRAFT",
              "OPEN",
              "PAID",
              "DEFERRED_PAID",
              "PAYMENT_DEFERRED",
              "UNCOLLECTIBLE",
              "VOID"
            ],
            "type": "string"
          },
          "stripeInvoiceId": {
            "type": "string"
          },
          "subtotal": {
            "type": "number"
          },
          "tax": {
            "type": "number"
          },
          "taxIdLabel": {
            "type": "string"
          },
          "taxPercent": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "transactionAccountId": {
            "type": "string"
          },
          "uncollectibleDate": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "version"
        ],
        "type": "object"
      },
      "SyncInvoiceGroupDto": {
        "additionalProperties": false,
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "enum": [
              "USD"
            ],
            "type": "string"
          },
          "defaultPaymentMethod": {
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "memo": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "purchaseOrder": {
            "$ref": "#/components/schemas/PurchaseOrder"
          },
          "recipients": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "shipToParty": {
            "type": "string"
          },
          "stripeSubscription": {
            "type": "string"
          },
          "transactionAccountId": {
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "version"
        ],
        "type": "object"
      },
      "SyncPaymentMethodDto": {
        "additionalProperties": false,
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "enum": [
              "USD"
            ],
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "sourceType": {
            "enum": [
              "STRIPE_CARD",
              "DEFERRED"
            ],
            "type": "string"
          },
          "stripeCard": {
            "$ref": "#/components/schemas/SyncStripeCard"
          },
          "terms": {
            "$ref": "#/components/schemas/Terms"
          },
          "transactionAccountId": {
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "version"
        ],
        "type": "object"
      },
      "SyncPostalAddressDto": {
        "additionalProperties": false,
        "properties": {
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "line1": {
            "type": "string"
          },
          "line2": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "postcode": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SyncShipToPartyDto": {
        "additionalProperties": false,
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "postalAddress": {
            "$ref": "#/components/schemas/SyncPostalAddressDto"
          },
          "priceEligibility": {
            "additionalProperties": {
              "type": "boolean"
            },
            "type": "object"
          },
          "taxId": {
            "type": "string"
          },
          "transactionAccountId": {
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "version"
        ],
        "type": "object"
      },
      "SyncStripeCard": {
        "additionalProperties": false,
        "properties": {
          "brand": {
            "type": "string"
          },
          "cardHolderName": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "expMonth": {
            "format": "int64",
            "type": "integer"
          },
          "expYear": {
            "format": "int64",
            "type": "integer"
          },
          "funding": {
            "type": "string"
          },
          "last4": {
            "type": "string"
          },
          "stripePaymentMethodId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SyncTransactionAccountDto": {
        "additionalProperties": false,
        "properties": {
          "billToParty": {
            "$ref": "#/components/schemas/BillToParty"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "currencyEntries": {
            "items": {
              "$ref": "#/components/schemas/CurrencyEntry"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "invoiceGroups": {
            "items": {
              "$ref": "#/components/schemas/SyncInvoiceGroupDto"
            },
            "type": "array"
          },
          "number": {
            "type": "string"
          },
          "partnerStatus": {
            "$ref": "#/components/schemas/PartnerStatus"
          },
          "paymentMethods": {
            "items": {
              "$ref": "#/components/schemas/SyncPaymentMethodDto"
            },
            "type": "array"
          },
          "shipToParties": {
            "items": {
              "$ref": "#/components/schemas/SyncShipToPartyDto"
            },
            "type": "array"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "version"
        ],
        "type": "object"
      },
      "SyntheticPlanTemplateInput": {
        "additionalProperties": false,
        "properties": {
          "discountPercentage": {
            "description": "The percentage of the discount",
            "format": "double",
            "type": "number"
          },
          "type": {
            "enum": [
              "COMMUNITY",
              "OPEN_SOURCE",
              "CLASSROOM",
              "ACADEMIC"
            ],
            "type": "string"
          }
        },
        "required": [
          "discountPercentage",
          "type"
        ],
        "type": "object"
      },
      "SyntheticPlanTemplateResponse": {
        "additionalProperties": false,
        "properties": {
          "discountPercentage": {
            "format": "double",
            "type": "number"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "REPLACED"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "COMMUNITY",
              "OPEN_SOURCE",
              "CLASSROOM",
              "ACADEMIC"
            ],
            "type": "string"
          }
        },
        "required": [
          "discountPercentage",
          "status",
          "type"
        ],
        "type": "object"
      },
      "SyntheticPlanTemplateUpdatableFieldsInput": {
        "additionalProperties": false,
        "properties": {
          "discountPercentage": {
            "description": "The percentage of the discount",
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "discountPercentage"
        ],
        "type": "object"
      },
      "SystemOrderAmendmentItemDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderItemRequestDto"
          },
          {
            "properties": {
              "entitlement": {
                "$ref": "#/components/schemas/OrderEntitlementRefDto"
              },
              "offeringId": {
                "type": "string"
              },
              "promotions": {
                "items": {
                  "$ref": "#/components/schemas/PromotionDto"
                },
                "maxItems": 1,
                "minItems": 0,
                "type": "array"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "entitlement",
          "itemId",
          "type"
        ],
        "type": "object"
      },
      "SystemOrderCancellationItemDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderItemRequestDto"
          },
          {
            "properties": {
              "entitlement": {
                "$ref": "#/components/schemas/OrderEntitlementRefDto"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "entitlement",
          "itemId",
          "type"
        ],
        "type": "object"
      },
      "Terms": {
        "additionalProperties": false,
        "properties": {
          "invoiceDueDays": {
            "default": 30,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TestFeatures": {
        "additionalProperties": false,
        "description": "testing features",
        "nullable": true,
        "properties": {
          "billingClockId": {
            "description": "valid billing clock id",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TestParametersDto": {
        "properties": {
          "billingClockId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransactionAccountDto": {
        "additionalProperties": false,
        "properties": {
          "createdAt": {
            "description": "Timestamp in Epoch milliseconds",
            "format": "int64",
            "type": "integer"
          },
          "customerBalances": {
            "additionalProperties": {
              "description": "Map of Currency to Customer Balance being stored on the Transaction Account, if any. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice.",
              "type": "number"
            },
            "description": "Map of Currency to Customer Balance being stored on the Transaction Account, if any. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice.",
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "number": {
            "type": "string"
          },
          "partnerStatus": {
            "$ref": "#/components/schemas/PartnerStatus"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "createdAt",
          "id",
          "number",
          "partnerStatus",
          "version"
        ],
        "type": "object"
      },
      "TransactionAccountInput": {
        "additionalProperties": false,
        "properties": {
          "billingAdmin": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransactionAccountStatus": {
        "additionalProperties": false,
        "properties": {
          "active": {
            "type": "boolean"
          },
          "invoiceable": {
            "$ref": "#/components/schemas/Validity"
          },
          "number": {
            "type": "string"
          }
        },
        "required": [
          "active",
          "invoiceable",
          "number"
        ],
        "type": "object"
      },
      "TransactionAccountsListDto": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/TransactionAccountDto"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TransitionInput": {
        "additionalProperties": false,
        "properties": {
          "from": {
            "$ref": "#/components/schemas/TransitionResourceInput"
          },
          "to": {
            "$ref": "#/components/schemas/TransitionResourceInput"
          }
        },
        "required": [
          "from",
          "to"
        ],
        "type": "object"
      },
      "TransitionResourceInput": {
        "additionalProperties": false,
        "description": "The transaction will be calculated using either pricing-plan + chargeElements or offering. offeringIdentifier will be ignored if pricingPlanKey is provided.",
        "properties": {
          "chargeElements": {
            "additionalProperties": {
              "description": "The charge element name and it's current value, e.g. units=4. This field is required if pricingPlanKey is provided.",
              "format": "int32",
              "nullable": true,
              "type": "integer"
            },
            "description": "The charge element name and it's current value, e.g. units=4. This field is required if pricingPlanKey is provided.",
            "nullable": true,
            "type": "object"
          },
          "offeringIdentifier": {
            "description": "Offering key or offering slug.",
            "nullable": true,
            "type": "string"
          },
          "pricingPlanKey": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransitionResponse": {
        "additionalProperties": false,
        "properties": {
          "policy": {
            "enum": [
              "ALLOWED",
              "NOT_ALLOWED"
            ],
            "type": "string"
          },
          "reason": {
            "type": "string"
          }
        },
        "required": [
          "policy"
        ],
        "type": "object"
      },
      "Trial": {
        "additionalProperties": false,
        "description": "trial information for the subscription",
        "nullable": true,
        "properties": {
          "endTimestamp": {
            "format": "int64",
            "type": "integer"
          },
          "startTimestamp": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TrialInput": {
        "additionalProperties": false,
        "properties": {
          "lengthDays": {
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [
          "lengthDays"
        ],
        "type": "object"
      },
      "TrialIntentDto": {
        "properties": {
          "skipTrial": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "TrialResponse": {
        "additionalProperties": false,
        "nullable": true,
        "properties": {
          "lengthDays": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "lengthDays"
        ],
        "type": "object"
      },
      "UncollectibleActionDestinationInput": {
        "additionalProperties": false,
        "description": "Provides details for destination offering in case of DOWNGRADE action type",
        "properties": {
          "offeringKey": {
            "description": "Offering key to which the downgrade should be executed",
            "type": "string"
          },
          "usageLimits": {
            "description": "Set of usage limits",
            "items": {
              "$ref": "#/components/schemas/UsageLimitInput"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "offeringKey"
        ],
        "type": "object"
      },
      "UncollectibleActionDestinationResponse": {
        "additionalProperties": false,
        "properties": {
          "offeringKey": {
            "type": "string"
          },
          "usageLimits": {
            "items": {
              "$ref": "#/components/schemas/UsageLimitResponse"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "offeringKey"
        ],
        "type": "object"
      },
      "UncollectibleActionInput": {
        "additionalProperties": false,
        "description": "Determines the dunning action for paid offerings of the product",
        "properties": {
          "destination": {
            "$ref": "#/components/schemas/UncollectibleActionDestinationInput"
          },
          "type": {
            "description": "Type of UncollectibleAction. Eg CANCEL or DOWNGRADE",
            "enum": [
              "DOWNGRADE",
              "CANCEL"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "UncollectibleActionResponse": {
        "additionalProperties": false,
        "properties": {
          "destination": {
            "$ref": "#/components/schemas/UncollectibleActionDestinationResponse"
          },
          "type": {
            "enum": [
              "DOWNGRADE",
              "CANCEL"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "UpdateInvoiceGroupInput": {
        "additionalProperties": false,
        "properties": {
          "defaultPaymentMethod": {
            "type": "string"
          },
          "memo": {
            "maxLength": 500,
            "minLength": 0,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "purchaseOrder": {
            "$ref": "#/components/schemas/PurchaseOrderInput"
          },
          "shipToParty": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdatePromotionDetailsRequestV2": {
        "additionalProperties": false,
        "description": "UpdatePromotionRequest",
        "properties": {
          "applicationReason": {
            "$ref": "#/components/schemas/ApplicationReasonRequestDto"
          },
          "benefits": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DiscountDto"
                },
                {
                  "$ref": "#/components/schemas/OverRideDto"
                }
              ]
            },
            "type": "array"
          },
          "eligibilityRules": {
            "$ref": "#/components/schemas/EligibilityRuleDto"
          },
          "eligiblePromotionWindow": {
            "$ref": "#/components/schemas/EligiblePromotionWindowRequest"
          },
          "metadata": {
            "additionalProperties": {
              "description": "valid metadata or null",
              "nullable": true,
              "type": "string"
            },
            "description": "valid metadata or null",
            "nullable": true,
            "type": "object"
          },
          "status": {
            "description": "valid promotion status or null",
            "enum": [
              "DRAFTED",
              "ACTIVE",
              "EXPIRED",
              "CANCELLED",
              "WITHDRAWN",
              "INACTIVE"
            ],
            "nullable": true,
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "enum": [
              "TRIAL_EXTENSION",
              "LIST_PRICE",
              "LOYALTY_DISCOUNT",
              "LIST_PRICE_ADJUSTMENT",
              "PROMO_CODE",
              "DISCRETIONARY_DISCOUNT",
              "PARTNER_DISCOUNT"
            ],
            "type": "string"
          },
          "version": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "benefits",
          "eligiblePromotionWindow",
          "title",
          "type"
        ],
        "type": "object"
      },
      "UpdatePromotionEventStatusRequest": {
        "additionalProperties": false,
        "description": "UpdatePromotionEventStatusRequest",
        "properties": {
          "event": {
            "enum": [
              "ACTIVATE",
              "EXPIRE",
              "CANCEL",
              "WITHDRAW"
            ],
            "type": "string"
          },
          "version": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "event",
          "version"
        ],
        "type": "object"
      },
      "UpdatePromotionResponse": {
        "additionalProperties": false,
        "type": "object"
      },
      "UsageLimitInput": {
        "additionalProperties": false,
        "description": "Set of usage limits",
        "properties": {
          "chargeElement": {
            "description": "Charge element for which usageLimit is defined",
            "type": "string"
          },
          "value": {
            "description": "Value of usage limit",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "chargeElement",
          "value"
        ],
        "type": "object"
      },
      "UsageLimitResponse": {
        "additionalProperties": false,
        "properties": {
          "chargeElement": {
            "type": "string"
          },
          "value": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "chargeElement",
          "value"
        ],
        "type": "object"
      },
      "UsageUpdateCadenceInput": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "description": "Name of the usage update cadence",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "UsageUpdateCadenceResponse": {
        "additionalProperties": false,
        "properties": {
          "cadenceIntervalMinutes": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "cadenceIntervalMinutes",
          "name"
        ],
        "type": "object"
      },
      "User": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "UsersListDto": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ValidationErrorDetails": {
        "additionalProperties": false,
        "properties": {
          "validationErrors": {
            "items": {
              "$ref": "#/components/schemas/ValidationErrorMessage"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ValidationErrorMessage": {
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string"
          },
          "fieldName": {
            "type": "string"
          },
          "validationMessage": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Validity": {
        "additionalProperties": false,
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/Outcome"
            },
            "type": "array"
          },
          "valid": {
            "type": "boolean"
          },
          "warnings": {
            "items": {
              "$ref": "#/components/schemas/Outcome"
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "ASAP": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      },
      "Slauth": {
        "in": "header",
        "name": "Authentication",
        "type": "apiKey"
      }
    }
  },
  "externalDocs": {
    "description": "Instructions to generate Authorization Tokens",
    "url": "https://developer.atlassian.com/platform/commerce-cloud-platform/security/authentication/"
  },
  "info": {
    "contact": {
      "name": "CCP Developers",
      "url": "https://atlassian.slack.com/archives/C016U73MTC1"
    },
    "description": "Commerce Cloud Platform (CCP) is a part of Project Tintin (go/tintin). Tintin is the foundational initiative unifying Pricing, Product Catalog, Subscriptions and Billing engines across all our Cloud products, to unleash Atlassian’s ability to scale to a $10B company.",
    "title": "Commerce Cloud Platform",
    "version": "1.0.0"
  },
  "openapi": "3.0.2",
  "paths": {
    "/admin/v1/orders": {
      "post": {
        "parameters": [
          {
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "header",
            "name": "X-CCP-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "header",
            "name": "X-Slauth-Subject",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "header",
            "name": "X-Slauth-Mechanism",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": true,
            "in": "query",
            "name": "errorResponseVersion",
            "required": false,
            "schema": {
              "default": "v1",
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponseDto"
                }
              }
            },
            "description": "default response"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "415": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "423": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Create order with backdated subscription or for immediate cancellation",
        "tags": [
          "order-controller"
        ]
      }
    },
    "/api/v1/bill-to-party": {
      "get": {
        "description": "Retrieves the bill-to-party of a transaction account",
        "operationId": "get_1",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillToParty"
                }
              }
            },
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "bill-to-party-resource"
        ]
      },
      "put": {
        "description": "Update bill-to-party of the transaction account",
        "operationId": "update",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillToParty"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillToParty"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "bill-to-party-resource"
        ]
      }
    },
    "/api/v1/bill-to-party/price-eligibility": {
      "get": {
        "description": "Retrieves the price eligibility of the transaction accounts' bill to party",
        "operationId": "getPriceEligibility_1",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "boolean"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Ok"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "bill-to-party-resource"
        ]
      },
      "put": {
        "description": "Update the price eligibility of the transaction accounts' bill to party",
        "operationId": "updatePriceEligibility_1",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "type": "boolean"
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "boolean"
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "bill-to-party-resource"
        ]
      }
    },
    "/api/v1/billing-admins": {
      "get": {
        "description": "Get the billing admins of given transaction account",
        "operationId": "getBillingAdmins",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersListDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "billing-admin-resource"
        ]
      }
    },
    "/api/v1/coupons/{code}": {
      "get": {
        "operationId": "getCouponByCode",
        "parameters": [
          {
            "description": "Code",
            "explode": false,
            "in": "path",
            "name": "code",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "X-Transaction-Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Conflict"
          },
          "415": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Unsupported Media Type"
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Coupon Controller"
        ]
      }
    },
    "/api/v1/coupons/{code}/{event}": {
      "put": {
        "operationId": "updateCouponStatus",
        "parameters": [
          {
            "description": "Code",
            "explode": false,
            "in": "path",
            "name": "code",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Event",
            "explode": false,
            "in": "path",
            "name": "event",
            "required": true,
            "schema": {
              "enum": [
                "ACTIVATE",
                "DEACTIVATE"
              ],
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "UserID",
            "explode": false,
            "in": "header",
            "name": "X-USER-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "X-Transaction-Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            },
            "description": "No Content"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Conflict"
          },
          "415": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Unsupported Media Type"
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Coupon Controller"
        ]
      }
    },
    "/api/v1/credit-notes": {
      "post": {
        "description": "A credit note has several states that it transitions through. When you POST to this endpoint a credit note is saved to our db in a PENDING state. At this stage there is no guarantee that the credit note will be processed because stripe may still reject it. Once we send the credit note to Stripe and we receive a success response the credit note transitions to an OPEN state. In this state the refund hasn't been credited to a card but is finalised, it is only a matter of time until the refund is attempted.  \n\nThere are several validation checks that are performed to ensure the credit note can be processed:  \nFor any type of credit note:  \n* There cant be previous tax-only-refund credit note for the same invoiceId.  \n\nFor tax-only-refund credit notes:  \n* No entitlements can be included in the input because the credit note applies to all non-refunded entitlements in the invoice.  \n* There can not be any PENDING credit notes that are yet to be sent to stripe.  \n\nFor full-item-refund credit notes:  \n* The entitlementIds in the input must exist in the specified invoice.  \n* There must be no previous credit notes for the invoice that have any of the entitlementIds in the input.",
        "operationId": "createCreditNote",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditNoteInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditNoteDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Received duplicate credit note while first request is still processing"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "credit-note-resource"
        ]
      }
    },
    "/api/v1/credit-notes/{id}": {
      "get": {
        "description": "Retrieve a credit note by id",
        "operationId": "getCreditNote_1",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditNoteDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "credit-note-resource"
        ]
      }
    },
    "/api/v1/entitlement-templates": {
      "get": {
        "description": "List all entitlement templates",
        "parameters": [
          {
            "description": "Pagination size",
            "explode": true,
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 50,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Pagination offset cursor",
            "explode": true,
            "in": "query",
            "name": "startId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-Transaction-Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseEntitlementTemplateResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Entitlement Template"
        ]
      }
    },
    "/api/v1/entitlement-templates/{key}": {
      "get": {
        "parameters": [
          {
            "explode": false,
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": true,
            "in": "query",
            "name": "version",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-Transaction-Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementTemplateResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Entitlement Template"
        ]
      }
    },
    "/api/v1/entitlement-templates/{key}/history": {
      "get": {
        "parameters": [
          {
            "explode": false,
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Pagination size",
            "explode": true,
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 50,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Pagination offset cursor using entitlement template version",
            "explode": true,
            "in": "query",
            "name": "startId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-Transaction-Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseEntitlementTemplateResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Entitlement Template"
        ]
      }
    },
    "/api/v1/entitlements/{entitlementId}": {
      "get": {
        "parameters": [
          {
            "description": "Entitlement ID",
            "explode": false,
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "header",
            "name": "X-Transaction-Account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementErrorResponse"
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementErrorResponse"
                }
              }
            },
            "description": "Conflict"
          },
          "415": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementErrorResponse"
                }
              }
            },
            "description": "Unsupported Media Type"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get an entitlement by ID",
        "tags": [
          "Entitlements APIs"
        ]
      }
    },
    "/api/v1/entitlements/{entitlementId}/children": {
      "get": {
        "parameters": [
          {
            "description": "Entitlement ID",
            "explode": false,
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "header",
            "name": "X-Transaction-Account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Child entitlement status",
            "explode": true,
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Pagination offset cursor",
            "explode": true,
            "in": "query",
            "name": "startId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Page size",
            "explode": true,
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseGenericEntitlementResponseString"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementErrorResponse"
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementErrorResponse"
                }
              }
            },
            "description": "Conflict"
          },
          "415": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementErrorResponse"
                }
              }
            },
            "description": "Unsupported Media Type"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get children of an entitlement by its ID. This API is eventually consistent, please re-try if you do not see all the children attached to an entitlement.",
        "tags": [
          "Entitlements APIs"
        ]
      }
    },
    "/api/v1/entitlements/{entitlementId}/details": {
      "get": {
        "operationId": "getEntitlementDetails",
        "parameters": [
          {
            "explode": false,
            "in": "header",
            "name": "X-Transaction-Account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Entitlement ID",
            "explode": false,
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "header",
            "name": "Staff-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementDetails"
                }
              }
            },
            "description": "Fetching Entitlement Details"
          },
          "400": {
            "content": {
            },
            "description": "Invalid id supplied"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGatewayErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
            },
            "description": "Entitlement not found"
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGatewayErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          },
          "503": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGatewayErrorResponse"
                }
              }
            },
            "description": "Service Unavailable"
          }
        },
        "summary": "Get details of an entitlement",
        "tags": [
          "Entitlement Details API"
        ]
      }
    },
    "/api/v1/invoice-groups": {
      "get": {
        "description": "Get the n invoice groups of the transaction account",
        "operationId": "getInvoiceGroups_1",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": true,
            "in": "query",
            "name": "pageRequest",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PageRequest"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedListInvoiceGroupDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "invoice-group-resource"
        ]
      },
      "post": {
        "description": "Create a new invoice group in the transaction account",
        "operationId": "createInvoiceGroup",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInvoiceGroupInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceGroupDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "invoice-group-resource"
        ]
      }
    },
    "/api/v1/invoice-groups/{id}": {
      "get": {
        "description": "Retrieve invoice group by id",
        "operationId": "getInvoiceGroup",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceGroupDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "invoice-group-resource"
        ]
      },
      "put": {
        "description": "Update the given invoice group. Not allowed to change default payment method for ON TERMS invoice group",
        "operationId": "updateInvoiceGroup",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInvoiceGroupInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceGroupDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "invoice-group-resource"
        ]
      }
    },
    "/api/v1/invoice-groups/{id}/effective-payment-method": {
      "get": {
        "description": "Get the effective payment method of the invoice group. First look for default Payment method of invoice group, if not found then look for the default payment method of the transaction account",
        "operationId": "getEffectivePaymentMethod",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "invoice-group-resource"
        ]
      }
    },
    "/api/v1/invoice-groups/{id}/effective-price-eligibility": {
      "get": {
        "description": "Get the effective price eligibility by getting BillToParty/PriceEligibility as well as ShipToPartyPriceEligibility APIs and do a boolean OR on presented flags",
        "operationId": "getEffectivePriceEligibility",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "boolean"
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "invoice-group-resource"
        ]
      }
    },
    "/api/v1/invoice-groups/{id}/pending-invoice-requests": {
      "get": {
        "description": "List the pending invoice requests which have been committed in stripe.",
        "operationId": "getPendingInvoiceRequests",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": true,
            "in": "query",
            "name": "pageRequest",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PageRequest"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceRequestListDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "invoice-group-resource"
        ]
      }
    },
    "/api/v1/invoice-groups/{id}/recipients": {
      "get": {
        "description": "Retrieve the recipients of the given invoice group",
        "operationId": "getRecipients",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipientsDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "invoice-group-resource"
        ]
      },
      "put": {
        "description": "Adding recipients to the invoice group",
        "operationId": "setAllRecipients",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecipientsInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipientsDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "invoice-group-resource"
        ]
      }
    },
    "/api/v1/invoice-requests": {
      "post": {
        "description": "Accepted amount's precision in this APIs is per currency and matching the Stripe's precision.<br/>&emsp;USD amount accepted in cents<br/>&emsp;AUD amount accepted in cents<br/>&emsp;JPY amount accepted in yen<br/>",
        "operationId": "createInvoiceRequest",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "header",
            "name": "Idempotency-key",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceRequestInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceRequest"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Received duplicate invoice request (same idempotency header) while first request is still processing"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "invoice-request-resource"
        ]
      }
    },
    "/api/v1/invoices": {
      "get": {
        "description": "If the query param statusFilter is not present, all invoice are listed.\nIf statusFilter=PAID (case-sensitive), only paid invoice (instant or deferred) are included.\nIf statusFilter=UNPAID (case-sensitive), only unpaid invoices (that are finalised) are included.",
        "operationId": "getInvoices_1",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": true,
            "in": "query",
            "name": "invoiceGroup",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "explode": true,
            "in": "query",
            "name": "statusFilter",
            "required": false,
            "schema": {
              "description": "PAID Includes invoices with status PAID or DEFERRED_PAID, UNPAID Includes invoices with status OPEN or UNCOLLECTIBLE.",
              "enum": [
                "PAID",
                "UNPAID"
              ],
              "type": "string"
            },
            "style": "form"
          },
          {
            "explode": true,
            "in": "query",
            "name": "paging",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PageRequest"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedListInvoiceDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "invoice-resource"
        ]
      },
      "post": {
        "description": "In order to create on demand invoice",
        "operationId": "createAdhocInvoice",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdhocInvoiceCreationInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdhocInvoice"
                }
              }
            },
            "description": "Accepted"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "invoice-resource"
        ]
      }
    },
    "/api/v1/invoices/{id}": {
      "get": {
        "description": "Retrieve the invoice by id",
        "operationId": "getInvoice_1",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "invoice-resource"
        ]
      },
      "patch": {
        "description": "To update invoice memo",
        "operationId": "updateInvoice",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemoInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "invoice-resource"
        ]
      }
    },
    "/api/v1/invoices/{id}/confirm-payment": {
      "post": {
        "description": "Retrieve the data required to confirm a card payment with Stripe.",
        "operationId": "confirmPayment",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetupConfirmPayment"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Invoice is no longer in a state that allows confirming payment, e.g. it's PAID"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "invoice-resource"
        ]
      }
    },
    "/api/v1/invoices/{id}/pay": {
      "post": {
        "description": "Invoice must be in open state for attempting to pay, and this will NOT count as one of the automated retries)",
        "operationId": "attemptToPay",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "when attempt fails"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "invoice-resource"
        ]
      }
    },
    "/api/v1/invoices/{id}/resend-email": {
      "post": {
        "description": "To resend the invoice email for an existing invoice to the billing admins",
        "operationId": "sendEmail",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "invoice-resource"
        ]
      }
    },
    "/api/v1/invoices/{id}/uncollectible": {
      "post": {
        "description": "Set an invoice's state from either OPEN or PAYMENT_DEFERRED to UNCOLLECTIBLE",
        "operationId": "markUncollectible",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Invoice is not in OPEN or PAYMENT_DEFERRED state, therefore cannot be marked UNCOLLECTIBLE"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "invoice-resource"
        ]
      }
    },
    "/api/v1/invoices/{invoiceId}/download": {
      "get": {
        "operationId": "getInvoice",
        "parameters": [
          {
            "description": "Invoice ID",
            "explode": false,
            "in": "path",
            "name": "invoiceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "header",
            "name": "Staff-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "Downloaded invoice"
          },
          "400": {
            "content": {
            },
            "description": "Invalid id supplied"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGatewayErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
            },
            "description": "invoice not found"
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGatewayErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          },
          "503": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGatewayErrorResponse"
                }
              }
            },
            "description": "Service Unavailable"
          }
        },
        "summary": "Download an invoice",
        "tags": [
          "Invoice Download API"
        ]
      }
    },
    "/api/v1/offerings": {
      "get": {
        "parameters": [
          {
            "description": "Pagination size",
            "explode": true,
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 50,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Pagination offset cursor",
            "explode": true,
            "in": "query",
            "name": "startId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseOfferingResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Offering"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "header",
            "name": "X-Transaction-Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferingInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingDetailsResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Offering"
        ]
      }
    },
    "/api/v1/offerings/fetch-batch": {
      "post": {
        "description": "Fetch multiple offerings with the limit of 10 at a time",
        "parameters": [
          {
            "in": "header",
            "name": "X-Transaction-Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OfferingDetailsResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Offering"
        ]
      }
    },
    "/api/v1/offerings/{keyOrSLug}/latest-entitlement-template": {
      "get": {
        "parameters": [
          {
            "explode": false,
            "in": "path",
            "name": "keyOrSLug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementTemplateResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Offering"
        ]
      }
    },
    "/api/v1/offerings/{keyOrSlug}": {
      "get": {
        "parameters": [
          {
            "explode": false,
            "in": "path",
            "name": "keyOrSlug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingDetailsResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Offering"
        ]
      }
    },
    "/api/v1/offerings/{keyOrSlug}/activation": {
      "post": {
        "description": "Actives an offering in DRAFT state",
        "parameters": [
          {
            "explode": false,
            "in": "path",
            "name": "keyOrSlug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "X-Transaction-Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingDetailsResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Offering"
        ]
      }
    },
    "/api/v1/offerings/{keyOrSlug}/children": {
      "get": {
        "description": "List paginated children offerings (add-ons) available for the provided offering",
        "parameters": [
          {
            "explode": false,
            "in": "path",
            "name": "keyOrSlug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Pagination size",
            "explode": true,
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Pagination offset cursor",
            "explode": true,
            "in": "query",
            "name": "startId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseOfferingResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Offering"
        ]
      }
    },
    "/api/v1/offerings/{keyOrSlug}/default-pricing-plans": {
      "post": {
        "description": "Adds pricing plans to offering as default.",
        "parameters": [
          {
            "explode": false,
            "in": "path",
            "name": "keyOrSlug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "X-Transaction-Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferingDefaultPricingPlansInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingDetailsResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Offering"
        ]
      }
    },
    "/api/v1/offerings/{keyOrSlug}/depends-on-offerings": {
      "post": {
        "description": "Add new depends-on offerings",
        "parameters": [
          {
            "explode": false,
            "in": "path",
            "name": "keyOrSlug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "X-Transaction-Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DependsOnOfferingInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingDetailsResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Offering"
        ]
      }
    },
    "/api/v1/offerings/{keyOrSlug}/entitlement-templates": {
      "post": {
        "parameters": [
          {
            "explode": false,
            "in": "path",
            "name": "keyOrSlug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "X-Transaction-Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntitlementTemplateInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementTemplateResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Offering"
        ]
      }
    },
    "/api/v1/offerings/{keyOrSlug}/pricing-plan-transitions": {
      "get": {
        "description": "List pricing plans that a specified offering (not PAID) is allowed to transition to. Only transitions inside the same product are evaluated.",
        "parameters": [
          {
            "explode": false,
            "in": "path",
            "name": "keyOrSlug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "currency ISO-4217 code",
            "explode": true,
            "in": "query",
            "name": "currency",
            "required": false,
            "schema": {
              "enum": [
                "USD",
                "JPY"
              ],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "cycle name (MONTHLY, ANNUAL)",
            "explode": true,
            "in": "query",
            "name": "cycle",
            "required": false,
            "schema": {
              "enum": [
                "MONTHLY",
                "ANNUAL"
              ],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "type COMMERCIAL or as defined per synthetic templates",
            "explode": true,
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponsePricingPlanResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Offering"
        ]
      }
    },
    "/api/v1/offerings/{keyOrSlug}/pricing-plans": {
      "get": {
        "description": "List all pricing plans under the provided offering key",
        "parameters": [
          {
            "explode": false,
            "in": "path",
            "name": "keyOrSlug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "currency ISO-4217 code",
            "explode": true,
            "in": "query",
            "name": "currency",
            "required": false,
            "schema": {
              "enum": [
                "USD",
                "JPY"
              ],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "cycle name (MONTHLY, ANNUAL)",
            "explode": true,
            "in": "query",
            "name": "cycle",
            "required": false,
            "schema": {
              "enum": [
                "MONTHLY",
                "ANNUAL"
              ],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "type COMMERCIAL or as defined per synthetic templates",
            "explode": true,
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Pagination size",
            "explode": true,
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 50,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Pagination offset cursor",
            "explode": true,
            "in": "query",
            "name": "startId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponsePricingPlanResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Offering"
        ]
      }
    },
    "/api/v1/offerings/{keyOrSlug}/slugs": {
      "post": {
        "description": "Adds slugs to offering.",
        "parameters": [
          {
            "explode": false,
            "in": "path",
            "name": "keyOrSlug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "X-Transaction-Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferingSlugsInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingDetailsResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Offering"
        ]
      }
    },
    "/api/v1/offerings/{keyOrSlug}/synthetics": {
      "get": {
        "parameters": [
          {
            "explode": false,
            "in": "path",
            "name": "keyOrSlug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SyntheticPlanTemplateResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Offering"
        ]
      },
      "post": {
        "parameters": [
          {
            "explode": false,
            "in": "path",
            "name": "keyOrSlug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "X-Transaction-Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyntheticPlanTemplateInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyntheticPlanTemplateResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Offering"
        ]
      }
    },
    "/api/v1/offerings/{keyOrSlug}/synthetics/{type}/generate": {
      "post": {
        "parameters": [
          {
            "explode": false,
            "in": "path",
            "name": "keyOrSlug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "enum": [
                "COMMUNITY",
                "OPEN_SOURCE",
                "CLASSROOM",
                "ACADEMIC"
              ],
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "X-Transaction-Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/GenerateSyntheticPlansInput"
                },
                "type": "array",
                "uniqueItems": true
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PricingPlanResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Offering"
        ]
      }
    },
    "/api/v1/offerings/{keyOrSlug}/transitions": {
      "get": {
        "description": "List offerings that the specified offering is allowed to transition to. Only transitions inside the same product are evaluated.",
        "parameters": [
          {
            "explode": false,
            "in": "path",
            "name": "keyOrSlug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseOfferingResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Offering"
        ]
      }
    },
    "/api/v1/offerings/{keyOrSlug}/trial": {
      "post": {
        "parameters": [
          {
            "explode": false,
            "in": "path",
            "name": "keyOrSlug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "X-Transaction-Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrialInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrialResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Offering"
        ]
      }
    },
    "/api/v1/orderIntent/estimate": {
      "post": {
        "parameters": [
          {
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderBillEstimateRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderBillEstimateResponseDto"
                }
              }
            },
            "description": "default response"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "415": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "423": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Get Bill Estimate for Order",
        "tags": [
          "order-controller"
        ]
      }
    },
    "/api/v1/orderItem/{orderItemId}/rewindToDetails": {
      "get": {
        "parameters": [
          {
            "explode": false,
            "in": "path",
            "name": "orderItemId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewindToDetailsResponseDto"
                }
              }
            },
            "description": "default response"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "415": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "423": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Get RewindToDetails From OrderItemId",
        "tags": [
          "order-controller"
        ]
      }
    },
    "/api/v1/orderItems": {
      "get": {
        "parameters": [
          {
            "description": "EntitlementId",
            "explode": true,
            "in": "query",
            "name": "entitlementId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Pagination size",
            "explode": true,
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Pagination offset cursor",
            "explode": true,
            "in": "query",
            "name": "startId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "OrderItemId",
            "explode": true,
            "in": "query",
            "name": "orderItemId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedOrderItemResponseDto"
                }
              }
            },
            "description": "default response"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "415": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "423": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Get order by entitlement id",
        "tags": [
          "order-controller"
        ]
      }
    },
    "/api/v1/orders": {
      "post": {
        "parameters": [
          {
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "header",
            "name": "X-CCP-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "header",
            "name": "X-Slauth-Subject",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "header",
            "name": "X-Slauth-Mechanism",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": true,
            "in": "query",
            "name": "errorResponseVersion",
            "required": false,
            "schema": {
              "default": "v1",
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponseDto"
                }
              }
            },
            "description": "default response"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "415": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "423": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Create order",
        "tags": [
          "order-controller"
        ]
      }
    },
    "/api/v1/orders/{id}": {
      "get": {
        "parameters": [
          {
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderGetResponseDto"
                }
              }
            },
            "description": "default response"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "415": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "423": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Get order by id",
        "tags": [
          "order-controller"
        ]
      }
    },
    "/api/v1/orders/{orderId}/orderItem/{orderItemId}": {
      "get": {
        "parameters": [
          {
            "explode": false,
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "path",
            "name": "orderItemId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderGetResponseDto"
                }
              }
            },
            "description": "default response"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "415": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "423": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderServiceValidationErrorResponse"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Get order by order item id",
        "tags": [
          "order-controller"
        ]
      }
    },
    "/api/v1/partner-status": {
      "get": {
        "description": "Retrieve the partner info",
        "operationId": "getPartnerStatus",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerStatus"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "partner-status-resource"
        ]
      }
    },
    "/api/v1/payment-methods": {
      "get": {
        "description": "Retrieve n payment methods of the transaction account",
        "operationId": "getPaymentMethods_1",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": true,
            "in": "query",
            "name": "pageRequest",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PageRequest"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedListPaymentMethodDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "payment-method-resource"
        ]
      },
      "post": {
        "description": "To create deferred payment method",
        "operationId": "createPaymentMethod",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "payment-method-resource"
        ]
      }
    },
    "/api/v1/payment-methods/{id}": {
      "delete": {
        "description": "Delete payment method by id. If set as a default payment method in an invoice group, it will be unset",
        "operationId": "deletePaymentMethod",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "payment-method-resource"
        ]
      },
      "get": {
        "description": "Retrieve the payment method by id",
        "operationId": "getPaymentMethod",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "payment-method-resource"
        ]
      }
    },
    "/api/v1/payment-methods/{id}/set-default": {
      "put": {
        "description": "Set default payment method for a transaction account",
        "operationId": "setDefault",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "payment-method-resource"
        ]
      }
    },
    "/api/v1/pricing-plans": {
      "get": {
        "description": "List all pricing plans",
        "parameters": [
          {
            "description": "Pagination size",
            "explode": true,
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 50,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Pagination offset cursor",
            "explode": true,
            "in": "query",
            "name": "startId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponsePricingPlanResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Pricing Plan"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "header",
            "name": "X-Transaction-Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PricingPlanInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingPlanResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Pricing Plan"
        ]
      }
    },
    "/api/v1/pricing-plans/{key}": {
      "get": {
        "parameters": [
          {
            "explode": false,
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingPlanResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Pricing Plan"
        ]
      }
    },
    "/api/v1/pricing-plans/{key}/transitions": {
      "get": {
        "description": "List pricing plans that a specified plan is allowed to transition to. Only transitions inside the same product are evaluated.",
        "parameters": [
          {
            "explode": false,
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "currency ISO-4217 code",
            "explode": true,
            "in": "query",
            "name": "currency",
            "required": false,
            "schema": {
              "enum": [
                "USD",
                "JPY"
              ],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "cycle name (MONTHLY, ANNUAL)",
            "explode": true,
            "in": "query",
            "name": "cycle",
            "required": false,
            "schema": {
              "enum": [
                "MONTHLY",
                "ANNUAL"
              ],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "type COMMERCIAL or as defined per synthetic templates",
            "explode": true,
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponsePricingPlanResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Pricing Plan"
        ]
      }
    },
    "/api/v1/products": {
      "get": {
        "parameters": [
          {
            "description": "Pagination size",
            "explode": true,
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Pagination offset cursor",
            "explode": true,
            "in": "query",
            "name": "startId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseProductResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Product"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "header",
            "name": "X-Transaction-Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Product"
        ]
      }
    },
    "/api/v1/products/{key}": {
      "get": {
        "parameters": [
          {
            "explode": false,
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Product"
        ]
      }
    },
    "/api/v1/products/{productKey}/offering-groups": {
      "get": {
        "parameters": [
          {
            "explode": false,
            "in": "path",
            "name": "productKey",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Pagination size",
            "explode": true,
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 50,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Pagination offset cursor",
            "explode": true,
            "in": "query",
            "name": "startId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseOfferingGroupResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Product"
        ]
      }
    },
    "/api/v1/products/{productKey}/offerings": {
      "get": {
        "parameters": [
          {
            "explode": false,
            "in": "path",
            "name": "productKey",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Pagination size",
            "explode": true,
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 50,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Pagination offset cursor",
            "explode": true,
            "in": "query",
            "name": "startId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseOfferingResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "tags": [
          "Product"
        ]
      }
    },
    "/api/v1/promotions/available": {
      "post": {
        "operationId": "getAvailablePromotion",
        "parameters": [
          {
            "explode": false,
            "in": "header",
            "name": "X-CCP-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailablePromotionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailablePromotionResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Conflict"
          },
          "415": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Unsupported Media Type"
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns all promotion, satisfying promotion rules",
        "tags": [
          "Promotion Controller"
        ]
      }
    },
    "/api/v1/promotions/event/{promotion-id}": {
      "put": {
        "operationId": "updatePromotionStatusEvent",
        "parameters": [
          {
            "description": "PromotionId",
            "explode": false,
            "in": "path",
            "name": "promotion-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "header",
            "name": "X-CCP-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "X-Transaction-Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromotionEventStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            },
            "description": "No Content"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Conflict"
          },
          "415": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Unsupported Media Type"
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Update promotion status",
        "tags": [
          "Promotion Controller"
        ]
      }
    },
    "/api/v1/promotions/{promotion-id}/coupons": {
      "post": {
        "operationId": "createCoupon",
        "parameters": [
          {
            "description": "PromotionId",
            "explode": false,
            "in": "path",
            "name": "promotion-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "UserID",
            "explode": false,
            "in": "header",
            "name": "X-USER-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "X-Transaction-Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCouponRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Conflict"
          },
          "415": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Unsupported Media Type"
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Create new coupon",
        "tags": [
          "Promotion Controller"
        ]
      }
    },
    "/api/v1/promotions/{promotion-id}/{event}": {
      "put": {
        "operationId": "updatePromotionStatus",
        "parameters": [
          {
            "description": "PromotionId",
            "explode": false,
            "in": "path",
            "name": "promotion-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Event",
            "explode": false,
            "in": "path",
            "name": "event",
            "required": true,
            "schema": {
              "enum": [
                "ACTIVATE",
                "EXPIRE",
                "CANCEL",
                "WITHDRAW"
              ],
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "UserID",
            "explode": false,
            "in": "header",
            "name": "X-USER-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "header",
            "name": "X-CCP-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "X-Transaction-Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            },
            "description": "No Content"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Conflict"
          },
          "415": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Unsupported Media Type"
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Update promotion status",
        "tags": [
          "Promotion Controller"
        ]
      }
    },
    "/api/v1/roles/assignments/create": {
      "post": {
        "description": "Create a role assignment",
        "operationId": "addRoleAssignment",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleAssignment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleAssignment"
                }
              }
            },
            "description": "Request successfully submitted"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "role-resource"
        ]
      }
    },
    "/api/v1/roles/assignments/create/bulk": {
      "post": {
        "description": "Submit multiple role assignment requests (bulk API)",
        "operationId": "addBulkRoleAssignments",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleAssignments"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Request received"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "role-resource"
        ]
      }
    },
    "/api/v1/roles/assignments/delete": {
      "post": {
        "description": "Delete a role assignment",
        "operationId": "deleteRoleAssignment",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleAssignment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Request successfully submitted"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "role-resource"
        ]
      }
    },
    "/api/v1/search": {
      "post": {
        "parameters": [
          {
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HighLevelQueryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseGeneric"
                }
              }
            },
            "description": "The search results"
          },
          "400": {
            "description": "Bad search request"
          },
          "404": {
            "description": "requested resource not found"
          }
        },
        "summary": "Provides search capabilities for different ccp primitives",
        "tags": [
          "Search APIs"
        ]
      }
    },
    "/api/v1/search/_custom": {
      "post": {
        "parameters": [
          {
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HighLevelQueryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseGeneric"
                }
              }
            },
            "description": "The search results"
          },
          "400": {
            "description": "Bad search request"
          },
          "404": {
            "description": "requested resource not found"
          }
        },
        "summary": "Provides search capabilities for different ccp primitives",
        "tags": [
          "Search APIs"
        ]
      }
    },
    "/api/v1/search/count": {
      "post": {
        "parameters": [
          {
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CountQueryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseGeneric"
                }
              }
            },
            "description": "The count result"
          },
          "400": {
            "description": "Bad search request"
          },
          "404": {
            "description": "requested resource not found"
          }
        },
        "summary": "Provides count for different ccp primitives",
        "tags": [
          "Search APIs"
        ]
      }
    },
    "/api/v1/search/custom-search": {
      "post": {
        "parameters": [
          {
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HighLevelQueryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseGeneric"
                }
              }
            },
            "description": "The search results"
          },
          "400": {
            "description": "Bad search request"
          },
          "404": {
            "description": "requested resource not found"
          }
        },
        "summary": "Provides search capabilities for different ccp primitives",
        "tags": [
          "Search APIs"
        ]
      }
    },
    "/api/v1/setup-intents": {
      "post": {
        "description": "Create a setup intent for Stripe payment method setup. Refer https://bitbucket.org/atlassian-developers/commerce-cloud-platform-docs/src/master/content/platform/commerce-cloud-platform/how-to/setup-customer.md for creating set up intentStripe returns with SetupIntent object that includes one-time clientSecretKey",
        "operationId": "createSetUpIntent",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetupIntentInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetupIntent"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "setup-intent-resource"
        ]
      }
    },
    "/api/v1/ship-to-parties": {
      "get": {
        "description": "Retrieve n ship-to-party's in the transaction account",
        "operationId": "getAll",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": true,
            "in": "query",
            "name": "pageRequest",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PageRequest"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedListShipToPartyDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "ship-to-party-resource"
        ]
      },
      "post": {
        "description": "Creates a new ship to party. Checks for a valid postal address",
        "operationId": "createNew",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShipToPartyInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipToPartyDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "ship-to-party-resource"
        ]
      }
    },
    "/api/v1/ship-to-parties/{id}": {
      "get": {
        "description": "Retrieve by id",
        "operationId": "get",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipToPartyDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "ship-to-party-resource"
        ]
      },
      "put": {
        "description": "Updates address of the given ship to party. Checks for a valid postal address",
        "operationId": "updateAddress",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShipToPartyInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipToPartyDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "ship-to-party-resource"
        ]
      }
    },
    "/api/v1/ship-to-parties/{id}/price-eligibility": {
      "get": {
        "description": "Retrieve price eligibility by ship to party id",
        "operationId": "getPriceEligibility",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "boolean"
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "ship-to-party-resource"
        ]
      },
      "put": {
        "description": "Updates price eligibility",
        "operationId": "updatePriceEligibility",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "type": "boolean"
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "boolean"
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "ship-to-party-resource"
        ]
      }
    },
    "/api/v1/status": {
      "get": {
        "description": "Returns the status of the transaction-account. Invoiceable will be valid, if bill-to party has been set up.Invoiceable will contain array of errors if valid is false ",
        "parameters": [
          {
            "description": "Transaction Account",
            "explode": false,
            "in": "header",
            "name": "X-transaction-account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionAccountStatus"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "status-resource"
        ]
      }
    },
    "/api/v1/transaction-accounts": {
      "get": {
        "description": "Get a list of transaction accounts that an aaid in UserContext is associated as a billing admin",
        "operationId": "getTransactionAccounts",
        "parameters": [
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionAccountsListDto"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "transaction-account-resource"
        ]
      },
      "post": {
        "description": "Create a transaction account with an optional billing admin id",
        "operationId": "create",
        "parameters": [
          {
            "description": "User Context",
            "explode": false,
            "in": "header",
            "name": "User-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionAccountInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionAccountDto"
                }
              }
            },
            "description": "Created Transaction Account with no Billing Admin"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionAccountDto"
                }
              }
            },
            "description": "Created Transaction Account and initiated async creation of Billing Admin role"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "ASAP": [
            ]
          }
        ],
        "tags": [
          "transaction-account-resource"
        ]
      }
    },
    "/api/v2/promotions": {
      "post": {
        "parameters": [
          {
            "explode": false,
            "in": "header",
            "name": "X-CCP-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePromotionRequestV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromotionResponseV2"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Conflict"
          },
          "415": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Unsupported Media Type"
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Create new promotion",
        "tags": [
          "Promotion Controller"
        ]
      }
    },
    "/api/v2/promotions/applicable": {
      "post": {
        "parameters": [
          {
            "explode": false,
            "in": "header",
            "name": "X-CCP-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicablePromotionRequestV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicablePromotionResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Conflict"
          },
          "415": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Unsupported Media Type"
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Verifies the applicability of the promotions",
        "tags": [
          "Promotion Controller"
        ]
      }
    },
    "/api/v2/promotions/{promotion-id}": {
      "get": {
        "parameters": [
          {
            "description": "PromotionId",
            "explode": false,
            "in": "path",
            "name": "promotion-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Staff-Context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "User-Context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPromotionByIdResponseV2"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Conflict"
          },
          "415": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Unsupported Media Type"
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get promotion by id",
        "tags": [
          "Promotion Controller"
        ]
      },
      "put": {
        "parameters": [
          {
            "description": "PromotionId",
            "explode": false,
            "in": "path",
            "name": "promotion-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "explode": false,
            "in": "header",
            "name": "X-CCP-Context",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromotionDetailsRequestV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePromotionResponse"
                }
              }
            },
            "description": "No Content"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "405": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Conflict"
          },
          "415": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Unsupported Media Type"
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Update promotion details",
        "tags": [
          "Promotion Controller"
        ]
      }
    }
  },
  "security": [
    {
      "ASAP": [
      ]
    },
    {
      "Slauth": [
      ]
    }
  ],
  "servers": [
    {
      "description": "prod",
      "url": "https://ccp-api-gateway.prod.atl-paas.net"
    },
    {
      "description": "staging",
      "url": "https://ccp-api-gateway.staging.atl-paas.net"
    },
    {
      "description": "adev",
      "url": "https://ccp-api-gateway-adev.dev.atl-paas.net"
    },
    {
      "description": "ddev",
      "url": "https://ccp-api-gateway-ddev.dev.atl-paas.net"
    }
  ],
  "tags": [
    {
      "description": "<p> A template of what the customer will get once signed up for an offering. It lists a set of features that should be given to a customer. The information in the entitlement template is used to instantiate an entitlement. The features are not strongly typed and can be any key-value pair.</p><b>Examples:</b><br/><li>Bitbucket Standard: unlimited users, 2500 build minutes, 5GB storage</li><li>Jira Premium: 10000 users, enabled advanced roadmaps, enabled multi-project automation, advanced permissions, unlimited storage, 24/7 support</li>",
      "name": "Entitlement Template"
    },
    {
      "description": "<p>A packaging of the product that combines a set of features and the way to charge for them. It has a type (parent or child), pricing type (free, limited free, paid),an entitlement template, and optionally a set of pricing plans, a set of synthetic plans,trial information, a set of allowed offerings it depends on.</p><b>Examples:</b><br/><li>Parent Offering: Status Page Public Hobby</li><li>Child Offering: Team members Addon For Status Page Public Hobby</li><li>Free Offering: Jira Software Free</li><li>Limited Offering: Statuspage Private Trial</li><li>Paid Offering: Jira Software Premium with 7 days trial</li>",
      "name": "Offering"
    },
    {
      "description": "<p>A transition is a change in the state of entitlement from one offering to another one. A policy specifies which transitions are allowed based on who is executing it.</p><b>Examples:</b><br/><li>Allow all self-service upgrades to Statuspage private pages</li><li>Deny all self-service downgrades to Statuspage Private Trial</li><li>allow advocate downgrades to Statuspage Private Trial</li>",
      "name": "Transition"
    },
    {
      "description": "Policy operations",
      "name": "Policy"
    },
    {
      "description": "<p> A charging model composed of a list of pricing plan items. It has a currency, a default billing cycle, a type, and a list of pricing plan items.</p><b>Examples:</b><br/><li>Monthly commercial USD plan</li><li>Annual open source JPY plan</li>",
      "name": "Pricing Plan"
    },
    {
      "description": "<p>A container for all catalogue definitions for a product that Atlassian is selling. The product is the top-level entity in the CCP offering catalog.</p><b>Examples:</b><br/><li>Jira Software</li><li>Cloud Enterprise</li><li>JSM</li><li>Statuspage</li>",
      "name": "Product"
    },
    {
      "description": "<p> A logical grouping of offerings mainly aimed at solving transition definitions.  It may also be used for rendering the offerings on websites.</p><b>Example:</b><br/><li>Statuspage Public Pages</li>",
      "name": "OfferingGroup"
    },
    {
      "description": "Migration endpoints for AR entities. Use is restricted to the migrations service and HAMS",
      "name": "migration-resource"
    },
    {
      "description": "Internal sync endpoints for AR entities. Use is restricted to CCP Search Service",
      "name": "sync-resource"
    },
    {
      "description": "Promotion Internal Admin operations",
      "name": "Promotion Internal Admin Controller"
    },
    {
      "description": "Cache Internal Admin operations",
      "name": "Cache Internal Admin Controller"
    },
    {
      "description": "Promotion operations",
      "name": "Promotion Controller"
    },
    {
      "description": "Coupon operations",
      "name": "Coupon Controller"
    },
    {
      "description": "APIs to read and write entitlements",
      "name": "Entitlements APIs"
    },
    {
      "description": "APIs to search data for different ccp primitives",
      "name": "Search APIs"
    }
  ]
}