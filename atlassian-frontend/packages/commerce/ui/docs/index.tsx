import React from 'react';

import { Example, md } from '@atlaskit/docs';

import NonCommerceUIExample from '../examples/0-non-commerce-ui-example';
import CommerceUIExample from '../examples/1-commerce-ui-example';

const NonCommerceUIExampleSource = require('!!raw-loader!../examples/0-non-commerce-ui-example');
const CommerceUIExampleSource = require('!!raw-loader!../examples/1-commerce-ui-example');

const WrappedExample = (props: any) => (
  <Example packageName="@atlassian/commerce-ui" {...props} />
);

// TODO: Add examples for how to integrate with telemetry from this pacakge
// TODO: Add examples for how to integrate with mocks from this pacakge
/*
  TODO: Would be nice if we could provide an autogenerated 1:1 mapping of each entry point to their actual package.
  However, at the time of writing this TODO, reliably doing so would require parsing the files in ./src
*/
export default md`
This package is designed for those who:

- Are using 2 or more Commerce packages
- Want stronger guarantees that interactions between each package will work together (both from a UX and a behavioural perspective)
- Use telemetry integrations but don't want to have to wrap your app with Commerce's telemetry integration/listener components per-package.

# What is this package?

\`@atlassian/commerce-ui\` is a metapackage containing all Commerce packages that have been designed to be externally consumed by other teams.

# Entrypoints

Rather than importing a package via, say \`@atlassian/commerce-credit-card-ccp\`, you should instead import the equivelant package from @atlassian/commerce-ui/credit-card-ccp.
You can identify these mappings via the entrypoints field in this package's package.json:

Mocks are currently imported via \`@atlassian/commerce-ui/mocks\` where each packages mocks.

For telemetry integrations, you can import \`@atlassian/commerce-ui/telemetry-integrations\`

# Why use \`@atlassian/commerce-ui\` instead of individual packages?

For any given release of \`@atlassian/commerce-ui\`, the versions of dependencies listed in the version of \`@atlassian/commerce-ui\` you installed will
have been the same versions that were present when CI ran our automated tests before to the main code branch and releasing the package(s).
This provides a stronger guarantee that the packages will work together both functionally (as CI would have complained during integration tests and TypeScript compilation)
and visually.

# FAQ

**Won't this unnecessarily increase the bundle size if I don't use all packages?**

No.

\`@atlassian/commerce-ui/...\` is just a metapackage for other packages.
For instance, importing \`@atlassian/commerce-ui/credit-card-ccp\` and \`@atlassian/commerce-credit-card-ccp\` have exactly the same memory footprint.
This package re-exports almost all packages as-is.

It may actually reduce the bundle size since the versions of Commerce packages used in this package are
will share the same internal dependencies.

However, this package *will* unnecessarily increase your \`node_modules\` folder size.
We believe this tradeoff is worth having in most cases where two or more Commerce packages are being used.

**I'm migrating off @atlassian/... what's the equivelant of /telemetry-integrations?**

All original \`@atlassian/commerce-*/telemetry-integrations\` imports can be replaced with a single \`@atlassian/commerce-ui/telemetry-integrations\`.

For example:

${(
  <WrappedExample
    Component={NonCommerceUIExample}
    title="Non-Commerce UI example"
    source={NonCommerceUIExampleSource}
  />
)}

Becomes:

${(
  <WrappedExample
    Component={CommerceUIExample}
    title="Commerce UI example"
    source={CommerceUIExampleSource}
  />
)}

**We don't use Metal/GasV3/Sentry in our codebase. Won't adding them to our codebase and using the Cmmerce telemetry integrations increase the bundle size?**

Mostly no. Our packages internally send telemetry events for our own monitoring and analytics purposes.

So long as you use the same versions of Sentry/Metal/GasV3 client packages as we do internally, they won't affect your bundle size.
`;
