"""This directive allows results to be deferred during execution"""
directive @defer on FIELD

directive @batchall(name: String!, batchArg: String!) on FIELD_DEFINITION

directive @asSuperAdmin on QUERY | MUTATION

"""Operations with this directive affects SLA of the experience."""
directive @SLA on QUERY | MUTATION

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type Query {
  feed(after: String, first: Int = 25): PaginatedFeed!
  getFeedUserConfig: FollowingFeedGetUserConfig!
  getRecommendedFeedUserConfig: RecommendedFeedUserConfig!
  getSmartFeatures(input: [SmartFeaturesInput!]!): SmartFeaturesResponse!
  getRecommendedPages(entityType: String!, entityId: ID!, experience: String!): RecommendedPages!
  getMetaTags(url: String, spaceKey: String, contentId: String): MetaTags!
  userGroupSearch(query: String, maxResults: Int, sitePermissionTypeFilter: SitePermissionTypeFilter = NONE): GraphQLUserAndGroupSearchResults
  archivalRecommendations(spaceKey: String!, limit: Int = 30): PaginatedArchivalRecommendationList!
  contentHistory(contentId: ID!, first: Long = 100, after: String, limit: Int = 100): PaginatedContentHistoryList
  contentRenderer(contentId: ID, adf: String!, containedRender: Boolean = false, mode: ContentRendererMode = RENDERER, outputDeviceType: OutputDeviceType): HtmlDocument
  snippets(accountId: String!, spaceKey: String, type: String, scope: String, after: String, first: Int = 25): PaginatedSnippetList
  entitlements: Entitlements!
  contentContributors(id: ID!, status: [String], version: Int = 0, offset: Int, after: String, limit: Int = 10): ContentContributors
  contentPermissions(contentId: ID!): ContentPermissions
  sitePermissions(permissionTypes: [SitePermissionType], operations: [SitePermissionOperationType]): SitePermission
  spacePermissions(spaceKey: String!): SpacePermissions!
  groupWithContentRestrictions(contentId: ID, groupName: String, groupId: String): GroupWithRestrictions
  groupsWithContentRestrictions(contentId: ID!, groupIds: [String]!): [GroupWithRestrictions]
  group(groupName: String!): Group
  groupsUserSpaceAccess(accountId: String!, spaceKey: String!, limit: Int = 10, start: Int): PaginatedGroupList
  homeUserSettings: HomeUserSettings
  teamLabels(start: Int = 0, first: Int = 200): PaginatedLabelList
  localStorage: LocalStorage!
  macroBodyRenderer(contentId: ID, adf: String!, containedRender: Boolean = false, mode: ContentRendererMode = RENDERER, outputDeviceType: OutputDeviceType): MacroBody
  page(id: ID!, pageTree: Int, enablePaging: Boolean = false): Page
  pages(spaceKey: String, parentPageId: ID, pageId: ID, title: String, start: Int, limit: Int = 25): PaginatedPageList
  search(cql: String!, cqlcontext: String, excerpt: String = "highlight", offset: Int, after: String, before: String, first: Int = 25, last: Int = 25, includeArchivedSpaces: Boolean = false, excludeCurrentSpaces: Boolean = false, disableArchivedSpaceFallback: Boolean = false): PaginatedSearchResultList
  singleContent(id: ID, validatedShareToken: String): Content
  isSiteAdmin: Boolean!
  recentlyViewedSpaces(limit: Int = 25): [Space]
  space(key: String, pageId: ID, id: ID, identifier: ID): Space
  userWithContentRestrictions(accountId: String, contentId: ID): UserWithRestrictions
  usersWithContentRestrictions(contentId: ID!, accountIds: [String]!): [UserWithRestrictions]
  userPreferences: UserPreferences!
  globalContextContentCreationMetadata: ContentCreationMetadata!
  pageContextContentCreationMetadata(contentId: ID!): ContentCreationMetadata!
  spaceContextContentCreationMetadata(spaceKey: String!): ContentCreationMetadata!
  pushNotificationSettings: ConfluencePushNotificationSettings!
  incomingLinksCount(contentId: ID!): IncomingLinksCount
  allTemplates(spaceKey: String!, sortingScheme: String = "web.item.sorting.scheme.default", start: Int, limit: Int = 500): PaginatedTemplateInfoList
  templateBodies(spaceKey: String!, start: Int, limit: Int = 100, ids: [String]): PaginatedTemplateBodyList
  templateCategories(spaceKey: String!, start: Int, limit: Int = 25): PaginatedTemplateCategoryList
  templateMediaSession(templateIds: [String], collectionId: String, spaceKey: String): TemplateMediaSession!
  contentWatchers(contentId: ID!, offset: Int, after: String, first: Int = 200): PaginatedPersonList
  spaceWatchers(spaceKey: String, spaceId: ID, offset: Int, after: String, first: Int = 200): PaginatedPersonList
  favoriteContent(start: Int = 0, limit: Int = 100): PaginatedContentList
  globalOperations: [OperationCheckResult]!
  groupCounts(groupIds: [String]): GraphQLGroupCountsResult
  groupMembers(id: String!, after: String, first: Int = 25, filterText: String = ""): PaginatedPersonList
  groups(after: String, first: Int = 25): PaginatedGroupList
  lookAndFeel(spaceKey: String): LookAndFeelSettings
  searchUser(cql: String!, offset: Int, after: String, first: Int = 25): PaginatedSearchResultList
  spaces(spaceKey: String, spaceKeys: [String], spaceId: Long, spaceIds: [Long], type: String, status: String, label: [String], favourite: Boolean, favouriteUserKey: String, favouriteUserAccountId: String, watchedSpacesOnly: Boolean, watchedByAccountId: String, offset: Int, after: String, first: Int = 25, spaceNamePattern: String = "", assignedToGroupName: String, assignedToUser: String): PaginatedSpaceList
  template(contentTemplateId: String!): ContentTemplate
  templates(spaceKey: String, start: Int, limit: Int = 25): PaginatedContentTemplateList
  confluenceUsers(accountIds: [String], start: Int, limit: Int = 200): PaginatedPersonList
  spaceTheme(spaceKey: String): Theme
  webItemSections(location: String, locations: [String], key: String, contentId: ID, version: Int): [WebSection]!
  webItems(location: String, section: String, key: String, contentId: ID, version: Int): [WebItem]!
  webPanels(location: String, locations: [String], contentId: ID, version: Int, key: String): [WebPanel]!
  spaceSidebarLinks(spaceKey: String): SpaceSidebarLinks
  spaViewModel: SpaViewModel @deprecated(reason: "Use spaViewContext query")
  abTestCohorts: String!
  experimentFeatures: String
  isNewUser: Boolean!
  siteConfiguration: SiteConfiguration!
  spaViewContext: SpaViewModel
  featureDiscovery: [DiscoveredFeature]
  contentLabelSearch(contentId: ID, spaceKey: String, searchText: String!, ignoreRelated: Boolean, limit: Int = 50): LabelSearchResults
  labelSearch(contentId: ID, spaceKey: String, searchText: String!, ignoreRelated: Boolean, limit: Int = 50): LabelSearchResults
  cqlMetaData: Confluence_cqlMetaData
  teamCalendarSettings: TeamCalendarSettings!
  quickReload(pageId: Long!, since: Long!): QuickReload
  workbox: ConfluenceWorkbox
  internalFrontendResource: FrontendResourceRenderResponse!
  suggestedSpaces(start: Int = 0, limit: Int = 3, connections: [String]): PaginatedSpaceList
  onboardingState(key: [String]): [OnboardingState!]!
  recentSpaces: [Space]
  permitted(principalId: String, resourceId: String, permissionId: String, dontRequirePrincipalInSite: Boolean): Boolean!
  mediaConfiguration: MediaConfiguration
  pageMediaSession(contentId: ID!): PageMediaSession @deprecated(reason: "Use contentMediaSession query")
  contentMediaSession(contentId: ID!): ContentMediaSession
  objectRecommendations(context: CollaborationGraphRequestContext!, modelRequestParams: ModelRequestParams!, maxNumberOfResults: Int = 25): CollaborationGraphRecommendationResults!
  reactedUsers(contentId: String!, reactedUsersInput: ReactedUsersInput!): ReactedUsersResponse!
  dummy: Boolean
  ptpage(enablePaging: Boolean = true, id: ID!, pageTree: Int): PTPage
  user(current: Boolean, id: ID): AtlassianUser
  content(after: String, draftShareId: String, embeddedContentRender: String = "current", first: Int = 25, id: ID, ids: [ID], offset: Int, orderby: String, postingDay: String, spaceKey: String, status: [String], title: String, trigger: String, type: String = "page", version: Int): PaginatedContentListWithChild
  comments(after: String, before: String, commentId: ID, contentStatus: [GraphQLContentStatus], depth: Depth = ALL, first: Long = 250, inlineMarkerRef: String, inlineMarkerRefList: [String], last: Long = 250, location: [String], pageId: ID, recentFirst: Boolean = false, type: [CommentType]): PaginatedCommentList
  activities: Activities
  featureFlags(prefix: FeatureFlagPrefix! = FRONTEND, prefixes: [FeatureFlagPrefix!], extraTargeting: Boolean = true, after: String, first: Int = 500, offset: Int): PaginatedFeatureFlagList
  tapAttributes: TapAttributes!
  queryContentLevelMetadata(contentId: ID!): ContentLevelMetadataPayload
  sharedContent(contentId: ID!, shareToken: String!): SharedContent
  embeddablePageShareToken(contentId: ID!, operation: String): EmbeddablePageShareToken
  popularFeed(after: String, first: Int = 25): PaginatedPopularFeed!
  spacePopularFeed(spaceId: ID!, after: String, first: Int = 25): PaginatedPopularSpaceFeed!
  allUpdatesFeed(after: String, first: Int = 25, groupBy: [AllUpdatesFeedEventType!], spaceKeys: [String!], users: [String!]): PaginatedAllUpdatesFeed!
  contentAnalyticsViews(contentId: ID!, fromDate: String): ContentAnalyticsViews!
  contentAnalyticsViewers(contentId: ID!, fromDate: String): ContentAnalyticsViewers!
  pageActivity(after: String, contentId: ID!, first: Int = 25, fromDate: String): PaginatedPageActivity!
  topRelevantUsers(spaceId: [String!]!, eventName: [RelevantUsersEventName], startTime: String, endTime: String, userFilter: RelevantUserFilter, sortOrder: RelevantUsersSortOrder): TopRelevantUsers!
  siteLevelPermission: SiteLevelPermission!
  tenant(current: Boolean = true): Tenant!
  confluenceContentSearch(query: String!, scopes: [ConfluenceContentSearchScope!]!, filters: ConfluenceSearchFilters, sessionAttributes: SessionAttributes, sort: [ConfluenceContentSortField!], first: Int!, token: String): ConfluenceContentSearchResults!
}

type AbTest {
  abTestId: ID!
  controlId: ID!
  experimentId: ID!
}

type UserWithRestrictions {
  permissionType: SitePermissionType
  type: String
  profilePicture: Icon
  displayName: String
  operations: [OperationCheckResult]
  username: String
  userKey: String
  accountId: String
  accountType: String
  email: String
  publicName: String
  hasSpaceViewPermission: Boolean
  hasSpaceEditPermission: Boolean
  restrictingContent: Content
}

type PaginatedPageList {
  count: Int
  nodes: [Page]
  edges: [PageEdge]
  pageInfo: PageInfo
}

type ActivitiesContainer {
  id: ID!
  localResourceId: ID
  name: String
  type: ActivitiesContainerType
  product: ActivityProduct
  cloudId: String
  url: String
  iconUrl: String
}

input ReactionsId {
  contentId: ID
  contentType: GraphQLReactionContentType!
  containerId: ID!
  containerType: ContainerType!
}

type ContentContributors {
  count: Int
  nodes: [Person]
  edges: [PersonEdge]
  pageInfo: PageInfo
}

type LookAndFeel {
  links: LinksContextBase
  headings: [MapOfStringToString]!
  menus: MenusLookAndFeel
  header: HeaderLookAndFeel
  horizontalHeader: HeaderLookAndFeel
  content: ContentLookAndFeel
  bordersAndDividers: BordersAndDividersLookAndFeel
}

type InlineComment implements CommentLocation {
  inlineCommentRepliesCount: Int!
  inlineMarkerRef: String
  inlineResolveProperties: InlineCommentResolveProperties
  inlineText: String
  type: String!
}

type StreamUser {
  userName: String
  fullName: String
  avatarUrl: String
  url: String
  phone: String
  email: String
  position: String
  department: String
  userPreferences: UserPreference
  anonymousUser: Boolean
  unknownUser: Boolean
  location: String
  about: String
  accountId: String
}

type SmartFeaturesUserResultResponse implements SmartFeaturesResultResponse {
  entityType: String!
  result: [SmartFeaturesUserResult]
}

type ContentAnalyticsViews {
  id: ID!
  count: Int!
}

type WebResourceUris {
  css: [String]
  data: [String]
  js: [String]
}

input UserWithPermissionsInput {
  accountId: ID!
  operations: [OperationCheckResultInput]!
}

type UpdateRelationPayload {
  targetKey: String!
  sourceKey: String!
  relationName: String!
  url: String!
}

enum AccessType {
  VIEW
  EDIT
}

enum SpaceViewsPersistenceOption {
  TREE
  RECENTLY_VIEWED
  TITLE_AZ
  RECENTLY_MODIFIED
  POPULARITY
}

type Space {
  archivedContentRoots(orderBy: String, offset: Int, first: Int = 25): PaginatedContentList! @deprecated(reason: "Use contentRoots")
  contentRoots(status: String, orderBy: String = "history.by.when desc", offset: Int, first: Int = 25): PaginatedContentList!
  containsExternalCollaborators: Boolean!
  directAccessExternalCollaborators(limit: Int = 10, start: Int): PaginatedPersonList
  externalCollaboratorAndGroupCount: Int!
  externalGroupsWithAccess(limit: Int = 10, start: Int): PaginatedGroupList
  currentUser: SpaceUserMetadata!
  admins(accountType: AccountType): [Person]!
  hasGroupRestriction(groupName: String!, groupPermission: String!): Boolean! @deprecated(reason: "hasGroupRestriction Query is not in use")
  hasRestriction(accountID: String!, permission: InspectPermissions!): Boolean!
  links: LinksDownloadEdituiWebuiContextSelfTinyuiCollectionBase
  id: ID
  key: String
  identifiers: GlobalSpaceIdentifier
  name: String
  icon: Icon
  description: SpaceDescriptions
  homepage: Content
  homepageId: ID @deprecated(reason: "Use homepage.id instead")
  type: String
  metadata: SpaceMetadata!
  operations: [OperationCheckResult]
  permissions: [SpacePermission]
  status: String
  settings: SpaceSettings
  theme: Theme
  lookAndFeel: LookAndFeel
  history: SpaceHistory
}

type AddDefaultExCoSpacePermissionsPayload {
  status: Boolean!
}

type GraphQLUserAndGroupSearchResults {
  users: [Person]!
  groups: [Group]!
}

type ArchivalRecommendation {
  links: LinksContextBase
  pageId: Long
  title: String
  lastViewed: Date
  lastEdited: Date
  createdAt: Date
  link: String
  accountId: String
}

type FeedPageInfo {
  hasNextPage: Boolean!
  endCursor: String!
}

type PageActivityEventCreatedComment implements PageActivityEvent {
  action: PageActivityAction!
  actionSubject: PageActivityActionSubject!
  commentType: AnalyticsCommentType!
  groupSize: Int!
  timestamp: String!
  user: AtlassianUser!
  comment: Comment!
}

type PaginatedPersonList {
  count: Int
  nodes: [Person]
  edges: [PersonEdge]
  pageInfo: PageInfo
}

input WatchSpaceInput {
  spaceId: ID
  spaceKey: String
  currentUser: Boolean
  accountId: String
}

type SpaceDumpPage {
  creator: String
  id: String!
  parent: String
  status: String
}

type FavouritePagePayload {
  content: Content!
}

input PageUserRestrictionInput {
  id: ID!
}

input ActivitiesFilter {
  type: ActivitiesFilterType
  arguments: ActivitiesArguments
}

input CommentBody {
  value: String!
  representationFormat: ContentRepresentation!
}

input FavouritePageInput {
  pageId: ID!
}

type ShareResourcePayload {
  success: Boolean!
}

enum ContentPermissionType {
  VIEW
  EDIT
}

type ActivityPageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type SmartUserFeatures {
  recommendedPeople: [RecommendedPeopleItem]
  recommendedSpaces: [RecommendedSpaceItem]
}

type CommentEdge {
  node: Comment
  cursor: String
}

input MediaFile {
  id: ID!
  name: String!
  size: Int!
  mimeType: String
}

enum RelationTargetType {
  space
}

type ContentLevelMetadataPayload {
  cloudId: String!
  contentId: String!
  shareUrlPath: String
  permissions: [String]!
}

type SpacePermissionSubjectEdge {
  node: SpacePermissionSubject
  cursor: String
}

type ActivitiesContributor {
  profile: ActivityUser
  lastAccessedDate: String
  count: Int
}

type OutgoingLinks {
  internalOutgoingLinks(after: String, first: Int = 50): PaginatedContentList
}

type RecommendedSpaceItem {
  score: Float!
  space: Space
}

type SmartFeaturesSpaceResult {
  id: String!
  features: SmartSpaceFeatures!
}

type FeedEventCreate implements FeedEvent {
  datetime: String!
  groupSize: Int!
  type: FeedEventType!
  user: Person!
}

input RemoveUserSpacePermissionsInput {
  accountId: String!
  spaceKey: String!
}

enum PathType {
  ABSOLUTE
  RELATIVE
  RELATIVE_NO_CONTEXT
}

type SubjectUserOrGroupEdge {
  node: SubjectUserOrGroup
  cursor: String
}

input PageBodyInput {
  representation: BodyFormatType = ATLAS_DOC_FORMAT
  value: String!
}

input UpdatePageInput {
  pageId: ID!
  status: PageStatusInput
  mediaAttachments: [MediaAttachmentInput!]
  body: PageBodyInput
  restrictions: PageRestrictionsInput
  title: String
  minorEdit: Boolean
}

enum ActivitiesObjectType {
  ISSUE
  PAGE
  BLOGPOST
}

input UpdateSitePermissionInput {
  groups: [GroupWithPermissionsInput]
  users: [UserWithPermissionsInput]
  anonymous: AnonymousWithPermissionsInput
  unlicensedUser: UnlicensedUserWithPermissionsInput
}

input LocalStorageBooleanPairInput {
  key: String!
  value: Boolean
}

enum PagesDisplayPersistenceOption {
  CARDS
  LIST
  COMPACT_LIST
}

enum ActivitiesContainerType {
  SITE
  PROJECT
  SPACE
}

type WebItem {
  url: String
  label: String
  weight: Int
  moduleKey: String
  id: String
  accessKey: String
  completeKey: String
  section: String
  tooltip: String
  styleClass: String
  icon: Icon
  urlWithoutContextPath: String
  params: [MapOfStringToString]
  hasCondition: Boolean
}

type PaginatedFeed {
  nodes: [FeedItem!]!
  pageInfo: FeedPageInformation!
}

input GroupWithPermissionsInput {
  id: ID!
  operations: [OperationCheckResultInput]!
}

type JsonContentPropertyEdge {
  node: JsonContentProperty
  cursor: String
}

type ContentBodyPerRepresentation {
  editor: ContentBody
  atlas_doc_format: ContentBody
  view: ContentBody
  export_view: ContentBody
  plain: ContentBody
  wiki: ContentBody
  styled_view: ContentBody
  raw: ContentBody
  dynamic: ContentBody
  storage: ContentBody
  editor2: ContentBody
}

type DocumentBody {
  representation: DocumentRepresentation!
  value: String!
}

type SmartFeaturesSpaceResultResponse implements SmartFeaturesResultResponse {
  entityType: String!
  result: [SmartFeaturesSpaceResult]
}

type LocalStorage {
  booleanValues(keys: [String]!): [LocalStorageBooleanPair]!
  stringValues(keys: [String]!): [LocalStorageStringPair]!
}

type TopTemplateItem {
  rank: Int!
  templateId: String!
}

type Version {
  links: LinksContextSelfBase
  by: Person
  when: String
  friendlyWhen: String
  message: String
  number: Int
  minorEdit: Boolean
  syncRev: String
  syncRevSource: String
  ncsStepVersion: String
  ncsStepVersionSource: String
  confRev: String
  contentTypeModified: Boolean
  collaborators: ContributorUsers
  content: Content
}

type ActivitiesObjectParent {
  id: ID!
  type: ActivityObjectType
}

input SitePermissionInput {
  permissionsToAdd: UpdateSitePermissionInput
  permissionsToRemove: UpdateSitePermissionInput
}

type ContentAnalyticsViewers {
  id: ID!
  count: Int!
}

type FeatureDiscoveryPayload {
  date: String
  featureKey: String!
  pluginKey: String!
  status: Boolean!
  userKey: String
}

type LabelSearchResults {
  otherLabels: [Label]!
  suggestedLabels: [Label]!
}

type ConfluenceWorkbox_status {
  notification: ConfluenceWorkbox_status_notification
}

enum PageActivityActionSubject {
  page
  comment
}

type ContentMetadata {
  currentuser: ContentMetadata_CurrentUserMetadataProvider_currentuser
  comments: ContentMetadata_CommentsMetadataProvider_comments
  createdDate: String
  lastModifiedDate: String
  simple: ContentMetadata_SimpleContentMetadataProvider_simple
  frontend: ContentMetadata_SpaFriendlyMetadataProvider_frontend
  labels: [Label]
  likes: LikesModelMetadataDto
}

type PaginatedPopularSpaceFeed {
  data: PopularSpaceFeedPage!
  pageInfo: FeedPageInfo!
}

type FavouritedSummary {
  isFavourite: Boolean
  favouritedDate: String
}

enum SitePermissionTypeFilter {
  NONE
  EXTERNALCOLLABORATOR
}

type Snippet {
  id: ID
  title: String
  type: String
  scope: String
  body: String
  creator: String
  spaceKey: String
  icon: String
  creationDate: Date
  position: Float
}

input ModelRequestParams {
  experience: String!
  caller: String!
}

input AnonymousWithPermissionsInput {
  operations: [OperationCheckResultInput]!
}

type RequestPageAccessPayload {
  displayName: String!
}

input PageRestrictionsInput {
  read: PageRestrictionInput
  update: PageRestrictionInput
}

input WatchContentInput {
  contentId: ID!
  currentUser: Boolean
  accountId: String
}

input PageInput {
  title: String
  status: PageStatusInput
  parentId: ID
  body: PageBodyInput
  restrictions: PageRestrictionsInput
}

input SessionAttributes {
  experience: String!
  searchSessionId: ID
}

type ContentMetadata_SpaFriendlyMetadataProvider_frontend {
  commentsSpaFriendly: Boolean
  fabricEditorSupported: Boolean
  commentMacroNamesNotSpaFriendly: [String]
  spaFriendly: Boolean
  migratedRecently: Boolean
  embedded: Boolean
  fabricEditorEligibility: String
  collabService: String
  macroNamesNotSpaFriendly: [String]
  contentHash: String
}

type GraphQLMutationResponse {
  success: Boolean!
}

type Icon {
  path(type: PathType = RELATIVE_NO_CONTEXT): String!
  width: Int
  height: Int
  isDefault: Boolean
}

type TapBoolean {
  key: String!
  value: Boolean!
}

type GroupWithPermissionsEdge {
  node: GroupWithPermissions
  cursor: String
}

type EmbeddablePageShareToken {
  validatedShareToken: String
}

type TemplateMigration {
  unsupportedTemplatesNames: [String]!
}

type DeleteContentResponsePayload {
  contentId: ID!
}

type PaginatedSearchResultList {
  count: Int
  nodes: [SearchResult]
  edges: [SearchResultEdge]
  pageInfo: PageInfo
  links: LinksContextBase
}

type EnrichableMap_ContentRepresentation_ContentBody {
  editor: ContentBody
  atlas_doc_format: ContentBody
  view: ContentBody
  export_view: ContentBody
  plain: ContentBody
  wiki: ContentBody
  styled_view: ContentBody
  raw: ContentBody
  dynamic: ContentBody
  storage: ContentBody
  editor2: ContentBody
}

type AtlassianUserPhoto {
  value: String
  isPrimary: Boolean
}

enum LabelNamespaceEnum {
  GLOBAL
  MY
  TEAM
}

input CreateShareUrlPathInput {
  cloudId: ID!
  contentId: ID!
}

input GrantSitePermissionInput {
  cloudId: ID!
}

"""High level representation of a Number could be a float or an integer"""
scalar Number

type Contributors {
  links: LinksContextBase
  publishers: ContributorUsers
}

enum RecentFilter {
  ALL
  WORKED_ON
  CREATED
}

type Activities {
  all(filters: [ActivitiesFilter!], first: Int, after: String): ActivitiesConnection!
  workedOn(filters: [ActivitiesFilter!], first: Int, after: String): ActivitiesConnection!
  myActivities: MyActivities
  nodes(ids: [ID!]): [ActivitiesObject]
}

type UnknownUser implements Person {
  permissionType: SitePermissionType
  type: String
  profilePicture: Icon
  displayName: String
  operations: [OperationCheckResult]
  username: String
  userKey: String
  accountId: String
  accountType: String
  email: String
  publicName: String
}

interface SmartFeaturesResultResponse {
  entityType: String!
}

type SpaceDumpPageRestrictionEdge {
  node: SpaceDumpPageRestriction
  cursor: String
}

type QuickReloadComment {
  asyncRenderSafe: Boolean!
  comment: Comment!
  primaryActions: [CommentUserAction]!
  secondaryActions: [CommentUserAction]!
}

type Breadcrumb {
  links: LinksContextBase
  label: String
  url: String
  separator: String
}

input HomeUserSettingsInput {
  shouldShowActivityFeed: Boolean
  shouldShowSpaces: Boolean
}

type PageInfo {
  hasNextPage: Boolean
  endCursor: String
  hasPreviousPage: Boolean
  startCursor: String
}

type RevokeContentPermissionPayload {
  cloudId: ID!
  contentId: ID!
}

type PushNotificationCustomSettings {
  comment: Boolean!
  commentReply: Boolean!
  commentContentCreator: Boolean!
  mentionPage: Boolean!
  mentionBlogPost: Boolean!
  mentionComment: Boolean!
  share: Boolean!
  shareGroup: Boolean!
  taskAssign: Boolean!
  likePage: Boolean!
  likeBlogPost: Boolean!
  likeComment: Boolean!
  createPage: Boolean!
  createBlogPost: Boolean!
  editPage: Boolean!
  editBlogPost: Boolean!
}

input MovePageTopLevelInput {
  pageId: ID!
  targetSpaceKey: String!
}

type ContentMetadata_CurrentUserMetadataProvider_currentuser {
  favourited: FavouritedSummary
  lastmodified: LastModifiedSummary
  scheduled: ScheduledPublishSummary
  viewed: RecentlyViewedSummary
  lastcontributed: ContributionStatusSummary
}

type ActivitiesUser {
  profile: ActivityUser
}

type ConfluenceUser {
  currentUser: CurrentUserOperations
  groups: [String]! @deprecated(reason: "Use groupWithId instead")
  groupsWithId: [Group]!
  hasBlog: Boolean
  hasPersonalSpace: Boolean
  operations: [OperationCheckResult]!
  permissionType: SitePermissionType
  roles: GraphQLConfluenceUserRoles
  accountId: String
  locale: String!
  userKey: String
  space: Space
}

type RevokeSitePermissionPayload {
  cloudId: ID!
}

input ConfluenceSearchSpaceFilter {
  spaceKeys: [String!]!
}

type ArchivedContentMetadata {
  restoreParent: Content
}

type FollowUserPayload {
  currentUserFollowing: Boolean!
}

type SubjectKey {
  displayName: String
  id: String
  principalType: PrincipalType!
  user: User
  group: Group
}

type ButtonLookAndFeel {
  backgroundColor: String
  color: String
}

type ModuleCompleteKey {
  pluginKey: String
  moduleKey: String
}

input TemplateEntityFavouriteStatus {
  isFavourite: Boolean!
  templateEntityId: String!
}

type UserPreference {
  watchOwnContent: Boolean
}

enum ConfluenceEdition {
  FREE
  STANDARD
  PREMIUM
}

type WatchContentPayload {
  content: Content!
}

type MediaConfiguration {
  clientId: String!
  fileStoreUrl: String!
  maxFileSize: Long
}

type LinksSelf {
  self: String
}

type TemplateMediaSession {
  collections: [MapOfStringToString]!
  configuration: MediaConfiguration!
  downloadToken: TemplateMediaToken!
  uploadToken: TemplateMediaToken!
}

type ConfluenceEditions {
  edition: ConfluenceEdition!
}

input SpaceInput {
  key: ID!
}

type FeatureFlagExplanation {
  kind: String
  ruleId: String
  ruleIndex: Int
}

type LastModifiedSummary {
  version: Version
  friendlyLastModified: String
}

type SmartFeaturesError {
  id: String!
  message: String!
  errorCode: String!
}

type FeedPageInformation {
  hasNextPage: Boolean!
  endCursor: String!
}

type Entitlements {
  externalCollaborator: ExternalCollaboratorFeature!
}

union ActivitiesEventExtension = ActivitiesTransitionedEvent | ActivitiesCommentedEvent

type PaginatedGroupWithRestrictions {
  links: LinksContextBase
  count: Int
  nodes: [GroupWithRestrictions]
  edges: [GroupWithRestrictionsEdge]
  pageInfo: PageInfo
}

interface Person {
  permissionType: SitePermissionType
  type: String
  profilePicture: Icon
  displayName: String
  operations: [OperationCheckResult]
}

type UpdatePagePayload {
  mediaAttached: [MediaAttachmentOrError!]!
  restrictions: PageRestrictions
  page: Page
}

type AtlassianUserEmail {
  value: String
  isPrimary: Boolean
}

type PaginatedFeatureFlagList {
  count: Int
  edges: [FeatureFlagEdge]
  nodes: [FeatureFlag]
  pageInfo: FeatureFlagInfo
}

type LikesModelMetadataDto {
  links: LinksContextBase
  count: Int!
  summary: String
  currentUser: Boolean!
  users: [Person]!
}

type MediaToken {
  duration: Int!
  value: String!
}

type PageUserRestriction {
  id: ID!
}

type StreamItem {
  id: Long
  containerId: Long
  containerType: String
  type: String
  title: String
  url: String
  spaceKey: String
  author: StreamUser
  friendlyDate: String
  date: String
  numberOfLikes: Int
  numberOfComments: Int
  excerpt: String
  imageUris: [String]
  contentCssClass: String
  iconCssClass: String
  iconPath: String
  score: String
  counts: [StreamCountItem]
}

enum ContentRendererMode {
  EDITOR
  RENDERER
}

type ContentHistory {
  by: Person!
  collaborators: ContributorUsers
  friendlyWhen: String!
  message: String!
  minorEdit: Boolean!
  number: Int!
  when: String!
}

type SpaViewModel {
  resourceContexts: [String]
  resourceKeys: [String]
  showEditButton: Boolean
  showWelcomeMessageEditHint: Boolean
  welcomeMessageEditUrl: String
  welcomeMessageHtml: String
  tenantId: ID @deprecated(reason: "Use SiteConfiguration.tenantId")
  isNewUser: Boolean @deprecated(reason: "Use Onboarding.isNewUser")
  userCanCreateContent: Boolean
  isAnonymous: Boolean
  siteLogoUrl: String @deprecated(reason: "Use SiteConfiguration.siteLogoUrl")
  siteTitle: String @deprecated(reason: "Use SiteConfiguration.siteTitle")
  showSiteTitle: Boolean @deprecated(reason: "Use SiteConfiguration.showSiteTitle")
  homepageUri: String
  homepageTitle: String
  experimentFeatures: String @deprecated(reason: "Use experimentFeatures top level query")
  abTestCohorts: String @deprecated(reason: "Use abTestCohorts top level query")
  isSiteAdmin: Boolean @deprecated(reason: "Use isSiteAdmin top level query")
}

type SpaceEdge {
  node: Space
  cursor: String
}

input DeleteRelationInput {
  relationName: RelationType!
  sourceType: RelationSourceType!
  sourceKey: String!
  targetType: RelationTargetType!
  targetKey: String!
}

enum Depth {
  ROOT
  ALL
}

type OperationCheckResult {
  links: LinksContextBase
  operation: String
  targetType: String
}

enum HomeWidgetState {
  COLLAPSED
  EXPANDED
}

input CreateCommentInput {
  containerId: ID!
  parentCommentId: ID
  commentBody: CommentBody!
}

enum RelationType {
  favourite
}

type FollowingFeedSetUserConfig {
  spaces: [Space]
  users: [Person]
}

type MapOfStringToFormattedBody {
  key: String
  value: FormattedBody
}

type PaginatedSpaceDumpPageRestrictionList {
  count: Int
  nodes: [SpaceDumpPageRestriction]
  edges: [SpaceDumpPageRestrictionEdge]
  pageInfo: PageInfo
}

type TemplateCategoryEdge {
  node: TemplateCategory
  cursor: String
}

type TapAttributes {
  id: ID!
  strings: [TapString!]!
  booleans: [TapBoolean!]!
  numbers: [TapNumber!]!
  stringsList: [TapStrings!]!
  numbersList: [TapNumbers!]!
}

enum ConfluenceContentSearchScope {
  PAGE
  BLOGPOST
  ATTACHMENT
  SPACE
}

type CommentPermissions {
  isEditable: Boolean!
  isRemovable: Boolean!
  isResolvable: Boolean!
  isViewable: Boolean!
}

enum ActivityObjectType {
  SITE
  PROJECT
  ISSUE
  COMMENT
  SPACE
  PAGE
  BLOGPOST
  TASK
}

type FormattedBody {
  links: LinksContextBase
  value: String
  macroRenderedOutput: FormattedBody
  macroRenderedRepresentation: String
  webresource: WebResourceDependencies
  representation: String
  embeddedContent: [EmbeddedContent]!
}

type ActivitiesCommentedEvent {
  commentId: ID!
}

type ConfluenceWorkbox_status_notification {
  count: WorkboxCount
}

input CollaborationGraphRequestContext {
  containerId: String
  objectId: String
  product: String = "confluence"
  toPrivacySafeString: String
}

type ContainerSummary {
  links: LinksContextBase
  title: String
  displayUrl: String
}

type PaginatedGroupWithPermissions {
  count: Int
  nodes: [GroupWithPermissions]
  edges: [GroupWithPermissionsEdge]
  pageInfo: PageInfo
}

enum TaskStatus {
  UNCHECKED
  CHECKED
}

type GrantSitePermissionPayload {
  cloudId: ID!
}

type NavigationLookAndFeel {
  color: String
  highlightColor: String
  hoverOrFocus: [MapOfStringToString]
}

type SpaceDump {
  key: String!
  pageRestrictions(first: Int = 50000, after: String): PaginatedSpaceDumpPageRestrictionList!
  pages(first: Int = 50000, after: String): PaginatedSpaceDumpPageList!
}

type ConfluenceContentSearchResult implements ConfluenceSearchResult {
  id: ID!
  title: String!
  url: String!
  baseUrl: String!
  excerpt: String!
  containerTitle: String!
  containerDisplayUrl: String!
  iconCssClass: String!
  lastModified: Date!
  score: Float!
  node: Content!
  content: Content
}

input ConfluenceSearchLastModifiedFilter {
  from: String!
  to: String!
}

type Confluence_users {
  current: Person @deprecated(reason: "Consider using user(current: true) as an alternative")
}

type Theme {
  links: LinksContextBase
  themeKey: String
  name: String
  description: String
  icon: Icon
}

type ContentRestrictionsPageResponse {
  links: LinksContextSelfBase
  restrictionsHash: String
}

type ResolveInlineCommentPayload {
  status: Boolean!
  resolveProperties: InlineCommentResolveProperties
}

type ActivityUser {
  accountId: ID!
  name: String
  picture: String
  user: AtlassianUser
}

interface AllUpdatesFeedEvent {
  datetime: String!
  type: AllUpdatesFeedEventType!
}

type ActivitiesObject implements Node {
  id: ID!
  localResourceId: ID
  name: String
  type: ActivityObjectType
  product: ActivityProduct
  cloudId: String
  url: String
  iconUrl: String
  containers: [ActivitiesContainer!]
  contributors: [ActivitiesContributor!]
  parent: ActivitiesObjectParent
  events(first: Int): [ActivitiesEvent!]
  extension: ActivitiesObjectExtension
  content: Content
}

type LikeContentPayload {
  content: Content!
}

type LabelEdge {
  node: Label
  cursor: String
}

type CreateUpdate implements AllUpdatesFeedEvent {
  datetime: String!
  type: AllUpdatesFeedEventType!
  user: Person!
}

type ContentEdge {
  node: Content
  cursor: String
}

enum GraphQLContentStatus {
  ARCHIVED
  CURRENT
  DELETED
  DRAFT
}

type WebResourceTags {
  css: String
  data: String
  js: String
}

input ActivityTransition {
  from: String
  to: String
}

type PermissionMetadata {
  setPermission: Boolean!
}

enum CommentCreationLocation {
  RENDERER
  EDITOR
}

type SmartFeaturesErrorResponse {
  entityType: String!
  error: [SmartFeaturesError]
}

type ContentTemplateEdge {
  node: ContentTemplate
  cursor: String
}

type FeedItem {
  mostRelevantUpdate: Int!
  recentActionsCount: Int!
  source: [FeedItemSourceType!]!
  summaryLineUpdate: FeedEvent!
  content: Content!
}

type CreateShareUrlPathPayload {
  shareUrlPath: String!
}

type PaginatedGroupList {
  links: LinksContextBase
  count: Int
  nodes: [Group]
  edges: [GroupEdge]
  pageInfo: PageInfo
}

type SpaceOrContent {
  links: LinksDownloadEdituiWebuiContextSelfTinyuiCollectionBase
  restrictions: ContentRestrictions
  id: ID
  type: String
  status: String
  title: String
  schedulePublishDate: String
  space: Space
  history: History
  version: Version
  ancestors: [Content]
  operations: [OperationCheckResult]
  childTypes: ChildContentTypesAvailable
  container: SpaceOrContent
  macroRenderedOutput: [MapOfStringToFormattedBody]
  body: ContentBodyPerRepresentation
  metadata: ContentMetadata!
  extensions: [KeyValueHierarchyMap]
  key: String
  identifiers: GlobalSpaceIdentifier
  name: String
  icon: Icon
  description: SpaceDescriptions
  homepage: Content
  homepageId: ID @deprecated(reason: "Use homepage.id instead")
  permissions: [SpacePermission]
  settings: SpaceSettings
  theme: Theme
  lookAndFeel: LookAndFeel
}

input UserPreferencesInput {
  keyboardShortcutDisabled: Boolean
  topNavigationOptedOut: Boolean
  templateEntityFavouriteStatus: TemplateEntityFavouriteStatus
  nextGenFeedOptInStatus: String
  addUserSpaceNotifiedOfExternalCollab: String
  spaceViewsPersistence: SpaceViewsPersistence
  addUserSpaceNotifiedChangeBoardingOfExternalCollab: String
  shouldShowCardOnPageTreeHover: PageCardInPageTreeHoverPreference
  spacePagesDisplayView: SpacePagesDisplayView
  homePagesDisplayView: PagesDisplayPersistenceOption
  feedRecommendedUserSettingsDismissTimestamp: String
  feedType: FeedType
  recentFilter: RecentFilter
  searchExperimentOptInStatus: String
  homeWidget: HomeWidgetInput
}

type ContributorUsers {
  links: LinksContextBase
  users: [Person]!
  userAccountIds: [String]!
  userKeys: [String]
}

type EmbeddedMediaToken {
  links: LinksContextBase
  contentId: ID
  token: String
  fileIds: [String]
  collectionIds: [String]
  expiryDateTime: String
}

type PaginatedAllUpdatesFeed {
  nodes: [AllUpdatesFeedItem!]!
  pageInfo: FeedPageInfo!
}

type PaginatedContentHistoryList {
  count: Int
  nodes: [ContentHistory]
  edges: [ContentHistoryEdge]
  pageInfo: PageInfo
}

type ContentAnalyticsViewsByUser {
  id: ID!
  pageViews: [ContentAnalyticsPageViewInfo!]!
}

input UpdateRelationInput {
  relationName: RelationType!
  sourceType: RelationSourceType!
  sourceKey: String!
  targetType: RelationTargetType!
  targetKey: String!
}

type LinksContextBase {
  context: String
  base: String
}

type LikeEntity {
  user: User
  creationDate: String
  currentUserIsFollowing: Boolean
}

type ContentTemplate {
  links: LinksContextSelfBase
  templateId: String
  originalTemplate: ModuleCompleteKey
  referencingBlueprint: String
  name: String
  description: String
  space: Space
  labels: [Label]!
  templateType: String
  editorVersion: String
  body: EnrichableMap_ContentRepresentation_ContentBody
}

union ActivitiesObjectExtension = ActivitiesJiraIssue

type ContentBody {
  links: LinksContextBase
  value: String
  macroRenderedOutput: FormattedBody
  macroRenderedRepresentation: String
  webresource: WebResourceDependencies
  representation: String
  embeddedContent: [EmbeddedContent]!
  content: Content
  mediaToken: EmbeddedMediaToken
}

type PaginatedPageActivity {
  nodes: [PageActivityEvent]!
  pageInfo: PageActivityPageInfo!
}

enum RelationSourceType {
  user
}

type ActivitiesItem implements Node {
  id: ID!
  timestamp: String
  object: ActivitiesObject
}

type Mutation {
  setFeedUserConfig(input: FollowingFeedUserConfigInput!): FollowingFeedSetUserConfig!
  createFooterComment(input: CreateCommentInput!): Comment!
  createInlineComment(input: CreateInlineCommentInput!): Comment!
  deleteComment(commentIdToDelete: ID!): Boolean!
  replyInlineComment(input: ReplyInlineCommentInput!): Comment!
  updateComment(input: UpdateCommentInput!): Comment!
  disableSuperAdmin: SuperAdminPayload
  enableSuperAdmin: SuperAdminPayload
  setContentAccess(contentId: ID!, accessType: ContentAccessInputType!): ContentPermissionsPayload!
  updateContentPermissions(contentId: ID!, input: [UpdateContentPermissionsInput]!): ContentPermissionsPayload!
  favouritePage(favouritePageInput: FavouritePageInput!): FavouritePagePayload
  unfavouritePage(favouritePageInput: FavouritePageInput!): FavouritePagePayload
  followUser(followUserInput: FollowUserInput!): FollowUserPayload
  unfollowUser(followUserInput: FollowUserInput!): FollowUserPayload
  updateSitePermission(input: SitePermissionInput!): SitePermission!
  setRelevantFeedFilters(relevantFeedUsersFilter: [String]!, relevantFeedSpacesFilter: [Long]!): HomeUserSettings
  setShowActivityFeed(showActivityFeed: Boolean!): HomeUserSettings @deprecated(reason: "Use updateHomeUserSettings")
  updateHomeUserSettings(homeUserSettings: HomeUserSettingsInput!): HomeUserSettings
  setBatchedTaskStatus(batchedInlineTasksInput: BatchedInlineTasksInput!): GraphQLMutationResponse
  setTaskStatus(inlineTasksInput: InlineTasksInput!): GraphQLMutationResponse
  updateLocalStorage(localStorage: LocalStorageInput!): LocalStorage!
  archivePages(input: [BulkArchivePagesInput]!): BulkArchivePagePayLoad
  bulkArchivePages(pageIDs: [Long], includeChildren: [Boolean], archiveNote: String): BulkArchivePagePayLoad
  bulkUnarchivePages(parentPageId: Long, pageIDs: [Long], includeChildren: [Boolean]): BulkArchivePagePayLoad
  createOrUpdateArchivePageNote(pageId: Long!, archiveNote: String!): String
  requestAccessExco: Boolean!
  clearRestrictionsForFree(contentId: ID!): ContentRestrictionsPageResponse!
  addDefaultExCoSpacePermissions(spacePermissionsInput: AddDefaultExCoSpacePermissionsInput!): AddDefaultExCoSpacePermissionsPayload!
  copyDefaultSpacePermissions(spaceKey: String!): CopySpacePermissionsPayload!
  copySpacePermissions(sourceSpaceKey: String!, targetSpaceKey: String!, shouldIncludeExCo: Boolean = false): CopySpacePermissionsPayload!
  openUpSpacePermissions(spaceKey: String!): Boolean!
  removeGroupSpacePermissions(spacePermissionsInput: RemoveGroupSpacePermissionsInput!): RemoveSpacePermissionsPayload!
  removeUserSpacePermissions(spacePermissionsInput: RemoveUserSpacePermissionsInput!): RemoveSpacePermissionsPayload!
  updateUserPreferences(userPreferences: UserPreferencesInput!): UserPreferences!
  unwatchContent(watchContentInput: WatchContentInput!): WatchContentPayload
  watchContent(watchContentInput: WatchContentInput!): WatchContentPayload
  unwatchBlogs(watchSpaceInput: WatchSpaceInput!): WatchSpacePayload
  unwatchSpace(watchSpaceInput: WatchSpaceInput!): WatchSpacePayload
  watchBlogs(watchSpaceInput: WatchSpaceInput!): WatchSpacePayload
  watchSpace(watchSpaceInput: WatchSpaceInput!): WatchSpacePayload
  updatePushNotificationCustomSettings(customSettings: PushNotificationCustomSettingsInput!): ConfluencePushNotificationSettings!
  updatePushNotificationGroupSetting(group: PushNotificationGroupInputType!): ConfluencePushNotificationSettings!
  templateMigration(spaceKey: String!): TemplateMigration
  deleteContent(contentId: ID!, action: ContentDeleteActionType!): DeleteContentResponsePayload!
  createSpace(input: CreateSpaceInput!): Space!
  bulkUpdateMainSpaceSidebarLinks(spaceKey: String!, input: [BulkUpdateMainSpaceSidebarLinksInput]!): [SpaceSidebarLink]!
  likeContent(input: LikeContentInput!): LikeContentPayload!
  unlikeContent(input: LikeContentInput!): LikeContentPayload!
  markFeatureDiscovered(pluginKey: String!, featureKey: String!): FeatureDiscoveryPayload
  shareResource(shareResourceInput: ShareResourceInput!): ShareResourcePayload
  resolveInlineComment(commentId: ID!, resolved: Boolean!, dangling: Boolean!): ResolveInlineCommentPayload
  requestPageAccess(requestPageAccessInput: RequestPageAccessInput!): RequestPageAccessPayload
  newPage(input: NewPageInput!): NewPagePayload
  updatePage(input: UpdatePageInput!): UpdatePagePayload
  movePageBefore(input: MovePageAsSiblingInput!): MovePagePayload
  movePageAfter(input: MovePageAsSiblingInput!): MovePagePayload
  movePageAppend(input: MovePageAsChildInput!): MovePagePayload
  movePageTopLevel(input: MovePageTopLevelInput!): MovePagePayload
  updateRelation(input: UpdateRelationInput!): UpdateRelationPayload
  deleteRelation(input: DeleteRelationInput!): DeleteRelationPayload
  addLabels(input: AddLabelsInput!): AddLabelsPayload
  deleteLabel(input: DeleteLabelInput!): DeleteLabelPayload
  addReaction(contentId: String!, saveReactionInput: SaveReactionInput!): SaveReactionResponse!
  deleteReaction(contentId: String!, saveReactionInput: SaveReactionInput!): SaveReactionResponse!
  AUTHZenableSuperAdmin: SuperAdminPayload
  AUTHZdisableSuperAdmin: SuperAdminPayload
  createShareUrlPath(input: CreateShareUrlPathInput!): CreateShareUrlPathPayload
  revokeContentPermission(input: RevokeContentPermissionInput!): RevokeContentPermissionPayload
  grantSitePermission(input: GrantSitePermissionInput!): GrantSitePermissionPayload
  revokeSitePermission(input: RevokeSitePermissionInput!): RevokeSitePermissionPayload
}

input PageRestrictionInput {
  group: [PageGroupRestrictionInput!]
  user: [PageUserRestrictionInput!]
}

input SpaceViewsPersistence {
  spaceKey: String!
  persistenceOption: SpaceViewsPersistenceOption!
}

enum SitePermissionType {
  INTERNAL
  EXTERNAL
  JSD
  ANONYMOUS
  APP
}

type FollowingFeedGetUserConfig {
  spaces: [Space]
  users: [Person]
}

type SitePermission {
  anonymous: Anonymous
  groups(after: String, first: Int = 25, filterText: String): PaginatedGroupWithPermissions
  unlicensedUserWithPermissions: UnlicensedUserWithPermissions
  users(after: String, first: Int = 25, filterText: String): PaginatedUserWithPermissions
}

type WebSection {
  id: ID
  label: String
  items: [WebItem]!
  styleClass: String
}

type TapNumbers {
  key: String!
  value: [Number!]!
}

type ChildContentTypesAvailable {
  attachment: Boolean
  comment: Boolean
  page: Boolean
  blogpost: Boolean
}

enum ConfluenceContentSortingParameter {
  LAST_MODIFIED_DATE
  TITLE
}

type MenusLookAndFeel {
  hoverOrFocus: [MapOfStringToString]
  color: String
}

type PaginatedContentListWithChild {
  links: LinksContextBase
  child: ConfluenceChildContent
  count: Int
  nodes: [Content]
  edges: [ContentEdge]
  pageInfo: PageInfo
}

type PaginatedContentTemplateList {
  links: LinksContextBase
  count: Int
  nodes: [ContentTemplate]
  edges: [ContentTemplateEdge]
  pageInfo: PageInfo
}

type PaginatedTemplateBodyList {
  links: LinksContextBase
  count: Int
  nodes: [TemplateBody]
  edges: [TemplateBodyEdge]
  pageInfo: PageInfo
}

type MapOfStringToString {
  key: String
  value: String
}

type ArchivalRecommendationEdge {
  node: ArchivalRecommendation
  cursor: String
}

type EmbeddedContent {
  links: LinksContextBase
  entityType: String
  entityId: Long
  entity: Content
}

type Tenant {
  cloudId: ID!
  shard: String!
  environment: Environment!
  activationId: String
  editions: ConfluenceEditions
}

type XpsPageInfo {
  hasNextPage: Boolean!
  nextPageToken: String
}

type FeatureFlagInfo {
  hasNextPage: Boolean!
}

type ContentPermissionsPayload {
  status: Boolean!
}

type BordersAndDividersLookAndFeel {
  color: String
}

type MacroBody {
  representation: String
  value: String
}

type PageActivityEventCreatedPage implements PageActivityEvent {
  action: PageActivityAction!
  actionSubject: PageActivityActionSubject!
  groupSize: Int!
  pageVersion: Int!
  timestamp: String!
  user: AtlassianUser!
}

type Comment {
  ancestors: [Comment]!
  author: Person!
  body(representation: DocumentRepresentation = HTML): DocumentBody!
  container: Content!
  contentStatus: String!
  createdAt: Date!
  excerpt: String!
  id: ID!
  isInlineComment: Boolean!
  isLikedByCurrentUser: Boolean!
  likeCount: Int!
  links: Map_LinkType_String!
  location: CommentLocation!
  parentId: ID
  permissions: CommentPermissions!
  replies(depth: Int = -1): [Comment]!
  spaceId: Long!
  version: Version!
}

type SpacePermission {
  links: LinksContextBase
  id: ID
  subjects: SubjectsByType
  operation: OperationCheckResult
  anonymousAccess: Boolean
  unlicensedAccess: Boolean
}

type UnlicensedUserWithPermissions {
  operations: [OperationCheckResult]
}

input InlineTasksInput {
  cid: ID!
  taskId: ID!
  status: TaskStatus!
  trigger: PageUpdateTrigger
}

enum SortOrder {
  ASC
  DESC
}

type Error {
  status: Int!
  message: String!
}

type MovePagePayload {
  page: Page
}

type PersonEdge {
  node: Person
  cursor: String
}

enum AccountType {
  ATLASSIAN
  APP
  CUSTOMER
  UNKNOWN
}

input ActivitiesArguments {
  accountIds: [ID!]
  cloudIds: [ID!]
  products: [ActivityProduct!]
  eventTypes: [ActivityEventType!]
  objectTypes: [ActivitiesObjectType!]
  transitions: [ActivityTransition!]
  containerIds: [ID!]
  earliestStart: String
  latestStart: String
}

enum FeedEventType {
  COMMENT
  CREATE
  EDIT
}

input LikeContentInput {
  contentId: ID!
}

enum ActivitiesFilterType {
  AND
  OR
}

type ScheduledPublishSummary {
  isScheduled: Boolean
  when: String
}

type FrontendResource {
  type: String
  url: String
  attributes: [MapOfStringToString]!
}

enum TeamCalendarDayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

type PaginatedSpacePermissionSubjectList {
  count: Int
  nodes: [SpacePermissionSubject]
  edges: [SpacePermissionSubjectEdge]
  pageInfo: PageInfo
  totalCount: Int!
  userCount: Int!
  groupCount: Int!
}

type SmartFeaturesUserResult {
  id: String!
  features: SmartUserFeatures!
}

enum PrincipalType {
  USER
  GROUP
}

type GroupWithRestrictionsEdge {
  node: GroupWithRestrictions
  cursor: String
}

type RecommendedPages {
  recommendedPages: [RecommendedPagesItem!]!
}

type PageEdge {
  node: Page
  cursor: String
}

type KeyValueHierarchyMap {
  key: String
  value: String
  fields: [KeyValueHierarchyMap]
}

type ConfluenceContentSearchResults {
  nodes: [ConfluenceSearchResult!]!
  totalCount: Int!
  pageInfo: XpsPageInfo!
  abTest: AbTest
}

enum SitePermissionOperationType {
  USE_CONFLUENCE
  LIMITED_USE_CONFLUENCE
  ADMINISTER_CONFLUENCE
  USE_PERSONALSPACE
  CREATE_SPACE
  READ_USERPROFILE
  CREATE_PROFILEATTACHMENT
  ADMINISTER_SYSTEM
  UPDATE_USERSTATUS
  EXTERNAL_COLLABORATOR
}

interface Node {
  id: ID!
}

union MediaAttachmentOrError = MediaAttachment | MediaAttachmentError

type LookAndFeelSettings {
  selected: String
  global: LookAndFeel
  theme: LookAndFeel
  custom: LookAndFeel
}

type EditUpdate implements AllUpdatesFeedEvent {
  datetime: String!
  type: AllUpdatesFeedEventType!
  version: Int!
  user: Person!
}

type OnboardingState {
  key: String!
  value: String
}

type History {
  links: LinksContextSelfBase
  previousVersion: Version
  nextVersion: Version
  lastUpdated: Version
  latest: Boolean
  createdBy: Person
  createdDate: String
  contributors: Contributors
}

input LabelInput {
  name: String!
  prefix: String!
}

input LocalStorageInput {
  stringValues: [LocalStorageStringPairInput]
  booleanValues: [LocalStorageBooleanPairInput]
}

input MediaAttachmentInput {
  file: MediaFile!
  minorEdit: Boolean
}

enum ContentAccessType {
  EVERYONE_CAN_EDIT
  EVERYONE_CAN_VIEW
  EVERYONE_NO_ACCESS
}

type ReactedUsersResponse {
  ari: String!
  containerAri: String!
  count: Int!
  emojiId: String!
  reacted: Boolean!
  users: [User]!
}

enum SpaceDumpPageRestrictionType {
  VIEW
  EDIT
  SHARE
}

type PaginatedUserWithRestrictions {
  links: LinksContextBase
  count: Int
  nodes: [UserWithRestrictions]
  edges: [UserWithRestrictionsEdge]
  pageInfo: PageInfo
}

input ReactedUsersInput {
  contentType: GraphQLReactionContentType!
  containerId: String!
  containerType: ContainerType!
  emojiId: String!
}

type LayerScreenLookAndFeel {
  background: String
  backgroundColor: String
  backgroundImage: String
  backgroundPosition: String
  backgroundSize: String
  backgroundRepeat: String
  backgroundOrigin: String
  backgroundClip: String
  backgroundAttachment: String
  backgroundBlendMode: String
  width: String
  height: String
}

type LikeEntityEdge {
  node: LikeEntity
  cursor: String
}

type PaginatedArchivalRecommendationList {
  links: LinksContextBase
  count: Int
  nodes: [ArchivalRecommendation]
  edges: [ArchivalRecommendationEdge]
  pageInfo: PageInfo
}

type ContentCreationMetadata {
  space: Space!
  parent: Content
  currentUserPermissions: PermissionMetadata!
}

input BulkUpdateMainSpaceSidebarLinksInput {
  id: ID
  type: SpaceSidebarLinkType
  hidden: Boolean!
  linkIdentifier: String
}

enum PageUpdateTrigger {
  PERSONAL_TASKLIST
  VIEW_PAGE
  EDIT_PAGE
  REVERT
  DISCARD_CHANGES
  SPACE_CREATE
  PAGE_RENAME
  LINK_REFACTORING
  CREATE_PAGE
  UNKNOWN
}

type ContentRestriction {
  content: Content
  links: LinksContextSelfBase
  operation: String
  restrictions: SubjectsByType
}

type SubjectsByType {
  group(start: Int, limit: Int = 200): PaginatedGroupList
  groupWithRestrictions(start: Int, limit: Int = 200): PaginatedGroupWithRestrictions
  links: LinksContextBase
  user(start: Int, limit: Int = 200): PaginatedUserList
  userWithRestrictions(start: Int, limit: Int = 200): PaginatedUserWithRestrictions
}

type SpaceSidebarLinks {
  advanced: [SpaceSidebarLink]
  main(includeHidden: Boolean): [SpaceSidebarLink]
  quick: [SpaceSidebarLink]
}

type InlineCommentResolveProperties {
  resolved: Boolean!
  resolvedTime: Long
  resolvedFriendlyDate: String
  resolvedUser: String
  resolvedByDangling: Boolean!
}

enum InspectPermissions {
  VIEW
  EDIT
  COMMENT
}

type PaginatedPopularFeed {
  nodes: [PopularFeedItem!]!
  pageInfo: FeedPageInfo!
}

type FrontendResourceRenderResponse {
  resourceList: [FrontendResource!]!
}

type PopularSpaceFeedPage {
  page: [PopularFeedItem!]!
}

type TemplateInfoEdge {
  node: TemplateInfo
  cursor: String
}

type QuickReload {
  comments: [QuickReloadComment!]!
  editorForPage: User
  time: Long!
}

input UpdateCommentInput {
  commentId: ID!
  version: Int
  commentBody: CommentBody!
}

type LinksContextSelfBase {
  context: String
  self: String
  base: String
}

type Group {
  permissionType: SitePermissionType
  links: LinksContextSelfBase
  name: String
  id: String
}

type PaginatedSpaceDumpPageList {
  count: Int
  nodes: [SpaceDumpPage]
  edges: [SpaceDumpPageEdge]
  pageInfo: PageInfo
}

type ReactionsSummaryResponse {
  ari: String!
  containerAri: String!
  reactionsCount: Int!
  reactionsSummaryForEmoji: [ReactionsSummaryForEmoji]!
}

enum GraphQLDateFormat {
  MILLIS
  GLOBAL
  USER
  USER_FRIENDLY
}

input UnlicensedUserWithPermissionsInput {
  operations: [OperationCheckResultInput]!
}

input MarkAttribute {
  key: String!
  value: String!
}

type UserWithRestrictionsEdge {
  node: UserWithRestrictions
  cursor: String
}

type SubjectUserOrGroup {
  displayName: String
  id: String
  type: String
  user: UserWithRestrictions
  group: GroupWithRestrictions
  permissions: [ContentPermissionType]!
}

type PaginatedUserList {
  links: LinksContextBase
  count: Int
  nodes: [User]
  edges: [UserEdge]
  pageInfo: PageInfo
}

type HomeWidget {
  state: HomeWidgetState!
  id: ID!
}

input SpacePagesDisplayView {
  spaceKey: String!
  spacePagesPersistenceOption: PagesDisplayPersistenceOption!
}

enum RelevantUserFilter {
  collaborators
}

type PageRestriction {
  group: [PageGroupRestriction!]
  user: [PageUserRestriction!]
}

type ContentPermissions {
  contentAccess: ContentAccessType!
  contentPermissionsHash: String!
  currentUser: SubjectUserOrGroup!
  subjectsWithEffectiveContentPermissions(after: String, first: Int = 100): PaginatedSubjectUserOrGroupList!
  subjectsWithPermissions(after: String, first: Int = 100): PaginatedSubjectUserOrGroupList!
}

type LikesResponse {
  count: Int
  nodes: [LikeEntity]
  edges: [LikeEntityEdge]
  pageInfo: PageInfo
  currentUserLikes: Boolean
  followees(limit: Int = 3): [User]!
}

type RelevantSpaceUsersWrapper {
  id: String
  users: [Person]
}

input RemoveGroupSpacePermissionsInput {
  groupNames: [String]!
  spaceKey: String!
}

enum PageActivityAction {
  created
  updated
}

type TemplateBodyEdge {
  node: TemplateBody
  cursor: String
}

type KnownUser implements Person {
  permissionType: SitePermissionType
  links: LinksContextSelfBase
  type: String
  profilePicture: Icon
  displayName: String
  operations: [OperationCheckResult]
  username: String
  userKey: String
  accountId: String
  accountType: String
  email: String
  publicName: String
  personalSpace: Space
}

type GlobalSpaceIdentifier {
  spaceIdentifier: String
}

type SiteConfiguration {
  productAdmins(offset: Int, after: String, first: Int = 25): PaginatedPersonList!
  customSiteLogo: Boolean!
  newCustomer: Boolean!
  showSiteTitle: Boolean!
  siteFaviconUrl: String!
  siteLogoUrl: String!
  siteTitle: String!
  tenantId: ID
}

type SearchResult {
  links: LinksContextBase
  entityType: String
  title: String
  excerpt: String
  url: String
  resultParentContainer: ContainerSummary
  resultGlobalContainer: ContainerSummary
  breadcrumbs: [Breadcrumb]!
  iconCssClass: String
  lastModified: String
  friendlyLastModified: String
  score: Float
  content: Content
  user: User
  space: Space
}

type ActivitiesTransitionedEvent {
  from: String
  to: String
}

type CopySpacePermissionsPayload {
  status: Boolean!
}

input RevokeSitePermissionInput {
  cloudId: ID!
}

type PageActivityEventUpdatedPage implements PageActivityEvent {
  action: PageActivityAction!
  actionSubject: PageActivityActionSubject!
  groupSize: Int!
  pageVersion: Int!
  timestamp: String!
  user: AtlassianUser!
}

enum ContentRepresentation {
  RAW
  STORAGE
  EDITOR
  EDITOR2
  ATLAS_DOC_FORMAT
  VIEW
  EXPORT_VIEW
  WIKI
  PLAIN
  STYLED_VIEW
}

type SpaceDumpPageEdge {
  node: SpaceDumpPage
  cursor: String
}

enum ContentDeleteActionType {
  MOVE_TO_TRASH
  PURGE_FROM_TRASH
  DELETE_DRAFT
}

enum FeedType {
  FOLLOWING
  POPULAR
}

type PTPageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type ContentMediaSession {
  collection: String!
  configuration: MediaConfiguration!
  downloadToken: MediaToken!
  mediaPickerUserToken: MediaPickerUserToken!
  token: MediaToken!
}

type ConfluencePushNotificationSettings {
  id: ID!
  group: PushNotificationSettingGroup!
  customSettings: PushNotificationCustomSettings!
}

type HomeUserSettings {
  relevantFeedFilters: GraphQLRelevantFeedFilters!
  shouldShowActivityFeed: Boolean!
  shouldShowSpaces: Boolean!
}

type PageActivityPageInfo {
  endCursor: String!
  hasNextPage: Boolean!
}

type Label {
  prefix: String
  name: String
  id: ID
  label: String
}

type Page {
  children(offset: Int, after: String, first: Int = 25): PaginatedPageList
  hasInheritedRestrictions: Boolean!
  hasRestrictions: Boolean!
  lastUpdatedDate(format: GraphQLDateFormat): Date
  properties(key: String, keys: [String], start: Int, limit: Int = 10): PaginatedJsonContentPropertyList
  ancestors: [Page]!
  blank: Boolean
  followingSiblings(offset: Int, after: String, first: Int = 25): PaginatedPageList
  hasChildren: Boolean
  id: ID
  links: Map_LinkType_String
  nearestAncestors(offset: Int, after: String, first: Int = 5): PaginatedPageList
  previousSiblings(offset: Int, after: String, first: Int = 25): PaginatedPageList
  status: GraphQLPageStatus
  title: String
  mediaSession: PageMediaSession
}

type PageMediaSession {
  collection: String!
  token: MediaToken!
  configuration: MediaConfiguration!
}

type LinksDownloadEdituiWebuiContextSelfTinyuiCollectionBase {
  download: String
  editui: String
  webui: String
  context: String
  self: String
  tinyui: String
  collection: String
  base: String
}

type SpaceUserMetadata {
  isAdmin: Boolean!
  isFavourited: Boolean!
  isWatched: Boolean!
  isWatchingBlogs: Boolean!
  lastVisitedDate(format: GraphQLDateFormat): Date
}

type PaginatedStreamItemList {
  count: Int
  nodes: [StreamItem]
  edges: [StreamItemEdge]
  pageInfo: PageInfo
}

type ContentAnalyticsPageViewInfo {
  views: Int!
  lastVersionViewed: Int!
  lastViewedAt: String!
  user: AtlassianUser!
}

type ExternalCollaboratorFeature {
  isEntitled: Boolean!
}

enum GraphQLReactionContentType {
  PAGE
  BLOGPOST
  COMMENT
}

type ContentRestrictions {
  move: ContentRestriction
  read: ContentRestriction
  restore: ContentRestriction
  use: ContentRestriction
  purge_version: ContentRestriction
  update: ContentRestriction
  restrict_content: ContentRestriction
  purge: ContentRestriction
  archive: ContentRestriction
  delete: ContentRestriction
  create_space: ContentRestriction
  administer: ContentRestriction
  create: ContentRestriction
  copy: ContentRestriction
  export: ContentRestriction
}

type PaginatedSnippetList {
  count: Int
  nodes: [Snippet]
  edges: [SnippetEdge]
  pageInfo: PageInfo
}

type AllUpdatesFeedItem {
  lastUpdate: AllUpdatesFeedEvent!
  content: Content!
}

enum BodyFormatType {
  ATLAS_DOC_FORMAT
  EDITOR
  VIEW
  EXPORT_VIEW
  STYLED_VIEW
  STORAGE
  EDITOR2
  ANONYMOUS_EXPORT_VIEW
}

type PaginatedUserWithPermissions {
  count: Int
  nodes: [User]
  edges: [UserEdge]
  pageInfo: PageInfo
}

type PTPaginatedPageList {
  count: Int
  edges: [PTPageEdge]
  nodes: [PTPage]
  pageInfo: PTPageInfo
}

type BulkArchivePagePayLoad {
  taskId: String
  status: Boolean!
}

type RelevantSpacesWrapper {
  space: RelevantSpaceUsersWrapper
}

enum PageStatusInput {
  DRAFT
  CURRENT
}

input BatchedInlineTasksInput {
  contentId: ID!
  tasks: [InlineTask]!
  trigger: PageUpdateTrigger
}

type SpaceSettings {
  customHeaderAndFooter: SpaceSettingsMetadata!
  links: LinksContextSelfBase
  routeOverrideEnabled: Boolean
  editor: EditorVersionsMetadataDto
}

"""Long type"""
scalar Long

type WebResourceDependencies {
  links: LinksContextBase
  keys: [String]!
  contexts: [String]!
  uris: WebResourceUris
  tags: WebResourceTags
  superbatch: SuperBatchWebResources
}

type PageGroupRestriction {
  name: String!
}

type FeedEventEdit implements FeedEvent {
  datetime: String!
  groupSize: Int!
  type: FeedEventType!
  version: Int!
  user: Person!
}

type AtlassianUserGroup {
  value: String @deprecated(reason: "This type is no longer used")
  displayName: String @deprecated(reason: "This type is no longer used")
}

type WorkboxCount {
  count: Int
  timeout: Int
  maxTimeout: Int
}

input ConfluenceContentSortField {
  field: ConfluenceContentSortingParameter!
  key: String
  order: SortOrder!
}

type SearchFieldLookAndFeel {
  backgroundColor: String
  color: String
}

enum ShareType {
  SHARE_PAGE
  INVITE_TO_EDIT
}

input CreateInlineCommentInput {
  containerId: ID!
  parentCommentId: ID
  commentBody: CommentBody!
  numMatches: Int!
  matchIndex: Int!
  originalSelection: String!
  createdFrom: CommentCreationLocation!
  lastFetchTimeMillis: Long!
  step: Step
}

type CollaborationGraphRecommendationResult {
  id: ID!
  score: Float!
  content: Content
}

type SuperBatchWebResources {
  links: LinksContextBase
  uris: WebResourceUris
  tags: WebResourceTags
  metatags: String
}

enum SpaceSidebarLinkType {
  WEB_ITEM
  FORGE
  PINNED_BLOG_POST
  PINNED_PAGE
  EXTERNAL_LINK
  PINNED_USER_INFO
  PINNED_SPACE
  PINNED_ATTACHMENT
}

type ContainerLookAndFeel {
  background: String
  backgroundColor: String
  backgroundImage: String
  backgroundPosition: String
  backgroundSize: String
  backgroundRepeat: String
  backgroundOrigin: String
  backgroundClip: String
  backgroundAttachment: String
  backgroundBlendMode: String
  padding: String
  borderRadius: String
}

input Mark {
  type: String!
  attrs: [MarkAttribute]
}

input RequestPageAccessInput {
  pageId: String!
  accessType: AccessType!
}

type Anonymous implements Person {
  permissionType: SitePermissionType
  links: LinksContextBase
  type: String
  profilePicture: Icon
  displayName: String
  operations: [OperationCheckResult]
}

type TemplateBody {
  id: String!
  body: ContentBody!
}

type TeamCalendarSettings {
  startDayOfWeek: TeamCalendarDayOfWeek!
}

input Step {
  from: Long!
  to: Long!
  mark: Mark!
}

input FollowUserInput {
  accountId: String!
}

input AddDefaultExCoSpacePermissionsInput {
  spaceKeys: [String]!
  groupNames: [String]
  accountIds: [String]
}

type TapString {
  key: String!
  value: String!
}

type PaginatedContentList {
  links: LinksContextBase
  count: Int
  nodes: [Content]
  edges: [ContentEdge]
  pageInfo: PageInfo
}

type ContentMetadata_SimpleContentMetadataProvider_simple {
  adfExtensions: [String]
  hasComment: Boolean
  hasInlineComment: Boolean
  isFabric: Boolean
}

enum CommentType {
  FOOTER
  INLINE
  RESOLVED
  UNRESOLVED
}

type SharedContent {
  content: Content
}

input UpdateContentPermissionsInput {
  principalId: ID!
  principalType: PrincipalType!
  permissions: [ContentPermissionType]!
}

type MediaPickerUserToken {
  id: String
  token: String
}

type DiscoveredFeature {
  pluginKey: String
  featureKey: String
  userKey: String
  date: String
}

type SmartSpaceFeatures {
  top_templates: [TopTemplateItem]
}

type SpaceDumpPageRestriction {
  groups: [String]!
  pageId: String
  type: SpaceDumpPageRestrictionType
  users: [String]!
}

type FeatureFlagEdge {
  cursor: String!
  node: FeatureFlag!
}

type CollaborationGraphRecommendationResults {
  nodes: [CollaborationGraphRecommendationResult!]!
  totalCount: Int!
}

type MetaTags {
  metaTags: [String!]!
}

enum OutputDeviceType {
  DESKTOP
  EMAIL
  MOBILE
}

type TapStrings {
  key: String!
  value: [String!]!
}

input OperationCheckResultInput {
  operation: String!
  targetType: String!
}

type ConfluenceWorkbox {
  status: ConfluenceWorkbox_status
}

input InlineTask {
  taskId: ID!
  status: TaskStatus!
}

interface CommentLocation {
  type: String!
}

enum AllUpdatesFeedEventType {
  COMMENT
  CREATE
  EDIT
}

input DeleteLabelInput {
  contentId: ID!
  label: String!
}

type RecommendedFeedUserConfig {
  recommendedSpaces: [RecommendedSpaceItem!]!
  recommendedPeople: [RecommendedPeopleItem!]!
}

type HtmlDocument {
  html: String
  webResourceDependencies: WebResourceDependencies
}

input PageGroupRestrictionInput {
  id: ID
  name: String!
}

type FeedEventComment implements FeedEvent {
  datetime: String!
  groupSize: Int!
  type: FeedEventType!
  user: Person!
  comment: Comment
}

input AddLabelsInput {
  contentId: ID!
  labels: [LabelInput!]!
}

type AddLabelsPayload {
  labels: PaginatedLabelList!
}

type MediaAttachment {
  id: ID!
  html: String!
}

type StreamCountItem {
  count: Int
  cssClass: String
}

type GraphQLRelevantFeedFilters {
  relevantFeedSpacesFilter: [Long]!
  relevantFeedUsersFilter: [String]!
}

type PaginatedSpaceList {
  links: LinksContextBase
  count: Int
  nodes: [Space]
  edges: [SpaceEdge]
  pageInfo: PageInfo
}

type RecommendedPagesItem {
  strategy: [String!]!
  content: Content!
}

input ConfluenceSearchFilters {
  spaces: ConfluenceSearchSpaceFilter
  contributors: ConfluenceSearchContributorFilter
  labels: [ConfluenceSearchLabelFilter!]
  lastModified: ConfluenceSearchLastModifiedFilter
  titleMatchOnly: ConfluenceSearchTitleMatchOnlyFilter
}

enum FeedItemSourceType {
  PERSON
  SPACE
}

type IncomingLinksCount {
  count: Int
}

type WebPanel {
  moduleKey: String
  completeKey: String
  html: String
  location: String
  label: String
  weight: Int
  name: String
}

enum PushNotificationSettingGroup {
  STANDARD
  QUIET
  CUSTOM
  NONE
}

type PaginatedCommentList {
  count: Int
  nodes: [Comment]
  edges: [CommentEdge]
  pageInfo: PageInfo
  totalCount: Int
}

type TopRelevantUsers {
  nodes: [RelevantSpacesWrapper]
}

enum GraphQLPageStatus {
  CURRENT
  TRASHED
  HISTORICAL
  DRAFT
}

type SaveReactionResponse {
  ari: String!
  containerAri: String!
  emojiId: String!
}

enum AnalyticsCommentType {
  inline
  page
}

enum RelevantUsersEventName {
  page_viewed
  page_created
  page_updated
  page_liked
  comment_created
}

type SiteLevelPermission {
  cloudId: String!
  permissions: [String!]!
}

enum DocumentRepresentation {
  HTML
  VIEW
  STORAGE
  ATLAS_DOC_FORMAT
}

enum PageCardInPageTreeHoverPreference {
  NO_OPTION_SELECTED
  SHOW_PAGECARD
  NO_SHOW_PAGECARD
}

enum FeatureFlagPrefix {
  FABRIC
  FRONTEND
}

type GraphQLConfluenceUserRoles {
  canBeSuperAdmin: Boolean!
  canUseConfluence: Boolean!
  isSuperAdmin: Boolean!
}

input ReplyInlineCommentInput {
  containerId: ID!
  parentCommentId: ID!
  commentBody: CommentBody!
}

type MapOfStringToInteger {
  key: String
  value: Int
}

type SpaceDescriptions {
  editor: FormattedBody
  atlas_doc_format: FormattedBody
  view: FormattedBody
  export_view: FormattedBody
  plain: FormattedBody
  wiki: FormattedBody
  styled_view: FormattedBody
  raw: FormattedBody
  dynamic: FormattedBody
  storage: FormattedBody
  editor2: FormattedBody
}

type ContentMetadata_CommentsMetadataProvider_comments {
  commentsCount: Int
}

type ActivitiesEvent implements Node {
  id: ID!
  timestamp: String
  eventType: ActivityEventType
  user: ActivitiesUser
  extension: ActivitiesEventExtension
}

type PaginatedSubjectUserOrGroupList {
  count: Int
  nodes: [SubjectUserOrGroup]
  edges: [SubjectUserOrGroupEdge]
  pageInfo: PageInfo
}

type UserPreferences {
  favouriteTemplateEntityIds: [String]!
  feedRecommendedUserSettingsDismissTimestamp: String!
  feedType: FeedType
  homePagesDisplayView: PagesDisplayPersistenceOption!
  homeWidgets: [HomeWidget!]!
  keyboardShortcutDisabled: Boolean!
  nextGenFeedOptInStatus: String!
  recentFilter: RecentFilter!
  searchExperimentOptInStatus: String!
  shouldShowCardOnPageTreeHover: PageCardInPageTreeHoverPreference!
  spacePagesDisplayView(spaceKey: String!): PagesDisplayPersistenceOption!
  spaceViewsPersistence(spaceKey: String!): SpaceViewsPersistenceOption!
  topNavigationOptedOut: Boolean
  userSpacesNotifiedChangeBoardingOfExternalCollab: [String]!
  userSpacesNotifiedOfExternalCollab: [String]!
}

type SpaUnfriendlyMacro {
  links: LinksContextBase
  name: String
}

type SuperAdminPayload {
  user: AtlassianUser
}

type FooterComment implements CommentLocation {
  type: String!
}

type SmartFeaturesResponse {
  errors: [SmartFeaturesErrorResponse]
  results: [SmartFeaturesResultResponse]
}

type ActivitiesJiraIssue {
  issueKey: String
}

input ShareResourceInput {
  users: [String]!
  emails: [String]!
  groups: [String]!
  groupIds: [String]
  entityId: String!
  contextualPageId: String!
  note: String!
  shareType: ShareType!
  entityType: String!
  atlOrigin: String!
  isShareEmailExperiment: Boolean!
}

type SpaceSidebarLink {
  id: ID!
  webItemKey: String
  webItemCompleteKey: String
  title: String
  url: String
  position: Int!
  styleClass: String
  icon: Icon
  iconClass: String
  hidden: Boolean!
  canHide: Boolean
  tooltip: String
  urlWithoutContextPath: String
  type: SpaceSidebarLinkType!
  linkIdentifier: String
}

type PaginatedJsonContentPropertyList {
  links: LinksContextBase
  count: Int
  nodes: [JsonContentProperty]
  edges: [JsonContentPropertyEdge]
  pageInfo: PageInfo
}

type TemplateCategory {
  id: String
  name: String
}

type ActivityEdge {
  cursor: String!
  node: ActivitiesItem
}

type SmartFeaturesPageResult {
  id: String!
  features: SmartPageFeatures!
}

type ScreenLookAndFeel {
  background: String
  backgroundColor: String
  backgroundImage: String
  backgroundPosition: String
  backgroundSize: String
  backgroundRepeat: String
  backgroundOrigin: String
  backgroundClip: String
  backgroundAttachment: String
  backgroundBlendMode: String
  layer: LayerScreenLookAndFeel
  gutterTop: String
  gutterRight: String
  gutterBottom: String
  gutterLeft: String
}

enum ContentAccessInputType {
  EVERYONE_CAN_EDIT
  EVERYONE_CAN_VIEW
  EVERYONE_NO_ACCESS
  PRIVATE
}

enum ActivityEventType {
  ASSIGNED
  UNASSIGNED
  VIEWED
  COMMENTED
  UPDATED
  CREATED
  LIKED
  TRANSITIONED
  PUBLISHED
  EDITED
}

input FollowingFeedUserConfigInput {
  spaceIds: [Long]
  accountIds: [ID]
  followSpaces: [Long]
  followUsers: [ID]
  unfollowSpaces: [Long]
  unfollowUsers: [ID]
}

input BulkArchivePagesInput {
  pageID: Long!
  isSelected: Boolean
  areChildrenIncluded: Boolean
  excludedBranchRootPageIDs: [Long]
  archiveNote: String
}

type Confluence_cqlMetaData {
  cqlContentTypes(category: String = "content"): [CQLDisplayableType]!
}

type PTPageEdge {
  cursor: String!
  node: PTPage!
}

input RevokeContentPermissionInput {
  cloudId: ID!
  contentId: ID!
}

type GraphQLGroupCountsResult {
  groupCounts: [MapOfStringToInteger]!
}

type ReactionsSummaryForEmoji {
  emojiId: String!
  count: Int!
  reacted: Boolean!
  id: String!
}

type ActivitiesConnection {
  edges: [ActivityEdge]
  nodes: [ActivitiesItem!]!
  pageInfo: ActivityPageInfo!
}

input ConfluenceSearchLabelFilter {
  name: String!
  namespace: LabelNamespaceEnum = GLOBAL
}

type TemplateMediaToken {
  duration: Int
  value: String
}

type LocalStorageStringPair {
  key: String!
  value: String
}

interface FeedEvent {
  datetime: String!
  groupSize: Int!
  type: FeedEventType!
}

type PageRestrictions {
  read: PageRestriction
  update: PageRestriction
}

type ConfluenceChildContent {
  attachment(offset: Int, after: String, first: Int = 25): PaginatedContentList! @deprecated(reason: "use content.[nodes|edges].attachments")
  blogpost(offset: Int, after: String, first: Int = 25): PaginatedContentList! @deprecated(reason: "Query content by type='blogpost' and then use content.[nodes|edges]")
  comment(offset: Int, after: String, first: Int = 25, location: [String], depth: String = ""): PaginatedContentList! @deprecated(reason: "use content.[nodes|edges].comments or the top level comments query")
  page(offset: Int, after: String, first: Int = 25): PaginatedContentList! @deprecated(reason: "use content.[nodes|edges]")
}

type LocalStorageBooleanPair {
  key: String!
  value: Boolean
}

type SpaceMetadata {
  totalCommenters: Long!
  totalPageUpdatesSinceLast7Days: Long!
  totalWatchers: Long!
  totalCurrentPages: Long!
  recentWatchers: PaginatedUserList
  recentCommenters: PaginatedUserList
  labels: PaginatedLabelList
}

type WatchSpacePayload {
  space: Space!
}

type DeleteLabelPayload {
  contentId: ID!
  label: String!
}

type SmartFeaturesPageResultResponse implements SmartFeaturesResultResponse {
  entityType: String!
  result: [SmartFeaturesPageResult]
}

type EditorVersionsMetadataDto {
  default: String
  page: String
  blogpost: String
}

type SmartPageFeatures {
  commentsDaily: Float
  likesDaily: Float
  viewsDaily: Float
  commentsWeekly: Float
  likesWeekly: Float
  viewsWeekly: Float
  commentsMonthly: Float
  likesMonthly: Float
  viewsMonthly: Float
  commentsYearly: Float
  likesYearly: Float
  viewsYearly: Float
}

type NewPagePayload {
  restrictions: PageRestrictions
  page: Page
  content: Content!
}

type CommentUpdate implements AllUpdatesFeedEvent {
  datetime: String!
  type: AllUpdatesFeedEventType!
  user: Person!
  comment: Comment!
}

type FeatureFlag {
  id: ID!
  value: String!
  explanation: FeatureFlagExplanation
}

type Map_LinkType_String {
  download: String
  editui: String
  webui: String
  tinyui: String
}

input HomeWidgetInput {
  state: HomeWidgetState!
  id: ID!
}

type GroupWithRestrictions {
  permissionType: SitePermissionType
  links: LinksSelf
  name: String
  id: String
  hasSpaceViewPermission: Boolean
  hasSpaceEditPermission: Boolean
  group: Group
  restrictingContent: Content
}

input MovePageAsChildInput {
  pageId: ID!
  parentId: ID!
}

type SpaceHistory {
  links: LinksContextBase
  createdBy: Person
  createdDate: String
}

type TapNumber {
  key: String!
  value: Number!
}

type MediaAttachmentError {
  error: Error!
}

type SpacePermissionSubject {
  subjectKey: SubjectKey
  permissions: [SpacePermissionType]
}

type CurrentUserOperations {
  canFollow: Boolean
  followed: Boolean
}

input ConfluenceSearchTitleMatchOnlyFilter {
  titleMatchOnly: Boolean = false
}

type StreamItemEdge {
  node: StreamItem
  cursor: String
}

type HeaderLookAndFeel {
  backgroundColor: String
  button: ButtonLookAndFeel
  primaryNavigation: NavigationLookAndFeel
  secondaryNavigation: NavigationLookAndFeel
  search: SearchFieldLookAndFeel
}

type PaginatedTemplateCategoryList {
  links: LinksContextBase
  count: Int
  nodes: [TemplateCategory]
  edges: [TemplateCategoryEdge]
  pageInfo: PageInfo
}

type MyActivities {
  all(filters: [ActivitiesFilter!], first: Int, after: String): ActivitiesConnection
  workedOn(filters: [ActivitiesFilter!], first: Int, after: String): ActivitiesConnection
  viewed(filters: [ActivitiesFilter!], first: Int, after: String): ActivitiesConnection
  nodes(ids: [ID!]): [ActivitiesObject]
}

input SmartFeaturesInput {
  entityType: String!
  entityIds: [String!]!
  features: [String]
}

type SpacePermissions {
  subjectsWithPermissions(after: String, first: Int = 500, filterText: String): PaginatedSpacePermissionSubjectList!
}

type JsonContentProperty {
  links: LinksContextSelfBase
  id: String
  key: String
  value: String
  version: Version
  content: Content
}

input SaveReactionInput {
  contentType: GraphQLReactionContentType!
  containerId: String!
  containerType: ContainerType!
  emojiId: String!
}

type ContributionStatusSummary {
  status: String
  when: String
}

input ConfluenceSearchContributorFilter {
  accountIds: [ID!]!
}

type Content {
  archivedContentMetadata: ArchivedContentMetadata
  attachments(offset: Int, after: String, first: Int = 25): PaginatedContentList
  children(type: String = "page", offset: Int, after: String, first: Int = 25): PaginatedContentList
  comments(offset: Int, after: String, first: Int = 25, location: [String], depth: String = "", recentFirst: Boolean = false): PaginatedContentList
  archivableDescendantsCount: Long!
  hasInheritedRestriction(accountID: String!, permission: InspectPermissions!): Boolean!
  hasInheritedRestrictions: Boolean!
  hasRestriction(accountID: String!, permission: InspectPermissions!): Boolean!
  hasRestrictions: Boolean!
  hasViewRestrictions: Boolean!
  archiveNote: String
  blank: Boolean!
  excerpt(length: Int = 140): String!
  incomingLinks(after: String, first: Int = 50): PaginatedContentList
  outgoingLinks: OutgoingLinks
  currentUserIsWatching: Boolean!
  hasVisibleChildPages: Boolean!
  labels(prefix: [String], offset: Int, after: String, first: Int = 200): PaginatedLabelList
  properties(key: String, keys: [String], start: Int, limit: Int = 10): PaginatedJsonContentPropertyList
  visibleDescendantsCount: Long!
  mediaSession: ContentMediaSession!
  restrictions: ContentRestrictions
  dynamicMobileBody(imageLazyLoading: Boolean! = true, pagePropertiesReportMacroRenderAtServer: Boolean! = false): ContentBody
  mobileContentBody(imageLazyLoading: Boolean! = true, pagePropertiesReportMacroRenderAtServer: Boolean! = false): String
  likes(first: Long = 25, offset: Int, after: String): LikesResponse
  links: LinksDownloadEdituiWebuiContextSelfTinyuiCollectionBase
  id: ID
  type: String
  status: String
  title: String
  schedulePublishDate: String
  space: Space
  history: History
  version: Version
  ancestors: [Content]
  operations: [OperationCheckResult]
  childTypes: ChildContentTypesAvailable
  container: SpaceOrContent
  macroRenderedOutput: [MapOfStringToFormattedBody]
  body: ContentBodyPerRepresentation
  metadata: ContentMetadata!
  extensions: [KeyValueHierarchyMap]
  contentAnalyticsViews: ContentAnalyticsViews
  contentAnalyticsViewers: ContentAnalyticsViewers
  contentAnalyticsViewsByUser: ContentAnalyticsViewsByUser
  reactionsSummary(contentType: GraphQLReactionContentType!, containerId: ID!, containerType: ContainerType!): ReactionsSummaryResponse
  reactionsSummaryList(ids: [ReactionsId]!): [ReactionsSummaryResponse]!
}

type PaginatedLabelList {
  links: LinksContextBase
  count: Int
  nodes: [Label]
  edges: [LabelEdge]
  pageInfo: PageInfo
}

enum ActivityProduct {
  JIRA
  JIRA_BUSINESS
  JIRA_SOFTWARE
  JIRA_OPS
  JIRA_SERVICE_DESK
  CONFLUENCE
}

type UserEdge {
  node: User
  cursor: String
}

enum Environment {
  DEVELOPMENT
  STAGING
  PRODUCTION
}

type GroupEdge {
  node: Group
  cursor: String
}

type SnippetEdge {
  node: Snippet
  cursor: String
}

interface ConfluenceSearchResult {
  id: ID!
  title: String!
  url: String!
  baseUrl: String!
  excerpt: String!
  containerTitle: String!
  containerDisplayUrl: String!
  score: Float!
}

input NewPageInput {
  space: SpaceInput!
  page: PageInput!
}

enum PushNotificationGroupInputType {
  STANDARD
  QUIET
  NONE
}

type ContentHistoryEdge {
  node: ContentHistory
  cursor: String
}

input LocalStorageStringPairInput {
  key: String!
  value: String
}

type User implements Person {
  permissionType: SitePermissionType
  type: String
  profilePicture: Icon
  displayName: String
  operations: [OperationCheckResult]
  username: String
  userKey: String
  accountId: String
  accountType: String
  email: String
  publicName: String
}

type PopularFeedItem {
  content: Content!
}

type CommentUserAction {
  id: String
  label: String
  tooltip: String
  url: String
  style: String
}

type ConfluenceSpaceSearchResult implements ConfluenceSearchResult {
  id: ID!
  title: String!
  url: String!
  baseUrl: String!
  excerpt: String!
  containerTitle: String!
  containerDisplayUrl: String!
  spaceKey: String!
  spaceIconPath: String!
  score: Float!
  node: Space!
  space: Space
}

type HtmlMeta {
  spaUnfriendlyMacros: [SpaUnfriendlyMacro!]!
  js: [String]!
  css: String!
  html: String!
}

interface PageActivityEvent {
  action: PageActivityAction!
  actionSubject: PageActivityActionSubject!
  timestamp: String!
}

input CreateSpaceInput {
  spaceKey: String!
  spaceName: String!
}

type CQLDisplayableType {
  type: String
  i18nKey: String
  label: String
}

enum SpacePermissionType {
  VIEW_SPACE
  REMOVE_OWN_CONTENT
  COMMENT
  CREATE_EDIT_PAGE
  ADMINISTER_SPACE
  REMOVE_PAGE
  REMOVE_COMMENT
  REMOVE_BLOG
  CREATE_ATTACHMENT
  REMOVE_ATTACHMENT
  EDIT_BLOG
  EXPORT_PAGE
  EXPORT_SPACE
  REMOVE_MAIL
  SET_PAGE_PERMISSIONS
  ARCHIVE_PAGE
}

input MovePageAsSiblingInput {
  pageId: ID!
  siblingId: ID!
}

type RecentlyViewedSummary {
  lastSeen: String
  friendlyLastSeen: String
}

enum RelevantUsersSortOrder {
  asc
  desc
}

type RemoveSpacePermissionsPayload {
  status: Boolean!
}

enum ContainerType {
  PAGE
  BLOGPOST
  SPACE
}

type SpaceSettingsMetadata {
  header: HtmlMeta!
  footer: HtmlMeta!
}

type ContentLookAndFeel {
  screen: ScreenLookAndFeel
  container: ContainerLookAndFeel
  header: ContainerLookAndFeel
  body: ContainerLookAndFeel
}

type RecommendedPeopleItem {
  score: Float!
  user: AtlassianUser
}

type SearchResultEdge {
  node: SearchResult
  cursor: String
}

type Date {
  value: String!
}

type TemplateInfo {
  links: LinksContextBase
  templateId: String
  contentBlueprintId: String
  blueprintModuleCompleteKey: String
  itemModuleCompleteKey: String
  templateType: String
  name: String
  description: String
  iconURL: String
  styleClass: String
  author: String
  link: String
  hasWizard: Boolean
  isNew: Boolean
  isPromoted: Boolean
  isFavourite: Boolean
  categoryIds: [String]!
  hasGlobalBlueprintContent: Boolean!
  recommendationRank: Int
}

input PushNotificationCustomSettingsInput {
  comment: Boolean!
  commentReply: Boolean!
  commentContentCreator: Boolean!
  mentionPage: Boolean!
  mentionBlogPost: Boolean!
  mentionComment: Boolean!
  share: Boolean!
  shareGroup: Boolean!
  taskAssign: Boolean!
  likePage: Boolean!
  likeBlogPost: Boolean!
  likeComment: Boolean!
  createPage: Boolean!
  createBlogPost: Boolean!
  editPage: Boolean!
  editBlogPost: Boolean!
}

type DeleteRelationPayload {
  targetKey: String!
  sourceKey: String!
  relationName: String!
}

type GroupWithPermissions {
  links: LinksSelf
  name: String
  id: String
  currentUserCanEdit: Boolean
  operations: [OperationCheckResult]
}

type PTPage {
  ancestors: [PTPage]
  children(after: String, first: Int = 25, offset: Int): PTPaginatedPageList
  followingSiblings(after: String, first: Int = 25, offset: Int): PTPaginatedPageList
  hasChildren: Boolean!
  hasInheritedRestrictions: Boolean!
  hasRestrictions: Boolean!
  id: ID!
  nearestAncestors(after: String, first: Int = 5, offset: Int): PTPaginatedPageList
  previousSiblings(after: String, first: Int = 25, offset: Int): PTPaginatedPageList
  mediaSession: PageMediaSession
  lastUpdatedDate(format: GraphQLDateFormat): Date
  properties(key: String, keys: [String], start: Int, limit: Int = 10): PaginatedJsonContentPropertyList
  blank: Boolean
  links: Map_LinkType_String
  status: GraphQLPageStatus
  title: String
}

type AtlassianUser {
  id: ID
  userName: String @deprecated(reason: "This is not being used in FE and it will not work as we have switched to Identity DataFetcher")
  displayName: String
  emails: [AtlassianUserEmail]
  groups: [AtlassianUserGroup] @deprecated(reason: "This will always be empty, use confluence.groups")
  isActive: Boolean
  title: String
  location: String
  companyName: String
  photos: [AtlassianUserPhoto]
  locale: String
  confluence: ConfluenceUser
}

type PaginatedTemplateInfoList {
  links: LinksContextBase
  count: Int
  nodes: [TemplateInfo]
  edges: [TemplateInfoEdge]
  pageInfo: PageInfo
}
