// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GoToItemBase Default After prop should only show on hover or active or focus 1`] = `
<ArrowRightCircleIcon
  primaryColor="currentColor"
  secondaryColor="inherit"
/>
`;

exports[`GoToItemBase Default After prop should show a spinner if the incoming view equals the 'goTo' prop of GoToItem 1`] = `
@keyframes animation-0 {
  to {
    -webkit-transform: rotate(360deg);
    -ms-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}

@keyframes animation-1 {
  from {
    -webkit-transform: rotate(50deg);
    -ms-transform: rotate(50deg);
    transform: rotate(50deg);
    opacity: 0;
    stroke-dashoffset: 60;
  }

  to {
    -webkit-transform: rotate(230deg);
    -ms-transform: rotate(230deg);
    transform: rotate(230deg);
    opacity: 1;
    stroke-dashoffset: 50;
  }
}

.emotion-1 {
  -webkit-transform-origin: center;
  -ms-transform-origin: center;
  transform-origin: center;
  -webkit-animation: animation-0 0.86s infinite;
  animation: animation-0 0.86s infinite;
  -webkit-animation-delay: 200ms;
  animation-delay: 200ms;
  -webkit-animation-timing-function: cubic-bezier(0.4,0.15,0.6,0.85);
  animation-timing-function: cubic-bezier(0.4,0.15,0.6,0.85);
  height: 16px;
  width: 16px;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  vertical-align: middle;
}

.emotion-0 {
  opacity: 0;
  -webkit-animation: animation-1 1s ease-in-out;
  animation: animation-1 1s ease-in-out;
  -webkit-animation-fill-mode: forwards;
  animation-fill-mode: forwards;
  -webkit-animation-delay: 200ms;
  animation-delay: 200ms;
  fill: none;
  stroke: var(--text-mediumEmphasis,#42526E);
  stroke-width: 1.5;
  stroke-linecap: round;
  stroke-dasharray: 60;
  stroke-dashoffset: inherit;
}

@media screen and (forced-colors:active) {
  .emotion-0 {
    -webkit-filter: grayscale(100%);
    filter: grayscale(100%);
    stroke: CanvasText;
  }
}

<ForwardRef(Spinner)
  delay={200}
  invertColor={true}
  size="small"
>
  <Consumer>
    <span
      className="emotion-1"
    >
      <svg
        className="emotion-0"
        height={16}
        viewBox="0 0 16 16"
        width={16}
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="8"
          cy="8"
          r="7"
        />
      </svg>
    </span>
  </Consumer>
</ForwardRef(Spinner)>
`;

exports[`GoToItemBase should render a ConnectedItem 1`] = `
.emotion-5 {
  width: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.emotion-3.emotion-3 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border: none;
  border-radius: 3px;
  box-sizing: border-box;
  color: inherit;
  cursor: pointer;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  font-size: inherit;
  height: 40px;
  outline: none;
  text-align: left;
  -webkit-text-decoration: none;
  text-decoration: none;
  width: 100%;
  padding-left: 12px;
  padding-right: 12px;
  background-color: #F4F5F7;
  fill: #F4F5F7;
}

.emotion-3.emotion-3:focus {
  box-shadow: 0 0 0 2px #4C9AFF inset;
}

.emotion-1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  overflow-x: hidden;
}

@media screen and (-ms-high-contrast:none) {
  .emotion-1 {
    font-family: -apple-system,BlinkMacSystemFont,'Segoe UI','Roboto','Oxygen','Ubuntu','Fira Sans','Droid Sans','Helvetica Neue',sans-serif;
  }
}

@supports (-ms-ime-align:auto) {
  .emotion-1 {
    font-family: -apple-system,BlinkMacSystemFont,'Segoe UI','Roboto','Oxygen','Ubuntu','Fira Sans','Droid Sans','Helvetica Neue',sans-serif;
  }
}

.emotion-0 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  line-height: 1.1428571428571428;
  color: #42526E;
}

@media screen and (-ms-high-contrast:none) {
  .emotion-0 {
    line-height: 1.2857142857142858;
  }
}

@supports (-ms-ime-align:auto) {
  .emotion-0 {
    line-height: 1.2857142857142858;
  }
}

@-moz-document url-prefix()  {
  .emotion-0 {
    line-height: 1.2857142857142858;
  }
}

.emotion-2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  margin-left: 16px;
  color: #42526E;
}

<GoToItem
  goTo="another-view"
  id="another-view-item"
  navigationViewController={
    Object {
      "setView": [MockFunction],
      "state": Object {},
    }
  }
  text="Another View"
>
  <ConnectedItem
    after={[Function]}
    afterGoTo="another-view"
    id="another-view-item"
    onClick={[Function]}
    spinnerDelay={200}
    text="Another View"
  >
    <WithAnalyticsContext(WithAnalyticsEvents(Item))
      after={[Function]}
      afterGoTo="another-view"
      id="another-view-item"
      onClick={[Function]}
      spinnerDelay={200}
      text="Another View"
    >
      <AnalyticsContext
        data={
          Object {
            "componentName": "item",
          }
        }
      >
        <WithAnalyticsEvents(Item)
          after={[Function]}
          afterGoTo="another-view"
          id="another-view-item"
          onClick={[Function]}
          spinnerDelay={200}
          text="Another View"
        >
          <Item
            after={[Function]}
            afterGoTo="another-view"
            createAnalyticsEvent={[Function]}
            id="another-view-item"
            isSelected={false}
            onClick={[Function]}
            spacing="default"
            spinnerDelay={200}
            styles={[Function]}
            text="Another View"
          >
            <InteractionStateManager>
              <div
                className="emotion-5"
                onBlur={[Function]}
                onFocus={[Function]}
                onMouseDown={[Function]}
                onMouseEnter={[Function]}
                onMouseLeave={[Function]}
                onMouseUp={[Function]}
                role="presentation"
              >
                <WithTheme(ItemPrimitive)
                  after={[Function]}
                  afterGoTo="another-view"
                  id="another-view-item"
                  isActive={false}
                  isFocused={false}
                  isHover={false}
                  isSelected={false}
                  onClick={[Function]}
                  spacing="default"
                  spinnerDelay={200}
                  styles={[Function]}
                  text="Another View"
                >
                  <Component
                    after={[Function]}
                    afterGoTo="another-view"
                    id="another-view-item"
                    isActive={false}
                    isFocused={false}
                    isHover={false}
                    isSelected={false}
                    onClick={[Function]}
                    spacing="default"
                    spinnerDelay={200}
                    styles={[Function]}
                    text="Another View"
                    theme={Object {}}
                  >
                    <ItemPrimitive
                      after={[Function]}
                      afterGoTo="another-view"
                      dataset={
                        Object {
                          "data-testid": "NavigationItem",
                        }
                      }
                      id="another-view-item"
                      isActive={false}
                      isDragging={false}
                      isFocused={false}
                      isHover={false}
                      isSelected={false}
                      onClick={[Function]}
                      spacing="default"
                      spinnerDelay={200}
                      styles={[Function]}
                      text="Another View"
                      theme={
                        Object {
                          "context": "container",
                          "mode": Object {
                            "contentNav": [Function],
                            "globalItem": [Function],
                            "globalNav": [Function],
                            "heading": [Function],
                            "item": [Function],
                            "section": [Function],
                            "separator": [Function],
                            "skeletonItem": [Function],
                          },
                        }
                      }
                    >
                      <ComponentSwitch
                        as="button"
                        className="emotion-3"
                        dataset={
                          Object {
                            "data-testid": "NavigationItem",
                          }
                        }
                        onClick={[Function]}
                      >
                        <button
                          className="emotion-3"
                          data-testid="NavigationItem"
                          onClick={[Function]}
                        >
                          <div
                            className="emotion-1"
                          >
                            <div
                              className="emotion-0"
                            >
                              Another View
                            </div>
                          </div>
                          <div
                            className="emotion-2"
                          >
                            <After
                              afterGoTo="another-view"
                              isActive={false}
                              isDragging={false}
                              isFocused={false}
                              isHover={false}
                              isSelected={false}
                              spacing="default"
                              spinnerDelay={200}
                            />
                          </div>
                        </button>
                      </ComponentSwitch>
                    </ItemPrimitive>
                  </Component>
                </WithTheme(ItemPrimitive)>
              </div>
            </InteractionStateManager>
          </Item>
        </WithAnalyticsEvents(Item)>
      </AnalyticsContext>
    </WithAnalyticsContext(WithAnalyticsEvents(Item))>
  </ConnectedItem>
</GoToItem>
`;
