import React from 'react';

import { fireEvent, render, wait } from '@testing-library/react';

import { TierFieldPickerTemplate } from './examples';

describe('TierFieldPicker', () => {
  it('should call the mutation onChange', async () => {
    const mutationFn = jest.fn();

    const resolvers = () => ({
      Mutation: {
        compass: () => ({ updateComponent: mutationFn }),
      },
    });

    const { findByText, getByText } = render(
      <TierFieldPickerTemplate resolvers={resolvers} />,
    );

    // find the control and click to open the dropdown
    const control = (await findByText(/Tier 4/i)) as HTMLElement;
    fireEvent.click(control);

    // click the option in the dropdown
    const option = getByText(/Tier 1/i) as HTMLElement;
    fireEvent.click(option);

    // The UI control updated
    await wait(() => expect(mutationFn).toHaveBeenCalledTimes(1));

    const variables = mutationFn.mock.calls[0][0];
    expect(variables.input).toEqual({
      // Id field is randomly generated by mock
      id: variables.input.id,
      fields: [
        {
          definition: 'compass:tier',
          value: {
            enum: {
              value: ['1'],
            },
          },
        },
      ],
    });
  });

  it('should update the UI when the tier is changed', async () => {
    const { findByText, getByText } = render(<TierFieldPickerTemplate />);

    // find (wait 1000ms) the control and click to open the dropdown
    const control = (await findByText(/Tier 4/i)) as HTMLElement;
    fireEvent.click(control);

    // click the option in the dropdown
    const option = getByText(/Tier 1/i) as HTMLElement;
    fireEvent.click(option);

    // The UI control updated
    await wait(() => expect(getByText(/Tier 1/i)).toBeInTheDocument());
  });
});
