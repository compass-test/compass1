// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ConfluenceSearchDialog /> doesn't render if there are no results in pre query 1`] = `""`;

exports[`<ConfluenceSearchDialog /> doesn't render pre query results if defaultSearchState is not enabled 1`] = `""`;

exports[`<ConfluenceSearchDialog /> matches snapshot 1`] = `
<Component>
  <Component>
    <_default
      fetchMoreFn={[Function]}
      isBelowTakeoverWidth={false}
      isPreQuery={true}
      libsAppsMore={
        Object {
          "cursor": null,
          "isLoading": false,
          "results": Array [],
        }
      }
      people={
        Object {
          "isLoading": true,
          "results": null,
        }
      }
      peopleTeams={
        Object {
          "isLoading": false,
          "results": Array [],
        }
      }
      query=""
      recentlyViewedComponents={
        Object {
          "components": Array [
            Object {
              "__typename": "CompassComponent",
              "id": "test-comp",
              "name": "microscope",
              "type": "APPLICATION",
            },
          ],
          "loading": false,
        }
      }
      recentlyViewedTeams={
        Object {
          "loading": false,
          "teams": Array [],
        }
      }
      services={
        Object {
          "cursor": null,
          "isLoading": false,
          "results": Array [],
        }
      }
      showFilters={false}
      teamNames={Object {}}
    />
  </Component>
</Component>
`;

exports[`<ConfluenceSearchDialog /> matches snapshot and does not render error when there are no results when searching 1`] = `
<Component>
  <Component>
    <_default
      fetchMoreFn={[Function]}
      isBelowTakeoverWidth={false}
      isPreQuery={false}
      libsAppsMore={
        Object {
          "cursor": null,
          "isLoading": false,
          "results": Array [],
        }
      }
      people={
        Object {
          "isLoading": true,
          "results": null,
        }
      }
      peopleTeams={
        Object {
          "isLoading": false,
          "results": Array [],
        }
      }
      query="some query"
      recentlyViewedComponents={
        Object {
          "components": Array [],
          "loading": false,
        }
      }
      recentlyViewedTeams={
        Object {
          "loading": false,
          "teams": Array [],
        }
      }
      services={
        Object {
          "cursor": null,
          "isLoading": false,
          "results": Array [],
        }
      }
      showFilters={true}
      teamNames={Object {}}
    />
  </Component>
</Component>
`;

exports[`<ConfluenceSearchDialog /> matches snapshot and renders error when there is an error when searching 1`] = `
<Component>
  <Component>
    <div
      style={
        Object {
          "width": "100%",
        }
      }
    >
      <InjectIntl(SearchError)
        onRetry={[Function]}
      />
    </div>
  </Component>
</Component>
`;
