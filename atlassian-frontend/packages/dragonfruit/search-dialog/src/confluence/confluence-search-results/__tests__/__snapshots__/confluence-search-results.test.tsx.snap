// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<SearchResults /> render with intermediate results matches snapshot for post query loading 1`] = `
<Fragment>
  <WithAnalyticsEvents(WrappedComponent)
    fetchMoreFn={[MockFunction]}
    isCollapsed={false}
    isLoading={true}
    items={
      Object {
        "isLoading": false,
        "results": null,
      }
    }
    libsAppsMore={
      Object {
        "cursor": null,
        "isLoading": false,
        "results": Array [],
      }
    }
    people={
      Object {
        "isLoading": true,
        "results": null,
      }
    }
    peopleTeams={
      Object {
        "isLoading": true,
        "results": null,
      }
    }
    query="query"
    screenType="cachedResults"
    services={
      Object {
        "cursor": null,
        "isLoading": false,
        "results": Array [
          Object {
            "component": Object {
              "description": "description-text-Lorem ipsum",
              "id": "id-123",
              "name": "name-123",
              "ownerId": "123",
            },
            "link": "https://link",
          },
        ],
      }
    }
    spaces={
      Object {
        "isLoading": false,
        "results": null,
      }
    }
    teamNames={Object {}}
  />
  <LoadingSpinner />
</Fragment>
`;

exports[`<SearchResults /> render with results matches snapshot for post query 1`] = `
<Fragment>
  <WithAnalyticsEvents(WrappedComponent)
    fetchMoreFn={[MockFunction]}
    isCollapsed={false}
    isLoading={false}
    items={
      Object {
        "isLoading": false,
        "results": null,
      }
    }
    libsAppsMore={
      Object {
        "cursor": null,
        "isLoading": false,
        "results": Array [],
      }
    }
    people={
      Object {
        "isLoading": false,
        "results": null,
      }
    }
    peopleTeams={
      Object {
        "isLoading": false,
        "results": Array [],
      }
    }
    query="query"
    screenType="postQuerySearchResults"
    services={
      Object {
        "cursor": null,
        "isLoading": false,
        "results": Array [
          Object {
            "component": Object {
              "description": "description-text-Lorem ipsum",
              "id": "id-123",
              "name": "name-123",
              "ownerId": "1eb19c9d-e4c7-45c8-aec3-8a2d7cbe5515",
            },
            "link": "https://link",
          },
        ],
      }
    }
    spaces={
      Object {
        "isLoading": false,
        "results": null,
      }
    }
    teamNames={
      Object {
        "15c3f236-8339-43e0-9049-2fd03e808d9d": Object {
          "displayName": "another team",
        },
        "1eb19c9d-e4c7-45c8-aec3-8a2d7cbe5515": Object {
          "displayName": "this is a team",
        },
        "5a740f67-ee17-4558-b567-60116bcd266d": Object {
          "displayName": "yet another team",
        },
      }
    }
  />
</Fragment>
`;

exports[`<SearchResults /> render with results matches snapshot for pre query 1`] = `
<Fragment>
  <WithAnalyticsEvents(WrappedComponent)
    components={Array []}
    isCollapsed={false}
    isLoading={false}
    screenType="cachedResults"
    teams={Array []}
  />
</Fragment>
`;

exports[`<SearchResults /> render with results matches snapshot for pre query loading 1`] = `<LoadingSpinner />`;

exports[`<SearchResults /> render with results matches snapshot for pre query with components and teams 1`] = `
<Fragment>
  <WithAnalyticsEvents(WrappedComponent)
    components={
      Array [
        Object {
          "id": "id1",
          "name": "component-1",
          "type": "SERVICE",
        },
      ]
    }
    isCollapsed={false}
    isLoading={false}
    screenType="cachedResults"
    teams={
      Array [
        Object {
          "displayName": "Lodestone",
          "id": "team1",
          "smallAvatarImageUrl": "https://atlassian.net/test.svg",
        },
      ]
    }
  />
</Fragment>
`;

exports[`<SearchResults /> with no results render and matches snapshot for post query loading 1`] = `
<Fragment>
  <LoadingSpinner />
</Fragment>
`;
