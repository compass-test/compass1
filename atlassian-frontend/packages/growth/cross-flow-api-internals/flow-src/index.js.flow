/**
 * This declaration file should be manually updated to keep definitions
 * in sync with original TS sources.
 *
 * Original source: src/index.ts
 *
 * @flow
 */
import type { ComponentType } from 'react';
import type {
  CrossFlowExtensions,
  JSONValue,
} from '@atlassiansox/cross-flow-base-types';

/**
 * Version 0 of public Cross Flow API
 */
export type ExperimentalOptions = {
  [key: string]: JSONValue,
};

declare export var Journeys: {|
  +GET_STARTED: 'get-started',
  +DECIDE: 'decide',
  +DISCOVER: 'discover',
|};

declare export var Targets: {|
  +CONFLUENCE: 'confluence.ondemand',
  +JIRA_CORE: 'jira-core.ondemand',
  +JIRA_SERVICE_DESK: 'jira-servicedesk.ondemand',
  +JIRA_SOFTWARE: 'jira-software.ondemand',
  +BITBUCKET: 'bitbucket.ondemand',
  +TRELLO: 'trello',
  +OPSGENIE: 'opsgenie',
  +STATUSPAGE: 'statuspage',
  +TEAM_CENTRAL: 'townsquare',
  +AVOCADO: 'avocado',
|};

export type TargetType = $Values<typeof Targets>;

declare export var Reasons: {|
  +NO_API_SUPPORT: 'Could not provide requested API version',
  +NO_PROVIDER: 'Provider not found',
|};

export type ReasonType = $Values<typeof Reasons>;

type JourneyTargetProductDefinition =
  | {|
      journey: typeof Journeys.GET_STARTED | typeof Journeys.DECIDE,
      targetProduct: TargetType,
    |}
  | {|
      journey?: typeof Journeys.DISCOVER,
    |};

export type Options = {|
  ...JourneyTargetProductDefinition,
  sourceComponent: string,
  sourceContext: string,
  experimentalOptions?: ExperimentalOptions,
  extensions?: CrossFlowExtensions,
|};

export type CompletionStatus = {|
  success?: boolean,
|};

type OnOpen = (options: Options) => Promise<CompletionStatus>;

type APIv0 = {|
  open(options: Options): Promise<CompletionStatus>,
|};

type ContextDisabled = {|
  isEnabled: false,
  reason: ReasonType,
|};

type ContextEnabled<T> = {|
  isEnabled: true,
  api: T,
|};

export type CrossFlowContextType = ContextEnabled<APIv0> | ContextDisabled;

export type WithCrossFlowProps = {|
  crossFlow: CrossFlowContextType,
|};

declare export function useCrossFlow(): CrossFlowContextType;

declare export function withCrossFlow<P>(
  WrappedComponent: ComponentType<P & WithCrossFlowProps>,
): ComponentType<P>;
