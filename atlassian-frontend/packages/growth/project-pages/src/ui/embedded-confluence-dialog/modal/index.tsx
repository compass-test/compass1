import React, { FunctionComponent, useCallback, useMemo } from 'react';
import { injectIntl, InjectedIntlProps } from 'react-intl';
import Modal, {
  ModalHeaderProps as HeaderComponentProps,
} from '@atlaskit/modal-dialog';
import Button from '@atlaskit/button';
import ShortcutIcon from '@atlaskit/icon/glyph/shortcut';
import CrossIcon from '@atlaskit/icon/glyph/cross';
import Tooltip from '@atlaskit/tooltip';
import messages from './messages';
import {
  ModalBodyViewWrapper,
  ModalBodyEditWrapper,
  ModalContainer,
  CustomModalHeader,
  ModalInnerBlanket,
  ModalOuterBlanket,
} from './styled';
import { EmbeddedDialogMode } from '../../../controllers/embedded-page/types';
import { connectUIAnalytics } from '../../../common/analytics/util';
import { UIAnalyticsEvent } from '@atlaskit/analytics-next';
import OriginTracing from '@atlassiansox/origin-tracing';

interface Props {
  mode: EmbeddedDialogMode;
  headerBtnHref?: string;
  onClose: () => void;
  isInnerModalOpen: boolean;
}

const EmbeddedPageModal: FunctionComponent<Props & InjectedIntlProps> = ({
  mode,
  headerBtnHref,
  onClose,
  children,
  isInnerModalOpen,
  intl: { formatMessage },
}) => {
  const Header = ({
    onOpenInConfluence,
  }: {
    onOpenInConfluence: (analyticEvent: UIAnalyticsEvent) => void;
  }) => {
    const origin = useMemo(() => new OriginTracing({ product: 'jira' }), []);
    const handleOpenInConfluence = useCallback(
      (_: React.MouseEvent, analyticsEvent: UIAnalyticsEvent) =>
        onOpenInConfluence(
          analyticsEvent.update(
            origin.toAnalyticsAttributes({ hasGeneratedId: true }),
          ),
        ),
      [onOpenInConfluence, origin],
    );
    return (
      <CustomModalHeader>
        <Button
          iconAfter={
            <ShortcutIcon
              label={formatMessage(messages.openInANewTabHint)}
              size="small"
            />
          }
          // technically href already has an origin generated by confluence-table-tree, but we clobber it
          // since we are firing the click event with a new generated id
          href={headerBtnHref ? origin.addToUrl(headerBtnHref) : undefined}
          target="_blank"
          onClick={handleOpenInConfluence}
        >
          {formatMessage(messages.titleButton)}
        </Button>
        <Tooltip content={formatMessage(messages.closeHint)}>
          <Button
            onClick={onClose}
            appearance="subtle"
            iconAfter={
              <CrossIcon
                label={formatMessage(messages.closeHint)}
                size="medium"
              />
            }
          ></Button>
        </Tooltip>
      </CustomModalHeader>
    );
  };
  const ModalBodyWrapper =
    mode === 'view' ? ModalBodyViewWrapper : ModalBodyEditWrapper;

  const ConnectedHeader = connectUIAnalytics<HeaderComponentProps>({
    onOpenInConfluence: 'openEmbeddedViewPageInConfluence',
  })(Header);

  return (
    <>
      <Modal autoFocus={false} onClose={onClose} width={'100%'} height={'100%'}>
        <ModalContainer>
          {mode === 'view' && <ConnectedHeader />}
          <ModalBodyWrapper>
            {children}
            {isInnerModalOpen && <ModalInnerBlanket />}
          </ModalBodyWrapper>
        </ModalContainer>
      </Modal>
      {isInnerModalOpen && <ModalOuterBlanket />}
    </>
  );
};

export default injectIntl<Props>(EmbeddedPageModal);
