// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Eslint-plugin-tangerine should export the correct configs 1`] = `
Object {
  "packages": Object {
    "plugins": Array [
      "tangerine",
    ],
    "rules": Object {
      "tangerine/import/no-nested-imports": Array [
        "error",
        Object {
          "dirs": Array [
            "src/common",
            "src/controllers",
            "src/services",
            "src/ui",
          ],
          "message": "For more details see #guidelines#/architecture/general/apps/",
        },
      ],
      "tangerine/import/no-parent-imports": Array [
        "error",
        Object {
          "dirs": Array [
            "src/ui",
          ],
          "message": "For more details see #guidelines#/architecture/general/components/components-types/ui/",
        },
      ],
      "tangerine/import/no-restricted-paths": Array [
        "error",
        Object {
          "message": "For more details see #guidelines#/architecture/general/apps/",
          "restrictions": Array [
            Object {
              "from": Array [
                "src/controllers",
                "src/ui",
              ],
              "target": "src/services",
            },
            Object {
              "from": Array [
                "src/services",
                "src/ui",
              ],
              "target": "src/controllers",
            },
            Object {
              "from": Array [
                "src/services",
                "src/controllers",
                "src/ui",
              ],
              "target": "src/common",
            },
          ],
        },
      ],
    },
  },
  "recommended": Object {
    "plugins": Array [
      "tangerine",
    ],
    "rules": Object {
      "tangerine/import/no-nested-imports": Array [
        "error",
        Object {
          "dirs": Array [
            "src/common",
            "src/controllers",
            "src/services",
            "src/ui",
          ],
          "message": "For more details see #guidelines#/architecture/general/apps/",
        },
      ],
      "tangerine/import/no-parent-imports": Array [
        "error",
        Object {
          "dirs": Array [
            "src/ui",
          ],
          "message": "For more details see #guidelines#/architecture/general/components/components-types/ui/",
        },
      ],
      "tangerine/import/no-restricted-paths": Array [
        "error",
        Object {
          "message": "For more details see #guidelines#/architecture/general/apps/",
          "restrictions": Array [
            Object {
              "from": Array [
                "src/controllers",
                "src/ui",
              ],
              "target": "src/services",
            },
            Object {
              "from": Array [
                "src/services",
                "src/ui",
              ],
              "target": "src/controllers",
            },
            Object {
              "from": Array [
                "src/services",
                "src/controllers",
                "src/ui",
              ],
              "target": "src/common",
            },
          ],
        },
      ],
    },
  },
}
`;

exports[`Eslint-plugin-tangerine should export the correct rules 1`] = `
Object {
  "export/no-export-all": Object {
    "create": [Function],
    "meta": Object {
      "messages": Object {
        "noExportStar": "'export *' makes it difficult to a.) reason about, and b.) tree shake (https://webpack.js.org/guides/tree-shaking/) code. Use export { name1, name2, ..., nameN } from '{{ path }}' instead;",
      },
    },
  },
  "i18n/messages-are-spelled-correctly": Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "description": "Ensures that i18n messages are spelled correctly.",
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "additionalWords": Object {
              "additionalProperties": false,
              "properties": Object {
                "caseInsensitive": Object {
                  "items": Object {
                    "type": "string",
                  },
                  "type": "array",
                },
                "caseSensitive": Object {
                  "items": Object {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
              "required": Array [
                "caseSensitive",
                "caseInsensitive",
              ],
              "type": "object",
            },
            "language": Object {
              "type": "string",
            },
            "messageSelectors": Object {
              "items": Object {
                "type": "string",
              },
              "type": "array",
            },
          },
          "required": Array [
            "language",
            "messageSelectors",
          ],
          "type": "object",
        },
      ],
    },
  },
  "import/default-import-names": Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "description": "Enforce consistent default import names for specified sources",
      },
      "fixable": "code",
      "messages": Object {
        "invalidDefaultImportName": "Invalid default name '{{current}}' for import from '{{source}}'; use '{{expected}}' instead",
      },
      "schema": Array [
        Object {
          "additionalItems": false,
          "items": Object {
            "additionalProperties": false,
            "properties": Object {
              "name": Object {
                "type": "string",
              },
              "source": Object {},
            },
            "type": "object",
          },
          "type": "array",
        },
      ],
    },
  },
  "import/entry-points": Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "description": "Import from packages via their intended entry points only.",
      },
      "messages": Object {
        "invalidImport": "Import from '{{from}}' entry point is restricted. Please import from the package's official entry points declared in package.json",
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "custom": Object {
              "additionalProperties": true,
              "properties": Object {},
              "type": "object",
            },
            "default": Object {
              "type": "number",
            },
            "excluded": Object {
              "additionalItems": false,
              "items": Object {
                "type": "string",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "import/no-dangling-index": Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "description": "Disallow unnecessary trailing '/index' in imports",
      },
      "fixable": "code",
      "messages": Object {
        "addIndex": "Invalid import {{ value }}; should have dangling '/index'",
        "removeIndex": "Invalid import {{ value }}; no dangling '/index' allowed",
      },
      "schema": Array [],
    },
  },
  "import/no-dangling-slash": Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "description": "Disallow unnecessary trailing '/' in imports",
      },
      "fixable": "code",
      "messages": Object {
        "removeSlash": "Invalid import {{ value }}; no dangling '/' allowed",
      },
      "schema": Array [],
    },
  },
  "import/no-dot-prefix-in-upward-relative-imports": Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "description": "Remove leading \`./\` in relative imports from other folders",
      },
      "fixable": "code",
      "messages": Object {
        "unnecessaryImportPrefix": "Unnecessary dot prefix in '{{source}}'",
      },
    },
  },
  "import/no-implicit-imports": Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "description": "Enforce use of explicit over implicit imports",
      },
      "fixable": "code",
      "messages": Object {
        "invalidMemberExpression": "Invalid use of member expression for '{{ defaultImport }}'; use explicit imports instead",
      },
      "schema": Array [
        Object {
          "additionalItems": false,
          "items": Object {
            "additionalProperties": false,
            "properties": Object {
              "keepDefaultImport": Object {
                "type": "boolean",
              },
              "source": Object {
                "type": "string",
              },
            },
            "type": "object",
          },
          "type": "array",
        },
      ],
    },
  },
  "import/no-nested-imports": Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "description": "Disallow imports from descendant directories more than one level deep",
      },
      "messages": Object {
        "invalidImport": "Importing from a descendant directory more than one level deep is not allowed{{dir}}{{message}}",
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "basePath": Object {
              "type": "string",
            },
            "dirs": Object {
              "items": Object {
                "type": "string",
              },
              "type": "array",
            },
            "message": Object {
              "type": "string",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "import/no-parent-imports": Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "description": "Restrict imports from parent paths in specific directories",
      },
      "messages": Object {
        "invalidImport": "Importing from a parent inside '{{dir}}' is not allowed{{message}}",
        "provideConfig": "This rule does nothing by default; either provide options or disable the rule",
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "basePath": Object {
              "type": "string",
            },
            "dirs": Object {
              "items": Object {
                "type": "string",
              },
              "minItems": 1,
              "type": "array",
            },
            "message": Object {
              "type": "string",
            },
            "srcRoot": Object {
              "type": "string",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "import/no-relative-package-imports": Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "description": "Access other packages only through package imports.",
      },
      "messages": Object {
        "invalidImport": "Relative import '{{from}}' from outside the package is not allowed, as it breaks your package's package boundaries. Please use a package import (e.g., import x from 'other-page') instead. For clarifications, please see http://go.atlassian.com/import-no-relative-package-imports, or ask for help in the #tangerine channel.",
      },
      "schema": Array [],
    },
  },
  "import/no-restricted-paths": Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "description": "Restrict imports between different parts of your app based on path matching.",
      },
      "messages": Object {
        "invalidImport": "Importing '{{from}}' within '{{target}}' is restricted{{message}}",
        "provideConfig": "This rule does nothing by default; either provide options or disable the rule",
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "basePath": Object {
              "type": "string",
            },
            "message": Object {
              "type": "string",
            },
            "restrictions": Object {
              "items": Object {
                "additionalProperties": false,
                "properties": Object {
                  "from": Object {
                    "items": Object {
                      "type": "string",
                    },
                    "type": Array [
                      "string",
                      "array",
                    ],
                  },
                  "target": Object {
                    "items": Object {
                      "type": "string",
                    },
                    "type": Array [
                      "string",
                      "array",
                    ],
                  },
                },
                "type": "object",
              },
              "minItems": 1,
              "type": "array",
            },
            "srcRoot": Object {
              "type": "string",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "other/filename-case": Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "description": "Enforce consistent casing for file and directory names",
      },
      "messages": Object {
        "invalidFileName": "Invalid file name '{{ baseFileName }}'. Use {{ case }}-case only.",
        "invalidFolderName": "Invalid folder names '{{ invalidFoldersString }}' in {{ fileName }}. Use {{ case }}-case only.",
      },
      "schema": Array [
        Object {
          "additionalProperties": false,
          "properties": Object {
            "case": Object {
              "enum": Array [
                "kebab",
                "camel",
              ],
              "type": "string",
            },
            "suffixes": Object {
              "items": Object {
                "type": "string",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
      ],
    },
  },
  "react/lifecycle-method-arg-naming": Object {
    "create": [Function],
    "meta": Object {
      "docs": Object {
        "description": "Enforce consistent naming of react lifecycle method arguments",
      },
      "fixable": "code",
      "messages": Object {
        "invalidArgName": "Invalid parameter name '{{actualName}}' for react lifecycle method; use '{{expectedName}}' instead",
      },
      "schema": Array [],
    },
  },
}
`;
